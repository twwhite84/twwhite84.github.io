(()=>{var e={504:e=>{function r(){}r.prototype={on:function(e,r,t){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:r,ctx:t}),this},once:function(e,r,t){var n=this;function i(){n.off(e,i),r.apply(t,arguments)}return i._=r,this.on(e,i,t)},emit:function(e){for(var r=[].slice.call(arguments,1),t=((this.e||(this.e={}))[e]||[]).slice(),n=0,i=t.length;n<i;n++)t[n].fn.apply(t[n].ctx,r);return this},off:function(e,r){var t=this.e||(this.e={}),n=t[e],i=[];if(n&&r)for(var u=0,o=n.length;u<o;u++)n[u].fn!==r&&n[u].fn._!==r&&i.push(n[u]);return i.length?t[e]=i:delete t[e],this}},e.exports=r,e.exports.TinyEmitter=r},369:function(e){e.exports=function(){"use strict";function e(){return!0}function r(){return!1}function t(){}const n="Argument is not a typed-function.";return function i(){function u(e){return"object"==typeof e&&null!==e&&e.constructor===Object}const o=[{name:"number",test:function(e){return"number"==typeof e}},{name:"string",test:function(e){return"string"==typeof e}},{name:"boolean",test:function(e){return"boolean"==typeof e}},{name:"Function",test:function(e){return"function"==typeof e}},{name:"Array",test:Array.isArray},{name:"Date",test:function(e){return e instanceof Date}},{name:"RegExp",test:function(e){return e instanceof RegExp}},{name:"Object",test:u},{name:"null",test:function(e){return null===e}},{name:"undefined",test:function(e){return void 0===e}}],a={name:"any",test:e,isAny:!0};let s,c,f=0,l={createCount:0};function p(e){const r=s.get(e);if(r)return r;let t='Unknown type "'+e+'"';const n=e.toLowerCase();let i;for(i of c)if(i.toLowerCase()===n){t+='. Did you mean "'+i+'" ?';break}throw new TypeError(t)}function d(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"any";const t=r?p(r).index:c.length,n=[];for(let r=0;r<e.length;++r){if(!e[r]||"string"!=typeof e[r].name||"function"!=typeof e[r].test)throw new TypeError("Object with properties {name: string, test: function} expected");const i=e[r].name;if(s.has(i))throw new TypeError('Duplicate type name "'+i+'"');n.push(i),s.set(i,{name:i,test:e[r].test,isAny:e[r].isAny,index:t+r,conversionsTo:[]})}const i=c.slice(t);c=c.slice(0,t).concat(n).concat(i);for(let e=t+n.length;e<c.length;++e)s.get(c[e]).index=e}function h(){s=new Map,c=[],f=0,d([a],!1)}function D(e){const r=c.filter((r=>{const t=s.get(r);return!t.isAny&&t.test(e)}));return r.length?r:["any"]}function m(e){return e&&"function"==typeof e&&"_typedFunctionData"in e}function v(e,r,t){if(!m(e))throw new TypeError(n);const i=t&&t.exact,u=E(Array.isArray(r)?r.join(","):r),o=y(u);if(!i||o in e.signatures){const r=e._typedFunctionData.signatureMap.get(o);if(r)return r}const a=u.length;let s,c;if(i){let r;for(r in s=[],e.signatures)s.push(e._typedFunctionData.signatureMap.get(r))}else s=e._typedFunctionData.signatures;for(let e=0;e<a;++e){const r=u[e],t=[];let n;for(n of s){const i=C(n.params,e);if(i&&(!r.restParam||i.restParam)){if(!i.hasAny){const e=A(i);if(r.types.some((r=>!e.has(r.name))))continue}t.push(n)}}if(s=t,0===s.length)break}for(c of s)if(c.params.length<=a)return c;throw new TypeError("Signature not found (signature: "+(e.name||"unnamed")+"("+y(u,", ")+"))")}function y(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return e.map((e=>e.name)).join(r)}function g(e){const r=0===e.indexOf("..."),t=(r?e.length>3?e.slice(3):"any":e).split("|").map((e=>p(e.trim())));let n=!1,i=r?"...":"";return{types:t.map((function(e){return n=e.isAny||n,i+=e.name+"|",{name:e.name,typeIndex:e.index,test:e.test,isAny:e.isAny,conversion:null,conversionIndex:-1}})),name:i.slice(0,-1),hasAny:n,hasConversion:!1,restParam:r}}function w(e){const r=function(e){if(0===e.length)return[];const r=e.map(p);e.length>1&&r.sort(((e,r)=>e.index-r.index));let t=r[0].conversionsTo;if(1===e.length)return t;t=t.concat([]);const n=new Set(e);for(let e=1;e<r.length;++e){let i;for(i of r[e].conversionsTo)n.has(i.from)||(t.push(i),n.add(i.from))}return t}(e.types.map((e=>e.name)));let t=e.hasAny,n=e.name;const i=r.map((function(e){const r=p(e.from);return t=r.isAny||t,n+="|"+e.from,{name:e.from,typeIndex:r.index,test:r.test,isAny:r.isAny,conversion:e,conversionIndex:e.index}}));return{types:e.types.concat(i),name:n,hasAny:t,hasConversion:i.length>0,restParam:e.restParam}}function A(e){return e.typeSet||(e.typeSet=new Set,e.types.forEach((r=>e.typeSet.add(r.name)))),e.typeSet}function E(e){const r=[];if("string"!=typeof e)throw new TypeError("Signatures must be strings");const t=e.trim();if(""===t)return r;const n=t.split(",");for(let e=0;e<n.length;++e){const t=g(n[e].trim());if(t.restParam&&e!==n.length-1)throw new SyntaxError('Unexpected rest parameter "'+n[e]+'": only allowed for the last parameter');if(0===t.types.length)return null;r.push(t)}return r}function x(e){const r=Y(e);return!!r&&r.restParam}function F(r){if(r&&0!==r.types.length){if(1===r.types.length)return p(r.types[0].name).test;if(2===r.types.length){const e=p(r.types[0].name).test,t=p(r.types[1].name).test;return function(r){return e(r)||t(r)}}{const e=r.types.map((function(e){return p(e.name).test}));return function(r){for(let t=0;t<e.length;t++)if(e[t](r))return!0;return!1}}}return e}function b(e){let r,t,n;if(x(e)){r=Z(e).map(F);const t=r.length,n=F(Y(e)),i=function(e){for(let r=t;r<e.length;r++)if(!n(e[r]))return!1;return!0};return function(e){for(let t=0;t<r.length;t++)if(!r[t](e[t]))return!1;return i(e)&&e.length>=t+1}}return 0===e.length?function(e){return 0===e.length}:1===e.length?(t=F(e[0]),function(e){return t(e[0])&&1===e.length}):2===e.length?(t=F(e[0]),n=F(e[1]),function(e){return t(e[0])&&n(e[1])&&2===e.length}):(r=e.map(F),function(e){for(let t=0;t<r.length;t++)if(!r[t](e[t]))return!1;return e.length===r.length})}function C(e,r){return r<e.length?e[r]:x(e)?Y(e):null}function _(e,r){const t=C(e,r);return t?A(t):new Set}function M(e){return null===e.conversion||void 0===e.conversion}function B(e,r){const t=new Set;return e.forEach((e=>{const n=_(e.params,r);let i;for(i of n)t.add(i)})),t.has("any")?["any"]:Array.from(t)}function N(e,r,t){let n,i;const u=e||"unnamed";let o,a=t;for(o=0;o<r.length;o++){const e=[];if(a.forEach((t=>{const n=F(C(t.params,o));(o<t.params.length||x(t.params))&&n(r[o])&&e.push(t)})),0===e.length){if(i=B(a,o),i.length>0){const e=D(r[o]);return n=new TypeError("Unexpected type of argument in function "+u+" (expected: "+i.join(" or ")+", actual: "+e.join(" | ")+", index: "+o+")"),n.data={category:"wrongType",fn:u,index:o,actual:e,expected:i},n}}else a=e}const s=a.map((function(e){return x(e.params)?1/0:e.params.length}));if(r.length<Math.min.apply(null,s))return i=B(a,o),n=new TypeError("Too few arguments in function "+u+" (expected: "+i.join(" or ")+", index: "+r.length+")"),n.data={category:"tooFewArgs",fn:u,index:r.length,expected:i},n;const c=Math.max.apply(null,s);if(r.length>c)return n=new TypeError("Too many arguments in function "+u+" (expected: "+c+", actual: "+r.length+")"),n.data={category:"tooManyArgs",fn:u,index:r.length,expectedLength:c},n;const f=[];for(let e=0;e<r.length;++e)f.push(D(r[e]).join("|"));return n=new TypeError('Arguments of type "'+f.join(", ")+'" do not match any of the defined signatures of function '+u+"."),n.data={category:"mismatch",actual:f},n}function S(e){let r=c.length+1;for(let t=0;t<e.types.length;t++)M(e.types[t])&&(r=Math.min(r,e.types[t].typeIndex));return r}function T(e){let r=f+1;for(let t=0;t<e.types.length;t++)M(e.types[t])||(r=Math.min(r,e.types[t].conversionIndex));return r}function z(e,r){if(e.hasAny){if(!r.hasAny)return 1}else if(r.hasAny)return-1;if(e.restParam){if(!r.restParam)return 1}else if(r.restParam)return-1;if(e.hasConversion){if(!r.hasConversion)return 1}else if(r.hasConversion)return-1;const t=S(e)-S(r);if(t<0)return-1;if(t>0)return 1;const n=T(e)-T(r);return n<0?-1:n>0?1:0}function O(e,r){const t=e.params,n=r.params,i=Y(t),u=Y(n),o=x(t),a=x(n);if(o&&i.hasAny){if(!a||!u.hasAny)return 1}else if(a&&u.hasAny)return-1;let s,c=0,f=0;for(s of t)s.hasAny&&++c,s.hasConversion&&++f;let l=0,p=0;for(s of n)s.hasAny&&++l,s.hasConversion&&++p;if(c!==l)return c-l;if(o&&i.hasConversion){if(!a||!u.hasConversion)return 1}else if(a&&u.hasConversion)return-1;if(f!==p)return f-p;if(o){if(!a)return 1}else if(a)return-1;const d=(t.length-n.length)*(o?-1:1);if(0!==d)return d;const h=[];let D,m=0;for(let e=0;e<t.length;++e){const r=z(t[e],n[e]);h.push(r),m+=r}if(0!==m)return m;for(D of h)if(0!==D)return D;return 0}function I(e,r){let t=r;if(e.some((e=>e.hasConversion))){const n=x(e),i=e.map(k);t=function(){const e=[],t=n?arguments.length-1:arguments.length;for(let r=0;r<t;r++)e[r]=i[r](arguments[r]);return n&&(e[t]=arguments[t].map(i[t])),r.apply(this,e)}}let n=t;if(x(e)){const r=e.length-1;n=function(){return t.apply(this,W(arguments,0,r).concat([W(arguments,r)]))}}return n}function k(e){let r,t,n,i;const u=[],o=[];switch(e.types.forEach((function(e){e.conversion&&(u.push(p(e.conversion.from).test),o.push(e.conversion.convert))})),o.length){case 0:return function(e){return e};case 1:return r=u[0],n=o[0],function(e){return r(e)?n(e):e};case 2:return r=u[0],t=u[1],n=o[0],i=o[1],function(e){return r(e)?n(e):t(e)?i(e):e};default:return function(e){for(let r=0;r<o.length;r++)if(u[r](e))return o[r](e);return e}}}function P(e){return function e(r,t,n){if(t<r.length){const o=r[t];let a=[];if(o.restParam){const e=o.types.filter(M);e.length<o.types.length&&a.push({types:e,name:"..."+e.map((e=>e.name)).join("|"),hasAny:e.some((e=>e.isAny)),hasConversion:!1,restParam:!0}),a.push(o)}else a=o.types.map((function(e){return{types:[e],name:e.name,hasAny:e.isAny,hasConversion:e.conversion,restParam:!1}}));return i=a,u=function(i){return e(r,t+1,n.concat([i]))},Array.prototype.concat.apply([],i.map(u))}var i,u;return[n]}(e,0,[])}function R(e,r){const t=Math.max(e.length,r.length);for(let n=0;n<t;n++){const t=_(e,n),i=_(r,n);let u,o=!1;for(u of i)if(t.has(u)){o=!0;break}if(!o)return!1}const n=e.length,i=r.length,u=x(e),o=x(r);return u?o?n===i:i>=n:o?n>=i:n===i}function j(e,r,t){const n=[];let i;for(i of e){let e=t[i];if("number"!=typeof e)throw new TypeError('No definition for referenced signature "'+i+'"');if(e=r[e],"function"!=typeof e)return!1;n.push(e)}return n}function q(e,r,t){const n=function(e){return e.map((e=>J(e)?V(e.referToSelf.callback):G(e)?X(e.referTo.references,e.referTo.callback):e))}(e),i=new Array(n.length).fill(!1);let u=!0;for(;u;){u=!1;let e=!0;for(let o=0;o<n.length;++o){if(i[o])continue;const a=n[o];if(J(a))n[o]=a.referToSelf.callback(t),n[o].referToSelf=a.referToSelf,i[o]=!0,e=!1;else if(G(a)){const t=j(a.referTo.references,n,r);t?(n[o]=a.referTo.callback.apply(this,t),n[o].referTo=a.referTo,i[o]=!0,e=!1):u=!0}}if(e&&u)throw new SyntaxError("Circular reference detected in resolving typed.referTo")}return n}function U(e,n){if(l.createCount++,0===Object.keys(n).length)throw new SyntaxError("No signatures provided");l.warnAgainstDeprecatedThis&&function(e){const r=/\bthis(\(|\.signatures\b)/;Object.keys(e).forEach((t=>{const n=e[t];if(r.test(n.toString()))throw new SyntaxError("Using `this` to self-reference a function is deprecated since typed-function@3. Use typed.referTo and typed.referToSelf instead.")}))}(n);const i=[],u=[],o={},a=[];let s;for(s in n){if(!Object.prototype.hasOwnProperty.call(n,s))continue;const e=E(s);if(!e)continue;i.forEach((function(r){if(R(r,e))throw new TypeError('Conflicting signatures "'+y(r)+'" and "'+y(e)+'".')})),i.push(e);const r=u.length;u.push(n[s]);const t=e.map(w);let c;for(c of P(t)){const e=y(c);a.push({params:c,name:e,fn:r}),c.every((e=>!e.hasConversion))&&(o[e]=r)}}a.sort(O);const c=q(u,o,ae);let f;for(f in o)Object.prototype.hasOwnProperty.call(o,f)&&(o[f]=c[o[f]]);const p=[],d=new Map;for(f of a)d.has(f.name)||(f.fn=c[f.fn],p.push(f),d.set(f.name,f));const h=p[0]&&p[0].params.length<=2&&!x(p[0].params),D=p[1]&&p[1].params.length<=2&&!x(p[1].params),m=p[2]&&p[2].params.length<=2&&!x(p[2].params),v=p[3]&&p[3].params.length<=2&&!x(p[3].params),g=p[4]&&p[4].params.length<=2&&!x(p[4].params),A=p[5]&&p[5].params.length<=2&&!x(p[5].params),C=h&&D&&m&&v&&g&&A;for(let e=0;e<p.length;++e)p[e].test=b(p[e].params);const _=h?F(p[0].params[0]):r,M=D?F(p[1].params[0]):r,B=m?F(p[2].params[0]):r,N=v?F(p[3].params[0]):r,S=g?F(p[4].params[0]):r,T=A?F(p[5].params[0]):r,z=h?F(p[0].params[1]):r,k=D?F(p[1].params[1]):r,j=m?F(p[2].params[1]):r,U=v?F(p[3].params[1]):r,L=g?F(p[4].params[1]):r,Z=A?F(p[5].params[1]):r;for(let e=0;e<p.length;++e)p[e].implementation=I(p[e].params,p[e].fn);const Y=h?p[0].implementation:t,W=D?p[1].implementation:t,X=m?p[2].implementation:t,V=v?p[3].implementation:t,G=g?p[4].implementation:t,J=A?p[5].implementation:t,H=h?p[0].params.length:-1,K=D?p[1].params.length:-1,$=m?p[2].params.length:-1,Q=v?p[3].params.length:-1,ee=g?p[4].params.length:-1,re=A?p[5].params.length:-1,te=C?6:0,ne=p.length,ie=p.map((e=>e.test)),ue=p.map((e=>e.implementation)),oe=function(){for(let e=te;e<ne;e++)if(ie[e](arguments))return ue[e].apply(this,arguments);return l.onMismatch(e,arguments,p)};function ae(e,r){return arguments.length===H&&_(e)&&z(r)?Y.apply(this,arguments):arguments.length===K&&M(e)&&k(r)?W.apply(this,arguments):arguments.length===$&&B(e)&&j(r)?X.apply(this,arguments):arguments.length===Q&&N(e)&&U(r)?V.apply(this,arguments):arguments.length===ee&&S(e)&&L(r)?G.apply(this,arguments):arguments.length===re&&T(e)&&Z(r)?J.apply(this,arguments):oe.apply(this,arguments)}try{Object.defineProperty(ae,"name",{value:e})}catch(e){}return ae.signatures=o,ae._typedFunctionData={signatures:p,signatureMap:d},ae}function L(e,r,t){throw N(e,r,t)}function Z(e){return W(e,0,e.length-1)}function Y(e){return e[e.length-1]}function W(e,r,t){return Array.prototype.slice.call(e,r,t)}function X(e,r){return{referTo:{references:e,callback:r}}}function V(e){if("function"!=typeof e)throw new TypeError("Callback function expected as first argument");return{referToSelf:{callback:e}}}function G(e){return e&&"object"==typeof e.referTo&&Array.isArray(e.referTo.references)&&"function"==typeof e.referTo.callback}function J(e){return e&&"object"==typeof e.referToSelf&&"function"==typeof e.referToSelf.callback}function H(e,r){if(!e)return r;if(r&&r!==e){const t=new Error("Function names do not match (expected: "+e+", actual: "+r+")");throw t.data={actual:r,expected:e},t}return e}function K(e){let r;for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(m(e[t])||"string"==typeof e[t].signature)&&(r=H(r,e[t].name));return r}function $(e,r){let t;for(t in r)if(Object.prototype.hasOwnProperty.call(r,t)){if(t in e&&r[t]!==e[t]){const n=new Error('Signature "'+t+'" is defined twice');throw n.data={signature:t,sourceFunction:r[t],destFunction:e[t]},n}e[t]=r[t]}}h(),d(o);const Q=l;function ee(e){if(!e||"string"!=typeof e.from||"string"!=typeof e.to||"function"!=typeof e.convert)throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");if(e.to===e.from)throw new SyntaxError('Illegal to define conversion from "'+e.from+'" to itself.')}return l=function(e){const r="string"==typeof e;let t=r?e:"";const n={};for(let e=r?1:0;e<arguments.length;++e){const i=arguments[e];let o,a={};if("function"==typeof i?(o=i.name,"string"==typeof i.signature?a[i.signature]=i:m(i)&&(a=i.signatures)):u(i)&&(a=i,r||(o=K(i))),0===Object.keys(a).length){const r=new TypeError("Argument to 'typed' at index "+e+" is not a (typed) function, nor an object with signatures as keys and functions as values.");throw r.data={index:e,argument:i},r}r||(t=H(t,o)),$(n,a)}return U(t||"",n)},l.create=i,l.createCount=Q.createCount,l.onMismatch=L,l.throwMismatchError=L,l.createError=N,l.clear=h,l.clearConversions=function(){let e;for(e of c)s.get(e).conversionsTo=[];f=0},l.addTypes=d,l._findType=p,l.referTo=function(){const e=Z(arguments).map((e=>y(E(e)))),r=Y(arguments);if("function"!=typeof r)throw new TypeError("Callback function expected as last argument");return X(e,r)},l.referToSelf=V,l.convert=function(e,r){const t=p(r);if(t.test(e))return e;const n=t.conversionsTo;if(0===n.length)throw new Error("There are no conversions to "+r+" defined.");for(let r=0;r<n.length;r++)if(p(n[r].from).test(e))return n[r].convert(e);throw new Error("Cannot convert "+e+" to "+r)},l.findSignature=v,l.find=function(e,r,t){return v(e,r,t).implementation},l.isTypedFunction=m,l.warnAgainstDeprecatedThis=!0,l.addType=function(e,r){let t="any";!1!==r&&s.has("Object")&&(t="Object"),l.addTypes([e],t)},l.addConversion=function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{override:!1};ee(e);const t=p(e.to),n=t.conversionsTo.find((r=>r.from===e.from));if(n){if(!r||!r.override)throw new Error('There is already a conversion from "'+e.from+'" to "'+t.name+'"');l.removeConversion({from:n.from,to:e.to,convert:n.convert})}t.conversionsTo.push({from:e.from,convert:e.convert,index:f++})},l.addConversions=function(e,r){e.forEach((e=>l.addConversion(e,r)))},l.removeConversion=function(e){ee(e);const r=p(e.to),t=function(e,r){for(let t=0;t<e.length;t++)if(r(e[t]))return e[t]}(r.conversionsTo,(r=>r.from===e.from));if(!t)throw new Error("Attempt to remove nonexistent conversion from "+e.from+" to "+e.to);if(t.convert!==e.convert)throw new Error("Conversion to remove does not match existing conversion");const n=r.conversionsTo.indexOf(t);r.conversionsTo.splice(n,1)},l.resolve=function(e,r){if(!m(e))throw new TypeError(n);const t=e._typedFunctionData.signatures;for(let e=0;e<t.length;++e)if(t[e].test(r))return t[e];return null},l}()}()}},r={};function t(n){var i=r[n];if(void 0!==i)return i.exports;var u=r[n]={exports:{}};return e[n].call(u.exports,u,u.exports,t),u.exports}(()=>{"use strict";var e;!function(e){e[e.X=0]="X",e[e.Y=1]="Y",e[e.Z=2]="Z",e[e.W=3]="W"}(e||(e={}));var r=function(){function r(){}return r.vec3_to_vec4=function(r){return[r[e.X],r[e.Y],r[e.Z],1]},r.vec4_to_vec3=function(r){return[r[e.X],r[e.Y],r[e.Z]]},r}();function n(){return n=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)({}).hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},n.apply(null,arguments)}var i=t(369);function u(e,r,t,n){if(!(this instanceof u))throw new SyntaxError("Constructor must be called with the new operator");this.fn=e,this.count=r,this.min=t,this.max=n,this.message="Wrong number of arguments in function "+e+" ("+r+" provided, "+t+(null!=n?"-"+n:"")+" expected)",this.stack=(new Error).stack}function o(e,r,t){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");this.actual=e,this.expected=r,this.relation=t,this.message="Dimension mismatch ("+(Array.isArray(e)?"["+e.join(", ")+"]":e)+" "+(this.relation||"!=")+" "+(Array.isArray(r)?"["+r.join(", ")+"]":r)+")",this.stack=(new Error).stack}function a(e,r,t){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");this.index=e,arguments.length<3?(this.min=0,this.max=r):(this.min=r,this.max=t),void 0!==this.min&&this.index<this.min?this.message="Index out of range ("+this.index+" < "+this.min+")":void 0!==this.max&&this.index>=this.max?this.message="Index out of range ("+this.index+" > "+(this.max-1)+")":this.message="Index out of range ("+this.index+")",this.stack=(new Error).stack}function s(e,r){return!(!function(e){return"object"==typeof e&&e&&e.constructor===Object}(e)&&!Array.isArray(e)||!ce(c,r)&&(r in Object.prototype||r in Function.prototype))}u.prototype=new Error,u.prototype.constructor=Error,u.prototype.name="ArgumentsError",u.prototype.isArgumentsError=!0,o.prototype=new RangeError,o.prototype.constructor=RangeError,o.prototype.name="DimensionError",o.prototype.isDimensionError=!0,a.prototype=new RangeError,a.prototype.constructor=RangeError,a.prototype.name="IndexError",a.prototype.isIndexError=!0;var c={length:!0,name:!0},f={toString:!0,valueOf:!0,toLocaleString:!0};class l{constructor(e){this.wrappedObject=e,this[Symbol.iterator]=this.entries}keys(){return Object.keys(this.wrappedObject).filter((e=>this.has(e))).values()}get(e){return function(e,r){if(s(e,r))return e[r];if("function"==typeof e[r]&&function(e,r){return!(null==e||"function"!=typeof e[r]||ce(e,r)&&Object.getPrototypeOf&&r in Object.getPrototypeOf(e)||!ce(f,r)&&(r in Object.prototype||r in Function.prototype))}(e,r))throw new Error('Cannot access method "'+r+'" as a property');throw new Error('No access to property "'+r+'"')}(this.wrappedObject,e)}set(e,r){return function(e,r,t){if(s(e,r))return e[r]=t,t;throw new Error('No access to property "'+r+'"')}(this.wrappedObject,e,r),this}has(e){return s(this.wrappedObject,e)&&e in this.wrappedObject}entries(){return e=this.keys(),r=e=>[e,this.get(e)],{next:()=>{var t=e.next();return t.done?t:{value:r(t.value),done:!1}}};var e,r}forEach(e){for(var r of this.keys())e(this.get(r),r,this)}delete(e){s(this.wrappedObject,e)&&delete this.wrappedObject[e]}clear(){for(var e of this.keys())this.delete(e)}get size(){return Object.keys(this.wrappedObject).length}}function p(e){return"number"==typeof e}function d(e){return!(!e||"object"!=typeof e||"function"!=typeof e.constructor)&&(!0===e.isBigNumber&&"object"==typeof e.constructor.prototype&&!0===e.constructor.prototype.isBigNumber||"function"==typeof e.constructor.isDecimal&&!0===e.constructor.isDecimal(e))}function h(e){return"bigint"==typeof e}function D(e){return e&&"object"==typeof e&&!0===Object.getPrototypeOf(e).isComplex||!1}function m(e){return e&&"object"==typeof e&&!0===Object.getPrototypeOf(e).isFraction||!1}function v(e){return e&&!0===e.constructor.prototype.isUnit||!1}function y(e){return"string"==typeof e}var g=Array.isArray;function w(e){return e&&!0===e.constructor.prototype.isMatrix||!1}function A(e){return Array.isArray(e)||w(e)}function E(e){return e&&e.isDenseMatrix&&!0===e.constructor.prototype.isMatrix||!1}function x(e){return e&&e.isSparseMatrix&&!0===e.constructor.prototype.isMatrix||!1}function F(e){return e&&!0===e.constructor.prototype.isRange||!1}function b(e){return e&&!0===e.constructor.prototype.isIndex||!1}function C(e){return"boolean"==typeof e}function _(e){return e&&!0===e.constructor.prototype.isResultSet||!1}function M(e){return e&&!0===e.constructor.prototype.isHelp||!1}function B(e){return"function"==typeof e}function N(e){return e instanceof Date}function S(e){return e instanceof RegExp}function T(e){return!(!e||"object"!=typeof e||e.constructor!==Object||D(e)||m(e))}function z(e){return!!e&&(e instanceof Map||e instanceof l||"function"==typeof e.set&&"function"==typeof e.get&&"function"==typeof e.keys&&"function"==typeof e.has)}function O(e){return z(e)&&z(e.a)&&z(e.b)}function I(e){return z(e)&&T(e.wrappedObject)}function k(e){return null===e}function P(e){return void 0===e}function R(e){return e&&!0===e.isAccessorNode&&!0===e.constructor.prototype.isNode||!1}function j(e){return e&&!0===e.isArrayNode&&!0===e.constructor.prototype.isNode||!1}function q(e){return e&&!0===e.isAssignmentNode&&!0===e.constructor.prototype.isNode||!1}function U(e){return e&&!0===e.isBlockNode&&!0===e.constructor.prototype.isNode||!1}function L(e){return e&&!0===e.isConditionalNode&&!0===e.constructor.prototype.isNode||!1}function Z(e){return e&&!0===e.isConstantNode&&!0===e.constructor.prototype.isNode||!1}function Y(e){return e&&!0===e.isFunctionAssignmentNode&&!0===e.constructor.prototype.isNode||!1}function W(e){return e&&!0===e.isFunctionNode&&!0===e.constructor.prototype.isNode||!1}function X(e){return e&&!0===e.isIndexNode&&!0===e.constructor.prototype.isNode||!1}function V(e){return e&&!0===e.isNode&&!0===e.constructor.prototype.isNode||!1}function G(e){return e&&!0===e.isObjectNode&&!0===e.constructor.prototype.isNode||!1}function J(e){return e&&!0===e.isOperatorNode&&!0===e.constructor.prototype.isNode||!1}function H(e){return e&&!0===e.isParenthesisNode&&!0===e.constructor.prototype.isNode||!1}function K(e){return e&&!0===e.isRangeNode&&!0===e.constructor.prototype.isNode||!1}function $(e){return e&&!0===e.isRelationalNode&&!0===e.constructor.prototype.isNode||!1}function Q(e){return e&&!0===e.isSymbolNode&&!0===e.constructor.prototype.isNode||!1}function ee(e){return e&&!0===e.constructor.prototype.isChain||!1}function re(e){var r=typeof e;return"object"===r?null===e?"null":d(e)?"BigNumber":e.constructor&&e.constructor.name?e.constructor.name:"Object":r}function te(e){var r=typeof e;if("number"===r||"bigint"===r||"string"===r||"boolean"===r||null==e)return e;if("function"==typeof e.clone)return e.clone();if(Array.isArray(e))return e.map((function(e){return te(e)}));if(e instanceof Date)return new Date(e.valueOf());if(d(e))return e;if(T(e))return function(e,r){var t={};for(var n in e)ce(e,n)&&(t[n]=r(e[n]));return t}(e,te);throw new TypeError("Cannot clone: unknown type of value (value: ".concat(e,")"))}function ne(e,r){for(var t in r)ce(r,t)&&(e[t]=r[t]);return e}function ie(e,r){if(Array.isArray(r))throw new TypeError("Arrays are not supported by deepExtend");for(var t in r)if(ce(r,t)&&!(t in Object.prototype)&&!(t in Function.prototype))if(r[t]&&r[t].constructor===Object)void 0===e[t]&&(e[t]={}),e[t]&&e[t].constructor===Object?ie(e[t],r[t]):e[t]=r[t];else{if(Array.isArray(r[t]))throw new TypeError("Arrays are not supported by deepExtend");e[t]=r[t]}return e}function ue(e,r){var t,n,i;if(Array.isArray(e)){if(!Array.isArray(r))return!1;if(e.length!==r.length)return!1;for(n=0,i=e.length;n<i;n++)if(!ue(e[n],r[n]))return!1;return!0}if("function"==typeof e)return e===r;if(e instanceof Object){if(Array.isArray(r)||!(r instanceof Object))return!1;for(t in e)if(!(t in r)||!ue(e[t],r[t]))return!1;for(t in r)if(!(t in e))return!1;return!0}return e===r}function oe(e){var r={};return ae(e,r),r}function ae(e,r){for(var t in e)if(ce(e,t)){var n=e[t];"object"==typeof n&&null!==n?ae(n,r):r[t]=n}}function se(e,r,t){var n,i=!0;Object.defineProperty(e,r,{get:function(){return i&&(n=t(),i=!1),n},set:function(e){n=e,i=!1},configurable:!0,enumerable:!0})}function ce(e,r){return e&&Object.hasOwnProperty.call(e,r)}function fe(e,r,t,n){function i(n){var i=function(e,r){for(var t={},n=0;n<r.length;n++){var i=r[n],u=e[i];void 0!==u&&(t[i]=u)}return t}(n,r.map(pe));return function(e,r,t){if(!r.filter((e=>!function(e){return e&&"?"===e[0]}(e))).every((e=>void 0!==t[e]))){var n=r.filter((e=>void 0===t[e]));throw new Error('Cannot create function "'.concat(e,'", ')+"some dependencies are missing: ".concat(n.map((e=>'"'.concat(e,'"'))).join(", "),"."))}}(e,r,n),t(i)}return i.isFactory=!0,i.fn=e,i.dependencies=r.slice().sort(),n&&(i.meta=n),i}function le(e){return"function"==typeof e&&"string"==typeof e.fn&&Array.isArray(e.dependencies)}function pe(e){return e&&"?"===e[0]?e.slice(1):e}var de=t(504),he={relTol:1e-12,absTol:1e-15,matrix:"Matrix",number:"number",numberFallback:"number",precision:64,predictable:!1,randomSeed:null},De=["Matrix","Array"],me=["number","BigNumber","Fraction"];function ve(e,r){function t(n){if(n){if(void 0!==n.epsilon){console.warn('Warning: The configuration option "epsilon" is deprecated. Use "relTol" and "absTol" instead.');var i=te(n);return i.relTol=n.epsilon,i.absTol=.001*n.epsilon,delete i.epsilon,t(i)}var u=te(e);ye(n,"matrix",De),ye(n,"number",me),ie(e,n);var o=te(e),a=te(n);return r("config",o,u,a),o}return te(e)}return t.MATRIX_OPTIONS=De,t.NUMBER_OPTIONS=me,Object.keys(he).forEach((r=>{Object.defineProperty(t,r,{get:()=>e[r],enumerable:!0,configurable:!0})})),t}function ye(e,r,t){void 0===e[r]||t.includes(e[r])||console.warn('Warning: Unknown value "'+e[r]+'" for configuration option "'+r+'". Available options: '+t.map((e=>JSON.stringify(e))).join(", ")+".")}var ge={createMatrixClass:fe("Matrix",[],(()=>{function e(){if(!(this instanceof e))throw new SyntaxError("Constructor must be called with the new operator")}return e.prototype.type="Matrix",e.prototype.isMatrix=!0,e.prototype.storage=function(){throw new Error("Cannot invoke storage on a Matrix interface")},e.prototype.datatype=function(){throw new Error("Cannot invoke datatype on a Matrix interface")},e.prototype.create=function(e,r){throw new Error("Cannot invoke create on a Matrix interface")},e.prototype.subset=function(e,r,t){throw new Error("Cannot invoke subset on a Matrix interface")},e.prototype.get=function(e){throw new Error("Cannot invoke get on a Matrix interface")},e.prototype.set=function(e,r,t){throw new Error("Cannot invoke set on a Matrix interface")},e.prototype.resize=function(e,r){throw new Error("Cannot invoke resize on a Matrix interface")},e.prototype.reshape=function(e,r){throw new Error("Cannot invoke reshape on a Matrix interface")},e.prototype.clone=function(){throw new Error("Cannot invoke clone on a Matrix interface")},e.prototype.size=function(){throw new Error("Cannot invoke size on a Matrix interface")},e.prototype.map=function(e,r){throw new Error("Cannot invoke map on a Matrix interface")},e.prototype.forEach=function(e){throw new Error("Cannot invoke forEach on a Matrix interface")},e.prototype[Symbol.iterator]=function(){throw new Error("Cannot iterate a Matrix interface")},e.prototype.toArray=function(){throw new Error("Cannot invoke toArray on a Matrix interface")},e.prototype.valueOf=function(){throw new Error("Cannot invoke valueOf on a Matrix interface")},e.prototype.format=function(e){throw new Error("Cannot invoke format on a Matrix interface")},e.prototype.toString=function(){throw new Error("Cannot invoke toString on a Matrix interface")},e}),{isClass:!0})};function we(e){return"boolean"==typeof e||!!isFinite(e)&&e===Math.round(e)}var Ae=Math.sign||function(e){return e>0?1:e<0?-1:0};function Ee(e,r,t){var n={2:"0b",8:"0o",16:"0x"}[r],i="";if(t){if(t<1)throw new Error("size must be in greater than 0");if(!we(t))throw new Error("size must be an integer");if(e>2**(t-1)-1||e<-(2**(t-1)))throw new Error("Value must be in range [-2^".concat(t-1,", 2^").concat(t-1,"-1]"));if(!we(e))throw new Error("Value must be an integer");e<0&&(e+=2**t),i="i".concat(t)}var u="";return e<0&&(e=-e,u="-"),"".concat(u).concat(n).concat(e.toString(r)).concat(i)}function xe(e,r){if("function"==typeof r)return r(e);if(e===1/0)return"Infinity";if(e===-1/0)return"-Infinity";if(isNaN(e))return"NaN";var{notation:t,precision:n,wordSize:i}=Fe(r);switch(t){case"fixed":return function(e,r){if(isNaN(e)||!isFinite(e))return String(e);var t=be(e),n="number"==typeof r?_e(t,t.exponent+1+r):t,i=n.coefficients,u=n.exponent+1,o=u+(r||0);return i.length<o&&(i=i.concat(Me(o-i.length))),u<0&&(i=Me(1-u).concat(i),u=1),u<i.length&&i.splice(u,0,0===u?"0.":"."),n.sign+i.join("")}(e,n);case"exponential":return Ce(e,n);case"engineering":return function(e,r){if(isNaN(e)||!isFinite(e))return String(e);var t=_e(be(e),r),n=t.exponent,i=t.coefficients,u=n%3==0?n:n<0?n-3-n%3:n-n%3;if(p(r))for(;r>i.length||n-u+1>i.length;)i.push(0);else for(var o=Math.abs(n-u)-(i.length-1),a=0;a<o;a++)i.push(0);for(var s=Math.abs(n-u),c=1;s>0;)c++,s--;var f=i.slice(c).join(""),l=p(r)&&f.length||f.match(/[1-9]/)?"."+f:"",d=i.slice(0,c).join("")+l+"e"+(n>=0?"+":"")+u.toString();return t.sign+d}(e,n);case"bin":return Ee(e,2,i);case"oct":return Ee(e,8,i);case"hex":return Ee(e,16,i);case"auto":return function(e,r,t){if(isNaN(e)||!isFinite(e))return String(e);var n=Se(null==t?void 0:t.lowerExp,-3),i=Se(null==t?void 0:t.upperExp,5),u=be(e),o=r?_e(u,r):u;if(o.exponent<n||o.exponent>=i)return Ce(e,r);var a=o.coefficients,s=o.exponent;a.length<r&&(a=a.concat(Me(r-a.length))),a=a.concat(Me(s-a.length+1+(a.length<r?r-a.length:0)));var c=s>0?s:0;return c<(a=Me(-s).concat(a)).length-1&&a.splice(c+1,0,"."),o.sign+a.join("")}(e,n,r).replace(/((\.\d*?)(0+))($|e)/,(function(){var e=arguments[2],r=arguments[4];return"."!==e?e+r:r}));default:throw new Error('Unknown notation "'+t+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.')}}function Fe(e){var r,t,n="auto";if(void 0!==e)if(p(e))r=e;else if(d(e))r=e.toNumber();else{if(!T(e))throw new Error("Unsupported type of options, number, BigNumber, or object expected");void 0!==e.precision&&(r=Ne(e.precision,(()=>{throw new Error('Option "precision" must be a number or BigNumber')}))),void 0!==e.wordSize&&(t=Ne(e.wordSize,(()=>{throw new Error('Option "wordSize" must be a number or BigNumber')}))),e.notation&&(n=e.notation)}return{notation:n,precision:r,wordSize:t}}function be(e){var r=String(e).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);if(!r)throw new SyntaxError("Invalid number "+e);var t=r[1],n=r[2],i=parseFloat(r[4]||"0"),u=n.indexOf(".");i+=-1!==u?u-1:n.length-1;var o=n.replace(".","").replace(/^0*/,(function(e){return i-=e.length,""})).replace(/0*$/,"").split("").map((function(e){return parseInt(e)}));return 0===o.length&&(o.push(0),i++),{sign:t,coefficients:o,exponent:i}}function Ce(e,r){if(isNaN(e)||!isFinite(e))return String(e);var t=be(e),n=r?_e(t,r):t,i=n.coefficients,u=n.exponent;i.length<r&&(i=i.concat(Me(r-i.length)));var o=i.shift();return n.sign+o+(i.length>0?"."+i.join(""):"")+"e"+(u>=0?"+":"")+u}function _e(e,r){for(var t={sign:e.sign,coefficients:e.coefficients,exponent:e.exponent},n=t.coefficients;r<=0;)n.unshift(0),t.exponent++,r++;if(n.length>r&&n.splice(r,n.length-r)[0]>=5){var i=r-1;for(n[i]++;10===n[i];)n.pop(),0===i&&(n.unshift(0),t.exponent++,i++),n[--i]++}return t}function Me(e){for(var r=[],t=0;t<e;t++)r.push(0);return r}function Be(e,r){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e-8,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if(t<=0)throw new Error("Relative tolerance must be greater than 0");if(n<0)throw new Error("Absolute tolerance must be at least 0");return!isNaN(e)&&!isNaN(r)&&(isFinite(e)&&isFinite(r)?e===r||Math.abs(e-r)<=Math.max(t*Math.max(Math.abs(e),Math.abs(r)),n):e===r)}function Ne(e,r){return p(e)?e:d(e)?e.toNumber():void r()}function Se(e,r){return p(e)?e:d(e)?e.toNumber():r}function Te(e,r,t){var n=new(0,e.constructor)(2),i="";if(t){if(t<1)throw new Error("size must be in greater than 0");if(!we(t))throw new Error("size must be an integer");if(e.greaterThan(n.pow(t-1).sub(1))||e.lessThan(n.pow(t-1).mul(-1)))throw new Error("Value must be in range [-2^".concat(t-1,", 2^").concat(t-1,"-1]"));if(!e.isInteger())throw new Error("Value must be an integer");e.lessThan(0)&&(e=e.add(n.pow(t))),i="i".concat(t)}switch(r){case 2:return"".concat(e.toBinary()).concat(i);case 8:return"".concat(e.toOctal()).concat(i);case 16:return"".concat(e.toHexadecimal()).concat(i);default:throw new Error("Base ".concat(r," not supported "))}}function ze(e,r){return void 0!==r?e.toExponential(r-1):e.toExponential()}function Oe(e,r){return p(e)?e:d(e)?e.toNumber():r}function Ie(e,r){var t=function(e,r){return"number"==typeof e?xe(e,r):d(e)?function(e,r){if("function"==typeof r)return r(e);if(!e.isFinite())return e.isNaN()?"NaN":e.gt(0)?"Infinity":"-Infinity";var{notation:t,precision:n,wordSize:i}=Fe(r);switch(t){case"fixed":return function(e,r){return e.toFixed(r)}(e,n);case"exponential":return ze(e,n);case"engineering":return function(e,r){var t=e.e,n=t%3==0?t:t<0?t-3-t%3:t-t%3,i=e.mul(Math.pow(10,-n)).toPrecision(r);return i.includes("e")&&(i=new(0,e.constructor)(i).toFixed()),i+"e"+(t>=0?"+":"")+n.toString()}(e,n);case"bin":return Te(e,2,i);case"oct":return Te(e,8,i);case"hex":return Te(e,16,i);case"auto":var u=Oe(null==r?void 0:r.lowerExp,-3),o=Oe(null==r?void 0:r.upperExp,5);if(e.isZero())return"0";var a=e.toSignificantDigits(n),s=a.e;return(s>=u&&s<o?a.toFixed():ze(e,n)).replace(/((\.\d*?)(0+))($|e)/,(function(){var e=arguments[2],r=arguments[4];return"."!==e?e+r:r}));default:throw new Error('Unknown notation "'+t+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.')}}(e,r):function(e){return e&&"object"==typeof e&&"number"==typeof e.s&&"number"==typeof e.n&&"number"==typeof e.d||!1}(e)?r&&"decimal"===r.fraction?e.toString():e.s*e.n+"/"+e.d:Array.isArray(e)?Re(e,r):y(e)?ke(e):"function"==typeof e?e.syntax?String(e.syntax):"function":e&&"object"==typeof e?"function"==typeof e.format?e.format(r):e&&e.toString(r)!=={}.toString()?e.toString(r):"{"+Object.keys(e).map((t=>ke(t)+": "+Ie(e[t],r))).join(", ")+"}":String(e)}(e,r);return r&&"object"==typeof r&&"truncate"in r&&t.length>r.truncate?t.substring(0,r.truncate-3)+"...":t}function ke(e){for(var r=String(e),t="",n=0;n<r.length;){var i=r.charAt(n);t+=i in Pe?Pe[i]:i,n++}return'"'+t+'"'}Math.log2,Math.log10,Math.log1p,Math.cbrt,Math.expm1,Number.EPSILON,Math.acosh,Math.asinh,Math.atanh,Math.cosh,Math.sinh,Math.tanh;var Pe={'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"};function Re(e,r){if(Array.isArray(e)){for(var t="[",n=e.length,i=0;i<n;i++)0!==i&&(t+=", "),t+=Re(e[i],r);return t+"]"}return Ie(e,r)}function je(e){for(var r=[];Array.isArray(e);)r.push(e.length),e=e[0];return r}function qe(e,r,t){var n,i=e.length;if(i!==r[t])throw new o(i,r[t]);if(t<r.length-1){var u=t+1;for(n=0;n<i;n++){var a=e[n];if(!Array.isArray(a))throw new o(r.length-1,r.length,"<");qe(e[n],r,u)}}else for(n=0;n<i;n++)if(Array.isArray(e[n]))throw new o(r.length+1,r.length,">")}function Ue(e,r){if(0===r.length){if(Array.isArray(e))throw new o(e.length,0)}else qe(e,r,0)}function Le(e,r){if(void 0!==e){if(!p(e)||!we(e))throw new TypeError("Index must be an integer (value: "+e+")");if(e<0||"number"==typeof r&&e>=r)throw new a(e,r)}}function Ze(e,r,t){if(!Array.isArray(r))throw new TypeError("Array expected");if(0===r.length)throw new Error("Resizing to scalar is not supported");return r.forEach((function(e){if(!p(e)||!we(e)||e<0)throw new TypeError("Invalid size, must contain positive integers (size: "+Ie(r)+")")})),(p(e)||d(e))&&(e=[e]),Ye(e,r,0,void 0!==t?t:0),e}function Ye(e,r,t,n){var i,u,o=e.length,a=r[t],s=Math.min(o,a);if(e.length=a,t<r.length-1){var c=t+1;for(i=0;i<s;i++)u=e[i],Array.isArray(u)||(u=[u],e[i]=u),Ye(u,r,c,n);for(i=s;i<a;i++)u=[],e[i]=u,Ye(u,r,c,n)}else{for(i=0;i<s;i++)for(;Array.isArray(e[i]);)e[i]=e[i][0];for(i=s;i<a;i++)e[i]=n}}function We(e,r){var t=$e(e),n=t.length;if(!Array.isArray(e)||!Array.isArray(r))throw new TypeError("Array expected");if(0===r.length)throw new o(0,n,"!=");var i=Ve(r=Xe(r,n));if(n!==i)throw new o(i,n,"!=");try{return function(e,r){for(var t,n=e,i=r.length-1;i>0;i--){var u=r[i];t=[];for(var o=n.length/u,a=0;a<o;a++)t.push(n.slice(a*u,(a+1)*u));n=t}return n}(t,r)}catch(e){if(e instanceof o)throw new o(i,n,"!=");throw e}}function Xe(e,r){var t=Ve(e),n=e.slice(),i=e.indexOf(-1);if(e.indexOf(-1,i+1)>=0)throw new Error("More than one wildcard in sizes");if(i>=0){if(r%t!=0)throw new Error("Could not replace wildcard, since "+r+" is no multiple of "+-t);n[i]=-r/t}return n}function Ve(e){return e.reduce(((e,r)=>e*r),1)}function Ge(e,r){for(var t=r||je(e);Array.isArray(e)&&1===e.length;)e=e[0],t.shift();for(var n=t.length;1===t[n-1];)n--;return n<t.length&&(e=Je(e,n,0),t.length=n),e}function Je(e,r,t){var n,i;if(t<r){var u=t+1;for(n=0,i=e.length;n<i;n++)e[n]=Je(e[n],r,u)}else for(;Array.isArray(e);)e=e[0];return e}function He(e,r,t,n){var i=n||je(e);if(t)for(var u=0;u<t;u++)e=[e],i.unshift(1);for(e=Ke(e,r,0);i.length<r;)i.push(1);return e}function Ke(e,r,t){var n,i;if(Array.isArray(e)){var u=t+1;for(n=0,i=e.length;n<i;n++)e[n]=Ke(e[n],r,u)}else for(var o=t;o<r;o++)e=[e];return e}function $e(e){if(!Array.isArray(e))return e;var r=[];return e.forEach((function e(t){Array.isArray(t)?t.forEach(e):r.push(t)})),r}function Qe(e,r){for(var t,n=0,i=0;i<e.length;i++){var u=e[i],o=Array.isArray(u);if(0===i&&o&&(n=u.length),o&&u.length!==n)return;var a=o?Qe(u,r):r(u);if(void 0===t)t=a;else if(t!==a)return"mixed"}return t}function er(e,r,t,n){if(n<t){if(e.length!==r.length)throw new o(e.length,r.length);for(var i=[],u=0;u<e.length;u++)i[u]=er(e[u],r[u],t,n+1);return i}return e.concat(r)}function rr(){var e=Array.prototype.slice.call(arguments,0,-1),r=Array.prototype.slice.call(arguments,-1);if(1===e.length)return e[0];if(e.length>1)return e.slice(1).reduce((function(e,t){return er(e,t,r,0)}),e[0]);throw new Error("Wrong number of arguments in function concat")}function tr(){for(var e=arguments.length,r=new Array(e),t=0;t<e;t++)r[t]=arguments[t];for(var n=r.map((e=>e.length)),i=Math.max(...n),u=new Array(i).fill(null),o=0;o<r.length;o++)for(var a=r[o],s=n[o],c=0;c<s;c++){var f=i-s+c;a[c]>u[f]&&(u[f]=a[c])}for(var l=0;l<r.length;l++)nr(r[l],u);return u}function nr(e,r){for(var t=r.length,n=e.length,i=0;i<n;i++){var u=t-n+i;if(e[i]<r[u]&&e[i]>1||e[i]>r[u])throw new Error("shape missmatch: missmatch is found in arg with shape (".concat(e,") not possible to broadcast dimension ").concat(n," with size ").concat(e[i]," to size ").concat(r[u]))}}function ir(e,r){var t=je(e);if(ue(t,r))return e;nr(t,r);var i,u,o,a=tr(t,r),s=a.length,c=[...Array(s-t.length).fill(1),...t],f=function(e){return n([],e)}(e);t.length<s&&(t=je(f=We(f,c)));for(var l=0;l<s;l++)t[l]<a[l]&&(i=f,u=a[l],o=l,t=je(f=rr(...Array(u).fill(i),o)));return f}function ur(e,r){if(!Array.isArray(e))throw new Error("Array expected");var t=je(e);if(r.length!==t.length)throw new o(r.length,t.length);for(var n=0;n<r.length;n++)Le(r[n],t[n]);return r.reduce(((e,r)=>e[r]),e)}function or(e,r,t){if(i.isTypedFunction(e)){var n=(r.isMatrix?r.size():je(r)).map((()=>0)),u=r.isMatrix?r.get(n):ur(r,n),o=1===Object.keys(e.signatures).length,a=function(e,r,t,n){for(var u=[r,t,n],o=3;o>0;o--){var a=u.slice(0,o);if(null!==i.resolve(e,a))return o}}(e,u,n,r),s=o?Object.values(e.signatures)[0]:e;return a>=1&&a<=3?function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return ar(s,n.slice(0,a),t,e.name)}:function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return ar(s,n,t,e.name)}}return e}function ar(e,r,t,n){try{return e(...r)}catch(e){!function(e,r,t,n){var i;if(e instanceof TypeError&&"wrongType"===(null===(i=e.data)||void 0===i?void 0:i.category)){var u=[];throw u.push("value: ".concat(re(r[0]))),r.length>=2&&u.push("index: ".concat(re(r[1]))),r.length>=3&&u.push("array: ".concat(re(r[2]))),new TypeError("Function ".concat(t," cannot apply callback arguments ")+"".concat(n,"(").concat(u.join(", "),") at index ").concat(JSON.stringify(r[1])))}throw new TypeError("Function ".concat(t," cannot apply callback arguments ")+"to function ".concat(n,": ").concat(e.message))}(e,r,t,n)}}var sr,cr,fr=fe("DenseMatrix",["Matrix"],(e=>{var{Matrix:r}=e;function t(e,r){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!y(r))throw new Error("Invalid datatype: "+r);if(w(e))"DenseMatrix"===e.type?(this._data=te(e._data),this._size=te(e._size),this._datatype=r||e._datatype):(this._data=e.toArray(),this._size=e.size(),this._datatype=r||e._datatype);else if(e&&g(e.data)&&g(e.size))this._data=e.data,this._size=e.size,Ue(this._data,this._size),this._datatype=r||e.datatype;else if(g(e))this._data=s(e),this._size=je(this._data),Ue(this._data,this._size),this._datatype=r;else{if(e)throw new TypeError("Unsupported type of data ("+re(e)+")");this._data=[],this._size=[0],this._datatype=r}}function n(e,r,t,i){var u=i===t-1,o=r.dimension(i);return u?o.map((function(r){return Le(r,e.length),e[r]})).valueOf():o.map((function(u){return Le(u,e.length),n(e[u],r,t,i+1)})).valueOf()}function i(e,r,t,n,u){var o=u===n-1,a=r.dimension(u);o?a.forEach((function(r,n){Le(r),e[r]=t[n[0]]})):a.forEach((function(o,a){Le(o),i(e[o],r,t[a[0]],n,u+1)}))}function u(e,r,t){if(0===r.length){for(var n=e._data;g(n);)n=n[0];return n}return e._size=r.slice(0),e._data=Ze(e._data,e._size,t),e}function a(e,r,t){for(var n=e._size.slice(0),i=!1;n.length<r.length;)n.push(0),i=!0;for(var o=0,a=r.length;o<a;o++)r[o]>n[o]&&(n[o]=r[o],i=!0);i&&u(e,n,t)}function s(e){return w(e)?s(e.valueOf()):g(e)?e.map(s):e}return t.prototype=new r,t.prototype.createDenseMatrix=function(e,r){return new t(e,r)},Object.defineProperty(t,"name",{value:"DenseMatrix"}),t.prototype.constructor=t,t.prototype.type="DenseMatrix",t.prototype.isDenseMatrix=!0,t.prototype.getDataType=function(){return Qe(this._data,re)},t.prototype.storage=function(){return"dense"},t.prototype.datatype=function(){return this._datatype},t.prototype.create=function(e,r){return new t(e,r)},t.prototype.subset=function(e,r,u){switch(arguments.length){case 1:return function(e,r){if(!b(r))throw new TypeError("Invalid index");if(r.isScalar())return e.get(r.min());var i=r.size();if(i.length!==e._size.length)throw new o(i.length,e._size.length);for(var u=r.min(),a=r.max(),s=0,c=e._size.length;s<c;s++)Le(u[s],e._size[s]),Le(a[s],e._size[s]);return new t(n(e._data,r,i.length,0),e._datatype)}(this,e);case 2:case 3:return function(e,r,t,n){if(!r||!0!==r.isIndex)throw new TypeError("Invalid index");var u,s=r.size(),c=r.isScalar();if(w(t)?(u=t.size(),t=t.valueOf()):u=je(t),c){if(0!==u.length)throw new TypeError("Scalar expected");e.set(r.min(),t,n)}else{if(!ue(u,s))try{u=je(t=0===u.length?ir([t],s):ir(t,s))}catch(e){}if(s.length<e._size.length)throw new o(s.length,e._size.length,"<");if(u.length<s.length){for(var f=0,l=0;1===s[f]&&1===u[f];)f++;for(;1===s[f];)l++,f++;t=He(t,s.length,l,u)}if(!ue(s,u))throw new o(s,u,">");var p=r.max().map((function(e){return e+1}));a(e,p,n);var d=s.length;i(e._data,r,t,d,0)}return e}(this,e,r,u);default:throw new SyntaxError("Wrong number of arguments")}},t.prototype.get=function(e){return ur(this._data,e)},t.prototype.set=function(e,r,t){if(!g(e))throw new TypeError("Array expected");if(e.length<this._size.length)throw new o(e.length,this._size.length,"<");var n,i,u,s=e.map((function(e){return e+1}));a(this,s,t);var c=this._data;for(n=0,i=e.length-1;n<i;n++)Le(u=e[n],c.length),c=c[u];return Le(u=e[e.length-1],c.length),c[u]=r,this},t.prototype.resize=function(e,r,t){if(!A(e))throw new TypeError("Array or Matrix expected");var n=e.valueOf().map((e=>Array.isArray(e)&&1===e.length?e[0]:e));return u(t?this.clone():this,n,r)},t.prototype.reshape=function(e,r){var t=r?this.clone():this;t._data=We(t._data,e);var n=t._size.reduce(((e,r)=>e*r));return t._size=Xe(e,n),t},t.prototype.clone=function(){return new t({data:te(this._data),size:te(this._size),datatype:this._datatype})},t.prototype.size=function(){return this._size.slice(0)},t.prototype._forEach=function(e){var r=this,t=r.size();if(1!==t.length){var n=Array(t.length).fill(0),i=Array(t.length-1),u=i.length-1;i[0]=r._data[0];for(var o=0;o<u;o++)i[o+1]=i[o][0];for(n[u]=-1;;){var a=void 0;for(a=u;a>=0;a--){if(n[a]++,n[a]!==t[a]){i[a]=0===a?r._data[n[a]]:i[a-1][n[a]];for(var s=a;s<u;s++)i[s+1]=i[s][0];for(var c=0;c<t[i.length];c++)n[i.length]=c,e(i[u],c,n.slice(0));break}n[a]=0}if(-1===a)break}}else for(var f=0;f<t[0];f++)e(r._data,f,[f])},t.prototype.map=function(e){var r=this,n=new t(r),i=or(e,r._data,"map");return n._forEach((function(e,t,n){e[t]=i(e[t],n,r)})),n},t.prototype.forEach=function(e){var r=this,t=or(e,r._data,"map");r._forEach((function(e,n,i){t(e[n],i,r)}))},t.prototype[Symbol.iterator]=function*(){var e=function*(r,t){if(g(r))for(var n=0;n<r.length;n++)yield*e(r[n],t.concat(n));else yield{value:r,index:t}};yield*e(this._data,[])},t.prototype.rows=function(){var e=[];if(2!==this.size().length)throw new TypeError("Rows can only be returned for a 2D matrix.");var r=this._data;for(var n of r)e.push(new t([n],this._datatype));return e},t.prototype.columns=function(){var e=this,r=[],n=this.size();if(2!==n.length)throw new TypeError("Rows can only be returned for a 2D matrix.");for(var i=this._data,u=function(n){var u=i.map((e=>[e[n]]));r.push(new t(u,e._datatype))},o=0;o<n[1];o++)u(o);return r},t.prototype.toArray=function(){return te(this._data)},t.prototype.valueOf=function(){return this._data},t.prototype.format=function(e){return Ie(this._data,e)},t.prototype.toString=function(){return Ie(this._data)},t.prototype.toJSON=function(){return{mathjs:"DenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},t.prototype.diagonal=function(e){if(e){if(d(e)&&(e=e.toNumber()),!p(e)||!we(e))throw new TypeError("The parameter k must be an integer number")}else e=0;for(var r=e>0?e:0,n=e<0?-e:0,i=this._size[0],u=this._size[1],o=Math.min(i-n,u-r),a=[],s=0;s<o;s++)a[s]=this._data[s+n][s+r];return new t({data:a,size:[o],datatype:this._datatype})},t.diagonal=function(e,r,n,i){if(!g(e))throw new TypeError("Array expected, size parameter");if(2!==e.length)throw new Error("Only two dimensions matrix are supported");if(e=e.map((function(e){if(d(e)&&(e=e.toNumber()),!p(e)||!we(e)||e<1)throw new Error("Size values must be positive integers");return e})),n){if(d(n)&&(n=n.toNumber()),!p(n)||!we(n))throw new TypeError("The parameter k must be an integer number")}else n=0;var u,o=n>0?n:0,a=n<0?-n:0,s=e[0],c=e[1],f=Math.min(s-a,c-o);if(g(r)){if(r.length!==f)throw new Error("Invalid value array length");u=function(e){return r[e]}}else if(w(r)){var l=r.size();if(1!==l.length||l[0]!==f)throw new Error("Invalid matrix length");u=function(e){return r.get([e])}}else u=function(){return r};i||(i=d(u(0))?u(0).mul(0):0);var h=[];if(e.length>0){h=Ze(h,e,i);for(var D=0;D<f;D++)h[D+a][D+o]=u(D)}return new t({data:h,size:[s,c]})},t.fromJSON=function(e){return new t(e)},t.prototype.swapRows=function(e,r){if(!(p(e)&&we(e)&&p(r)&&we(r)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return Le(e,this._size[0]),Le(r,this._size[0]),t._swapRows(e,r,this._data),this},t._swapRows=function(e,r,t){var n=t[e];t[e]=t[r],t[r]=n},t}),{isClass:!0}),lr={MatrixDependencies:ge,createDenseMatrixClass:fr},pr=9e15,dr=1e9,hr="0123456789abcdef",Dr="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",mr="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",vr={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-pr,maxE:pr,crypto:!1},yr=!0,gr="[DecimalError] ",wr=gr+"Invalid argument: ",Ar=gr+"Precision limit exceeded",Er=gr+"crypto unavailable",xr="[object Decimal]",Fr=Math.floor,br=Math.pow,Cr=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,_r=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,Mr=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,Br=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,Nr=1e7,Sr=Dr.length-1,Tr=mr.length-1,zr={toStringTag:xr};function Or(e){var r,t,n,i=e.length-1,u="",o=e[0];if(i>0){for(u+=o,r=1;r<i;r++)(t=7-(n=e[r]+"").length)&&(u+=Wr(t)),u+=n;(t=7-(n=(o=e[r])+"").length)&&(u+=Wr(t))}else if(0===o)return"0";for(;o%10==0;)o/=10;return u+o}function Ir(e,r,t){if(e!==~~e||e<r||e>t)throw Error(wr+e)}function kr(e,r,t,n){var i,u,o,a;for(u=e[0];u>=10;u/=10)--r;return--r<0?(r+=7,i=0):(i=Math.ceil((r+1)/7),r%=7),u=br(10,7-r),a=e[i]%u|0,null==n?r<3?(0==r?a=a/100|0:1==r&&(a=a/10|0),o=t<4&&99999==a||t>3&&49999==a||5e4==a||0==a):o=(t<4&&a+1==u||t>3&&a+1==u/2)&&(e[i+1]/u/100|0)==br(10,r-2)-1||(a==u/2||0==a)&&!(e[i+1]/u/100|0):r<4?(0==r?a=a/1e3|0:1==r?a=a/100|0:2==r&&(a=a/10|0),o=(n||t<4)&&9999==a||!n&&t>3&&4999==a):o=((n||t<4)&&a+1==u||!n&&t>3&&a+1==u/2)&&(e[i+1]/u/1e3|0)==br(10,r-3)-1,o}function Pr(e,r,t){for(var n,i,u=[0],o=0,a=e.length;o<a;){for(i=u.length;i--;)u[i]*=r;for(u[0]+=hr.indexOf(e.charAt(o++)),n=0;n<u.length;n++)u[n]>t-1&&(void 0===u[n+1]&&(u[n+1]=0),u[n+1]+=u[n]/t|0,u[n]%=t)}return u.reverse()}zr.absoluteValue=zr.abs=function(){var e=new this.constructor(this);return e.s<0&&(e.s=1),jr(e)},zr.ceil=function(){return jr(new this.constructor(this),this.e+1,2)},zr.clampedTo=zr.clamp=function(e,r){var t=this,n=t.constructor;if(e=new n(e),r=new n(r),!e.s||!r.s)return new n(NaN);if(e.gt(r))throw Error(wr+r);return t.cmp(e)<0?e:t.cmp(r)>0?r:new n(t)},zr.comparedTo=zr.cmp=function(e){var r,t,n,i,u=this,o=u.d,a=(e=new u.constructor(e)).d,s=u.s,c=e.s;if(!o||!a)return s&&c?s!==c?s:o===a?0:!o^s<0?1:-1:NaN;if(!o[0]||!a[0])return o[0]?s:a[0]?-c:0;if(s!==c)return s;if(u.e!==e.e)return u.e>e.e^s<0?1:-1;for(r=0,t=(n=o.length)<(i=a.length)?n:i;r<t;++r)if(o[r]!==a[r])return o[r]>a[r]^s<0?1:-1;return n===i?0:n>i^s<0?1:-1},zr.cosine=zr.cos=function(){var e,r,t=this,n=t.constructor;return t.d?t.d[0]?(e=n.precision,r=n.rounding,n.precision=e+Math.max(t.e,t.sd())+7,n.rounding=1,t=function(e,r){var t,n,i;if(r.isZero())return r;(n=r.d.length)<32?i=(1/rt(4,t=Math.ceil(n/3))).toString():(t=16,i="2.3283064365386962890625e-10"),e.precision+=t,r=et(e,1,r.times(i),new e(1));for(var u=t;u--;){var o=r.times(r);r=o.times(o).minus(o).times(8).plus(1)}return e.precision-=t,r}(n,tt(n,t)),n.precision=e,n.rounding=r,jr(2==cr||3==cr?t.neg():t,e,r,!0)):new n(1):new n(NaN)},zr.cubeRoot=zr.cbrt=function(){var e,r,t,n,i,u,o,a,s,c,f=this,l=f.constructor;if(!f.isFinite()||f.isZero())return new l(f);for(yr=!1,(u=f.s*br(f.s*f,1/3))&&Math.abs(u)!=1/0?n=new l(u.toString()):(t=Or(f.d),(u=((e=f.e)-t.length+1)%3)&&(t+=1==u||-2==u?"0":"00"),u=br(t,1/3),e=Fr((e+1)/3)-(e%3==(e<0?-1:2)),(n=new l(t=u==1/0?"5e"+e:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+e)).s=f.s),o=(e=l.precision)+3;;)if(c=(s=(a=n).times(a).times(a)).plus(f),n=Rr(c.plus(f).times(a),c.plus(s),o+2,1),Or(a.d).slice(0,o)===(t=Or(n.d)).slice(0,o)){if("9999"!=(t=t.slice(o-3,o+1))&&(i||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(jr(n,e+1,1),r=!n.times(n).times(n).eq(f));break}if(!i&&(jr(a,e+1,0),a.times(a).times(a).eq(f))){n=a;break}o+=4,i=1}return yr=!0,jr(n,e,l.rounding,r)},zr.decimalPlaces=zr.dp=function(){var e,r=this.d,t=NaN;if(r){if(t=7*((e=r.length-1)-Fr(this.e/7)),e=r[e])for(;e%10==0;e/=10)t--;t<0&&(t=0)}return t},zr.dividedBy=zr.div=function(e){return Rr(this,new this.constructor(e))},zr.dividedToIntegerBy=zr.divToInt=function(e){var r=this.constructor;return jr(Rr(this,new r(e),0,1,1),r.precision,r.rounding)},zr.equals=zr.eq=function(e){return 0===this.cmp(e)},zr.floor=function(){return jr(new this.constructor(this),this.e+1,3)},zr.greaterThan=zr.gt=function(e){return this.cmp(e)>0},zr.greaterThanOrEqualTo=zr.gte=function(e){var r=this.cmp(e);return 1==r||0===r},zr.hyperbolicCosine=zr.cosh=function(){var e,r,t,n,i,u=this,o=u.constructor,a=new o(1);if(!u.isFinite())return new o(u.s?1/0:NaN);if(u.isZero())return a;t=o.precision,n=o.rounding,o.precision=t+Math.max(u.e,u.sd())+4,o.rounding=1,(i=u.d.length)<32?r=(1/rt(4,e=Math.ceil(i/3))).toString():(e=16,r="2.3283064365386962890625e-10"),u=et(o,1,u.times(r),new o(1),!0);for(var s,c=e,f=new o(8);c--;)s=u.times(u),u=a.minus(s.times(f.minus(s.times(f))));return jr(u,o.precision=t,o.rounding=n,!0)},zr.hyperbolicSine=zr.sinh=function(){var e,r,t,n,i=this,u=i.constructor;if(!i.isFinite()||i.isZero())return new u(i);if(r=u.precision,t=u.rounding,u.precision=r+Math.max(i.e,i.sd())+4,u.rounding=1,(n=i.d.length)<3)i=et(u,2,i,i,!0);else{e=(e=1.4*Math.sqrt(n))>16?16:0|e,i=et(u,2,i=i.times(1/rt(5,e)),i,!0);for(var o,a=new u(5),s=new u(16),c=new u(20);e--;)o=i.times(i),i=i.times(a.plus(o.times(s.times(o).plus(c))))}return u.precision=r,u.rounding=t,jr(i,r,t,!0)},zr.hyperbolicTangent=zr.tanh=function(){var e,r,t=this,n=t.constructor;return t.isFinite()?t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+7,n.rounding=1,Rr(t.sinh(),t.cosh(),n.precision=e,n.rounding=r)):new n(t.s)},zr.inverseCosine=zr.acos=function(){var e,r=this,t=r.constructor,n=r.abs().cmp(1),i=t.precision,u=t.rounding;return-1!==n?0===n?r.isNeg()?Zr(t,i,u):new t(0):new t(NaN):r.isZero()?Zr(t,i+4,u).times(.5):(t.precision=i+6,t.rounding=1,r=r.asin(),e=Zr(t,i+4,u).times(.5),t.precision=i,t.rounding=u,e.minus(r))},zr.inverseHyperbolicCosine=zr.acosh=function(){var e,r,t=this,n=t.constructor;return t.lte(1)?new n(t.eq(1)?0:NaN):t.isFinite()?(e=n.precision,r=n.rounding,n.precision=e+Math.max(Math.abs(t.e),t.sd())+4,n.rounding=1,yr=!1,t=t.times(t).minus(1).sqrt().plus(t),yr=!0,n.precision=e,n.rounding=r,t.ln()):new n(t)},zr.inverseHyperbolicSine=zr.asinh=function(){var e,r,t=this,n=t.constructor;return!t.isFinite()||t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+2*Math.max(Math.abs(t.e),t.sd())+6,n.rounding=1,yr=!1,t=t.times(t).plus(1).sqrt().plus(t),yr=!0,n.precision=e,n.rounding=r,t.ln())},zr.inverseHyperbolicTangent=zr.atanh=function(){var e,r,t,n,i=this,u=i.constructor;return i.isFinite()?i.e>=0?new u(i.abs().eq(1)?i.s/0:i.isZero()?i:NaN):(e=u.precision,r=u.rounding,n=i.sd(),Math.max(n,e)<2*-i.e-1?jr(new u(i),e,r,!0):(u.precision=t=n-i.e,i=Rr(i.plus(1),new u(1).minus(i),t+e,1),u.precision=e+4,u.rounding=1,i=i.ln(),u.precision=e,u.rounding=r,i.times(.5))):new u(NaN)},zr.inverseSine=zr.asin=function(){var e,r,t,n,i=this,u=i.constructor;return i.isZero()?new u(i):(r=i.abs().cmp(1),t=u.precision,n=u.rounding,-1!==r?0===r?((e=Zr(u,t+4,n).times(.5)).s=i.s,e):new u(NaN):(u.precision=t+6,u.rounding=1,i=i.div(new u(1).minus(i.times(i)).sqrt().plus(1)).atan(),u.precision=t,u.rounding=n,i.times(2)))},zr.inverseTangent=zr.atan=function(){var e,r,t,n,i,u,o,a,s,c=this,f=c.constructor,l=f.precision,p=f.rounding;if(c.isFinite()){if(c.isZero())return new f(c);if(c.abs().eq(1)&&l+4<=Tr)return(o=Zr(f,l+4,p).times(.25)).s=c.s,o}else{if(!c.s)return new f(NaN);if(l+4<=Tr)return(o=Zr(f,l+4,p).times(.5)).s=c.s,o}for(f.precision=a=l+10,f.rounding=1,e=t=Math.min(28,a/7+2|0);e;--e)c=c.div(c.times(c).plus(1).sqrt().plus(1));for(yr=!1,r=Math.ceil(a/7),n=1,s=c.times(c),o=new f(c),i=c;-1!==e;)if(i=i.times(s),u=o.minus(i.div(n+=2)),i=i.times(s),void 0!==(o=u.plus(i.div(n+=2))).d[r])for(e=r;o.d[e]===u.d[e]&&e--;);return t&&(o=o.times(2<<t-1)),yr=!0,jr(o,f.precision=l,f.rounding=p,!0)},zr.isFinite=function(){return!!this.d},zr.isInteger=zr.isInt=function(){return!!this.d&&Fr(this.e/7)>this.d.length-2},zr.isNaN=function(){return!this.s},zr.isNegative=zr.isNeg=function(){return this.s<0},zr.isPositive=zr.isPos=function(){return this.s>0},zr.isZero=function(){return!!this.d&&0===this.d[0]},zr.lessThan=zr.lt=function(e){return this.cmp(e)<0},zr.lessThanOrEqualTo=zr.lte=function(e){return this.cmp(e)<1},zr.logarithm=zr.log=function(e){var r,t,n,i,u,o,a,s,c=this,f=c.constructor,l=f.precision,p=f.rounding;if(null==e)e=new f(10),r=!0;else{if(t=(e=new f(e)).d,e.s<0||!t||!t[0]||e.eq(1))return new f(NaN);r=e.eq(10)}if(t=c.d,c.s<0||!t||!t[0]||c.eq(1))return new f(t&&!t[0]?-1/0:1!=c.s?NaN:t?0:1/0);if(r)if(t.length>1)u=!0;else{for(i=t[0];i%10==0;)i/=10;u=1!==i}if(yr=!1,o=Hr(c,a=l+5),n=r?Lr(f,a+10):Hr(e,a),kr((s=Rr(o,n,a,1)).d,i=l,p))do{if(o=Hr(c,a+=10),n=r?Lr(f,a+10):Hr(e,a),s=Rr(o,n,a,1),!u){+Or(s.d).slice(i+1,i+15)+1==1e14&&(s=jr(s,l+1,0));break}}while(kr(s.d,i+=10,p));return yr=!0,jr(s,l,p)},zr.minus=zr.sub=function(e){var r,t,n,i,u,o,a,s,c,f,l,p,d=this,h=d.constructor;if(e=new h(e),!d.d||!e.d)return d.s&&e.s?d.d?e.s=-e.s:e=new h(e.d||d.s!==e.s?d:NaN):e=new h(NaN),e;if(d.s!=e.s)return e.s=-e.s,d.plus(e);if(c=d.d,p=e.d,a=h.precision,s=h.rounding,!c[0]||!p[0]){if(p[0])e.s=-e.s;else{if(!c[0])return new h(3===s?-0:0);e=new h(d)}return yr?jr(e,a,s):e}if(t=Fr(e.e/7),f=Fr(d.e/7),c=c.slice(),u=f-t){for((l=u<0)?(r=c,u=-u,o=p.length):(r=p,t=f,o=c.length),u>(n=Math.max(Math.ceil(a/7),o)+2)&&(u=n,r.length=1),r.reverse(),n=u;n--;)r.push(0);r.reverse()}else{for((l=(n=c.length)<(o=p.length))&&(o=n),n=0;n<o;n++)if(c[n]!=p[n]){l=c[n]<p[n];break}u=0}for(l&&(r=c,c=p,p=r,e.s=-e.s),o=c.length,n=p.length-o;n>0;--n)c[o++]=0;for(n=p.length;n>u;){if(c[--n]<p[n]){for(i=n;i&&0===c[--i];)c[i]=Nr-1;--c[i],c[n]+=Nr}c[n]-=p[n]}for(;0===c[--o];)c.pop();for(;0===c[0];c.shift())--t;return c[0]?(e.d=c,e.e=Ur(c,t),yr?jr(e,a,s):e):new h(3===s?-0:0)},zr.modulo=zr.mod=function(e){var r,t=this,n=t.constructor;return e=new n(e),!t.d||!e.s||e.d&&!e.d[0]?new n(NaN):!e.d||t.d&&!t.d[0]?jr(new n(t),n.precision,n.rounding):(yr=!1,9==n.modulo?(r=Rr(t,e.abs(),0,3,1)).s*=e.s:r=Rr(t,e,0,n.modulo,1),r=r.times(e),yr=!0,t.minus(r))},zr.naturalExponential=zr.exp=function(){return Jr(this)},zr.naturalLogarithm=zr.ln=function(){return Hr(this)},zr.negated=zr.neg=function(){var e=new this.constructor(this);return e.s=-e.s,jr(e)},zr.plus=zr.add=function(e){var r,t,n,i,u,o,a,s,c,f,l=this,p=l.constructor;if(e=new p(e),!l.d||!e.d)return l.s&&e.s?l.d||(e=new p(e.d||l.s===e.s?l:NaN)):e=new p(NaN),e;if(l.s!=e.s)return e.s=-e.s,l.minus(e);if(c=l.d,f=e.d,a=p.precision,s=p.rounding,!c[0]||!f[0])return f[0]||(e=new p(l)),yr?jr(e,a,s):e;if(u=Fr(l.e/7),n=Fr(e.e/7),c=c.slice(),i=u-n){for(i<0?(t=c,i=-i,o=f.length):(t=f,n=u,o=c.length),i>(o=(u=Math.ceil(a/7))>o?u+1:o+1)&&(i=o,t.length=1),t.reverse();i--;)t.push(0);t.reverse()}for((o=c.length)-(i=f.length)<0&&(i=o,t=f,f=c,c=t),r=0;i;)r=(c[--i]=c[i]+f[i]+r)/Nr|0,c[i]%=Nr;for(r&&(c.unshift(r),++n),o=c.length;0==c[--o];)c.pop();return e.d=c,e.e=Ur(c,n),yr?jr(e,a,s):e},zr.precision=zr.sd=function(e){var r,t=this;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(wr+e);return t.d?(r=Yr(t.d),e&&t.e+1>r&&(r=t.e+1)):r=NaN,r},zr.round=function(){var e=this,r=e.constructor;return jr(new r(e),e.e+1,r.rounding)},zr.sine=zr.sin=function(){var e,r,t=this,n=t.constructor;return t.isFinite()?t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+Math.max(t.e,t.sd())+7,n.rounding=1,t=function(e,r){var t,n=r.d.length;if(n<3)return r.isZero()?r:et(e,2,r,r);t=(t=1.4*Math.sqrt(n))>16?16:0|t,r=et(e,2,r=r.times(1/rt(5,t)),r);for(var i,u=new e(5),o=new e(16),a=new e(20);t--;)i=r.times(r),r=r.times(u.plus(i.times(o.times(i).minus(a))));return r}(n,tt(n,t)),n.precision=e,n.rounding=r,jr(cr>2?t.neg():t,e,r,!0)):new n(NaN)},zr.squareRoot=zr.sqrt=function(){var e,r,t,n,i,u,o=this,a=o.d,s=o.e,c=o.s,f=o.constructor;if(1!==c||!a||!a[0])return new f(!c||c<0&&(!a||a[0])?NaN:a?o:1/0);for(yr=!1,0==(c=Math.sqrt(+o))||c==1/0?(((r=Or(a)).length+s)%2==0&&(r+="0"),c=Math.sqrt(r),s=Fr((s+1)/2)-(s<0||s%2),n=new f(r=c==1/0?"5e"+s:(r=c.toExponential()).slice(0,r.indexOf("e")+1)+s)):n=new f(c.toString()),t=(s=f.precision)+3;;)if(n=(u=n).plus(Rr(o,u,t+2,1)).times(.5),Or(u.d).slice(0,t)===(r=Or(n.d)).slice(0,t)){if("9999"!=(r=r.slice(t-3,t+1))&&(i||"4999"!=r)){+r&&(+r.slice(1)||"5"!=r.charAt(0))||(jr(n,s+1,1),e=!n.times(n).eq(o));break}if(!i&&(jr(u,s+1,0),u.times(u).eq(o))){n=u;break}t+=4,i=1}return yr=!0,jr(n,s,f.rounding,e)},zr.tangent=zr.tan=function(){var e,r,t=this,n=t.constructor;return t.isFinite()?t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+10,n.rounding=1,(t=t.sin()).s=1,t=Rr(t,new n(1).minus(t.times(t)).sqrt(),e+10,0),n.precision=e,n.rounding=r,jr(2==cr||4==cr?t.neg():t,e,r,!0)):new n(NaN)},zr.times=zr.mul=function(e){var r,t,n,i,u,o,a,s,c,f=this,l=f.constructor,p=f.d,d=(e=new l(e)).d;if(e.s*=f.s,!(p&&p[0]&&d&&d[0]))return new l(!e.s||p&&!p[0]&&!d||d&&!d[0]&&!p?NaN:p&&d?0*e.s:e.s/0);for(t=Fr(f.e/7)+Fr(e.e/7),(s=p.length)<(c=d.length)&&(u=p,p=d,d=u,o=s,s=c,c=o),u=[],n=o=s+c;n--;)u.push(0);for(n=c;--n>=0;){for(r=0,i=s+n;i>n;)a=u[i]+d[n]*p[i-n-1]+r,u[i--]=a%Nr|0,r=a/Nr|0;u[i]=(u[i]+r)%Nr|0}for(;!u[--o];)u.pop();return r?++t:u.shift(),e.d=u,e.e=Ur(u,t),yr?jr(e,l.precision,l.rounding):e},zr.toBinary=function(e,r){return nt(this,2,e,r)},zr.toDecimalPlaces=zr.toDP=function(e,r){var t=this,n=t.constructor;return t=new n(t),void 0===e?t:(Ir(e,0,dr),void 0===r?r=n.rounding:Ir(r,0,8),jr(t,e+t.e+1,r))},zr.toExponential=function(e,r){var t,n=this,i=n.constructor;return void 0===e?t=qr(n,!0):(Ir(e,0,dr),void 0===r?r=i.rounding:Ir(r,0,8),t=qr(n=jr(new i(n),e+1,r),!0,e+1)),n.isNeg()&&!n.isZero()?"-"+t:t},zr.toFixed=function(e,r){var t,n,i=this,u=i.constructor;return void 0===e?t=qr(i):(Ir(e,0,dr),void 0===r?r=u.rounding:Ir(r,0,8),t=qr(n=jr(new u(i),e+i.e+1,r),!1,e+n.e+1)),i.isNeg()&&!i.isZero()?"-"+t:t},zr.toFraction=function(e){var r,t,n,i,u,o,a,s,c,f,l,p,d=this,h=d.d,D=d.constructor;if(!h)return new D(d);if(c=t=new D(1),n=s=new D(0),o=(u=(r=new D(n)).e=Yr(h)-d.e-1)%7,r.d[0]=br(10,o<0?7+o:o),null==e)e=u>0?r:c;else{if(!(a=new D(e)).isInt()||a.lt(c))throw Error(wr+a);e=a.gt(r)?u>0?r:c:a}for(yr=!1,a=new D(Or(h)),f=D.precision,D.precision=u=7*h.length*2;l=Rr(a,r,0,1,1),1!=(i=t.plus(l.times(n))).cmp(e);)t=n,n=i,i=c,c=s.plus(l.times(i)),s=i,i=r,r=a.minus(l.times(i)),a=i;return i=Rr(e.minus(t),n,0,1,1),s=s.plus(i.times(c)),t=t.plus(i.times(n)),s.s=c.s=d.s,p=Rr(c,n,u,1).minus(d).abs().cmp(Rr(s,t,u,1).minus(d).abs())<1?[c,n]:[s,t],D.precision=f,yr=!0,p},zr.toHexadecimal=zr.toHex=function(e,r){return nt(this,16,e,r)},zr.toNearest=function(e,r){var t=this,n=t.constructor;if(t=new n(t),null==e){if(!t.d)return t;e=new n(1),r=n.rounding}else{if(e=new n(e),void 0===r?r=n.rounding:Ir(r,0,8),!t.d)return e.s?t:e;if(!e.d)return e.s&&(e.s=t.s),e}return e.d[0]?(yr=!1,t=Rr(t,e,0,r,1).times(e),yr=!0,jr(t)):(e.s=t.s,t=e),t},zr.toNumber=function(){return+this},zr.toOctal=function(e,r){return nt(this,8,e,r)},zr.toPower=zr.pow=function(e){var r,t,n,i,u,o,a=this,s=a.constructor,c=+(e=new s(e));if(!(a.d&&e.d&&a.d[0]&&e.d[0]))return new s(br(+a,c));if((a=new s(a)).eq(1))return a;if(n=s.precision,u=s.rounding,e.eq(1))return jr(a,n,u);if((r=Fr(e.e/7))>=e.d.length-1&&(t=c<0?-c:c)<=9007199254740991)return i=Xr(s,a,t,n),e.s<0?new s(1).div(i):jr(i,n,u);if((o=a.s)<0){if(r<e.d.length-1)return new s(NaN);if(1&e.d[r]||(o=1),0==a.e&&1==a.d[0]&&1==a.d.length)return a.s=o,a}return(r=0!=(t=br(+a,c))&&isFinite(t)?new s(t+"").e:Fr(c*(Math.log("0."+Or(a.d))/Math.LN10+a.e+1)))>s.maxE+1||r<s.minE-1?new s(r>0?o/0:0):(yr=!1,s.rounding=a.s=1,t=Math.min(12,(r+"").length),(i=Jr(e.times(Hr(a,n+t)),n)).d&&kr((i=jr(i,n+5,1)).d,n,u)&&(r=n+10,+Or((i=jr(Jr(e.times(Hr(a,r+t)),r),r+5,1)).d).slice(n+1,n+15)+1==1e14&&(i=jr(i,n+1,0))),i.s=o,yr=!0,s.rounding=u,jr(i,n,u))},zr.toPrecision=function(e,r){var t,n=this,i=n.constructor;return void 0===e?t=qr(n,n.e<=i.toExpNeg||n.e>=i.toExpPos):(Ir(e,1,dr),void 0===r?r=i.rounding:Ir(r,0,8),t=qr(n=jr(new i(n),e,r),e<=n.e||n.e<=i.toExpNeg,e)),n.isNeg()&&!n.isZero()?"-"+t:t},zr.toSignificantDigits=zr.toSD=function(e,r){var t=this.constructor;return void 0===e?(e=t.precision,r=t.rounding):(Ir(e,1,dr),void 0===r?r=t.rounding:Ir(r,0,8)),jr(new t(this),e,r)},zr.toString=function(){var e=this,r=e.constructor,t=qr(e,e.e<=r.toExpNeg||e.e>=r.toExpPos);return e.isNeg()&&!e.isZero()?"-"+t:t},zr.truncated=zr.trunc=function(){return jr(new this.constructor(this),this.e+1,1)},zr.valueOf=zr.toJSON=function(){var e=this,r=e.constructor,t=qr(e,e.e<=r.toExpNeg||e.e>=r.toExpPos);return e.isNeg()?"-"+t:t};var Rr=function(){function e(e,r,t){var n,i=0,u=e.length;for(e=e.slice();u--;)n=e[u]*r+i,e[u]=n%t|0,i=n/t|0;return i&&e.unshift(i),e}function r(e,r,t,n){var i,u;if(t!=n)u=t>n?1:-1;else for(i=u=0;i<t;i++)if(e[i]!=r[i]){u=e[i]>r[i]?1:-1;break}return u}function t(e,r,t,n){for(var i=0;t--;)e[t]-=i,i=e[t]<r[t]?1:0,e[t]=i*n+e[t]-r[t];for(;!e[0]&&e.length>1;)e.shift()}return function(n,i,u,o,a,s){var c,f,l,p,d,h,D,m,v,y,g,w,A,E,x,F,b,C,_,M,B=n.constructor,N=n.s==i.s?1:-1,S=n.d,T=i.d;if(!(S&&S[0]&&T&&T[0]))return new B(n.s&&i.s&&(S?!T||S[0]!=T[0]:T)?S&&0==S[0]||!T?0*N:N/0:NaN);for(s?(d=1,f=n.e-i.e):(s=Nr,d=7,f=Fr(n.e/d)-Fr(i.e/d)),_=T.length,b=S.length,y=(v=new B(N)).d=[],l=0;T[l]==(S[l]||0);l++);if(T[l]>(S[l]||0)&&f--,null==u?(E=u=B.precision,o=B.rounding):E=a?u+(n.e-i.e)+1:u,E<0)y.push(1),h=!0;else{if(E=E/d+2|0,l=0,1==_){for(p=0,T=T[0],E++;(l<b||p)&&E--;l++)x=p*s+(S[l]||0),y[l]=x/T|0,p=x%T|0;h=p||l<b}else{for((p=s/(T[0]+1)|0)>1&&(T=e(T,p,s),S=e(S,p,s),_=T.length,b=S.length),F=_,w=(g=S.slice(0,_)).length;w<_;)g[w++]=0;(M=T.slice()).unshift(0),C=T[0],T[1]>=s/2&&++C;do{p=0,(c=r(T,g,_,w))<0?(A=g[0],_!=w&&(A=A*s+(g[1]||0)),(p=A/C|0)>1?(p>=s&&(p=s-1),1==(c=r(D=e(T,p,s),g,m=D.length,w=g.length))&&(p--,t(D,_<m?M:T,m,s))):(0==p&&(c=p=1),D=T.slice()),(m=D.length)<w&&D.unshift(0),t(g,D,w,s),-1==c&&(c=r(T,g,_,w=g.length))<1&&(p++,t(g,_<w?M:T,w,s)),w=g.length):0===c&&(p++,g=[0]),y[l++]=p,c&&g[0]?g[w++]=S[F]||0:(g=[S[F]],w=1)}while((F++<b||void 0!==g[0])&&E--);h=void 0!==g[0]}y[0]||y.shift()}if(1==d)v.e=f,sr=h;else{for(l=1,p=y[0];p>=10;p/=10)l++;v.e=l+f*d-1,jr(v,a?u+v.e+1:u,o,h)}return v}}();function jr(e,r,t,n){var i,u,o,a,s,c,f,l,p,d=e.constructor;e:if(null!=r){if(!(l=e.d))return e;for(i=1,a=l[0];a>=10;a/=10)i++;if((u=r-i)<0)u+=7,o=r,s=(f=l[p=0])/br(10,i-o-1)%10|0;else if((p=Math.ceil((u+1)/7))>=(a=l.length)){if(!n)break e;for(;a++<=p;)l.push(0);f=s=0,i=1,o=(u%=7)-7+1}else{for(f=a=l[p],i=1;a>=10;a/=10)i++;s=(o=(u%=7)-7+i)<0?0:f/br(10,i-o-1)%10|0}if(n=n||r<0||void 0!==l[p+1]||(o<0?f:f%br(10,i-o-1)),c=t<4?(s||n)&&(0==t||t==(e.s<0?3:2)):s>5||5==s&&(4==t||n||6==t&&(u>0?o>0?f/br(10,i-o):0:l[p-1])%10&1||t==(e.s<0?8:7)),r<1||!l[0])return l.length=0,c?(r-=e.e+1,l[0]=br(10,(7-r%7)%7),e.e=-r||0):l[0]=e.e=0,e;if(0==u?(l.length=p,a=1,p--):(l.length=p+1,a=br(10,7-u),l[p]=o>0?(f/br(10,i-o)%br(10,o)|0)*a:0),c)for(;;){if(0==p){for(u=1,o=l[0];o>=10;o/=10)u++;for(o=l[0]+=a,a=1;o>=10;o/=10)a++;u!=a&&(e.e++,l[0]==Nr&&(l[0]=1));break}if(l[p]+=a,l[p]!=Nr)break;l[p--]=0,a=1}for(u=l.length;0===l[--u];)l.pop()}return yr&&(e.e>d.maxE?(e.d=null,e.e=NaN):e.e<d.minE&&(e.e=0,e.d=[0])),e}function qr(e,r,t){if(!e.isFinite())return Kr(e);var n,i=e.e,u=Or(e.d),o=u.length;return r?(t&&(n=t-o)>0?u=u.charAt(0)+"."+u.slice(1)+Wr(n):o>1&&(u=u.charAt(0)+"."+u.slice(1)),u=u+(e.e<0?"e":"e+")+e.e):i<0?(u="0."+Wr(-i-1)+u,t&&(n=t-o)>0&&(u+=Wr(n))):i>=o?(u+=Wr(i+1-o),t&&(n=t-i-1)>0&&(u=u+"."+Wr(n))):((n=i+1)<o&&(u=u.slice(0,n)+"."+u.slice(n)),t&&(n=t-o)>0&&(i+1===o&&(u+="."),u+=Wr(n))),u}function Ur(e,r){var t=e[0];for(r*=7;t>=10;t/=10)r++;return r}function Lr(e,r,t){if(r>Sr)throw yr=!0,t&&(e.precision=t),Error(Ar);return jr(new e(Dr),r,1,!0)}function Zr(e,r,t){if(r>Tr)throw Error(Ar);return jr(new e(mr),r,t,!0)}function Yr(e){var r=e.length-1,t=7*r+1;if(r=e[r]){for(;r%10==0;r/=10)t--;for(r=e[0];r>=10;r/=10)t++}return t}function Wr(e){for(var r="";e--;)r+="0";return r}function Xr(e,r,t,n){var i,u=new e(1),o=Math.ceil(n/7+4);for(yr=!1;;){if(t%2&&it((u=u.times(r)).d,o)&&(i=!0),0===(t=Fr(t/2))){t=u.d.length-1,i&&0===u.d[t]&&++u.d[t];break}it((r=r.times(r)).d,o)}return yr=!0,u}function Vr(e){return 1&e.d[e.d.length-1]}function Gr(e,r,t){for(var n,i=new e(r[0]),u=0;++u<r.length;){if(!(n=new e(r[u])).s){i=n;break}i[t](n)&&(i=n)}return i}function Jr(e,r){var t,n,i,u,o,a,s,c=0,f=0,l=0,p=e.constructor,d=p.rounding,h=p.precision;if(!e.d||!e.d[0]||e.e>17)return new p(e.d?e.d[0]?e.s<0?0:1/0:1:e.s?e.s<0?0:e:NaN);for(null==r?(yr=!1,s=h):s=r,a=new p(.03125);e.e>-2;)e=e.times(a),l+=5;for(s+=n=Math.log(br(2,l))/Math.LN10*2+5|0,t=u=o=new p(1),p.precision=s;;){if(u=jr(u.times(e),s,1),t=t.times(++f),Or((a=o.plus(Rr(u,t,s,1))).d).slice(0,s)===Or(o.d).slice(0,s)){for(i=l;i--;)o=jr(o.times(o),s,1);if(null!=r)return p.precision=h,o;if(!(c<3&&kr(o.d,s-n,d,c)))return jr(o,p.precision=h,d,yr=!0);p.precision=s+=10,t=u=a=new p(1),f=0,c++}o=a}}function Hr(e,r){var t,n,i,u,o,a,s,c,f,l,p,d=1,h=e,D=h.d,m=h.constructor,v=m.rounding,y=m.precision;if(h.s<0||!D||!D[0]||!h.e&&1==D[0]&&1==D.length)return new m(D&&!D[0]?-1/0:1!=h.s?NaN:D?0:h);if(null==r?(yr=!1,f=y):f=r,m.precision=f+=10,n=(t=Or(D)).charAt(0),!(Math.abs(u=h.e)<15e14))return c=Lr(m,f+2,y).times(u+""),h=Hr(new m(n+"."+t.slice(1)),f-10).plus(c),m.precision=y,null==r?jr(h,y,v,yr=!0):h;for(;n<7&&1!=n||1==n&&t.charAt(1)>3;)n=(t=Or((h=h.times(e)).d)).charAt(0),d++;for(u=h.e,n>1?(h=new m("0."+t),u++):h=new m(n+"."+t.slice(1)),l=h,s=o=h=Rr(h.minus(1),h.plus(1),f,1),p=jr(h.times(h),f,1),i=3;;){if(o=jr(o.times(p),f,1),Or((c=s.plus(Rr(o,new m(i),f,1))).d).slice(0,f)===Or(s.d).slice(0,f)){if(s=s.times(2),0!==u&&(s=s.plus(Lr(m,f+2,y).times(u+""))),s=Rr(s,new m(d),f,1),null!=r)return m.precision=y,s;if(!kr(s.d,f-10,v,a))return jr(s,m.precision=y,v,yr=!0);m.precision=f+=10,c=o=h=Rr(l.minus(1),l.plus(1),f,1),p=jr(h.times(h),f,1),i=a=1}s=c,i+=2}}function Kr(e){return String(e.s*e.s/0)}function $r(e,r){var t,n,i;for((t=r.indexOf("."))>-1&&(r=r.replace(".","")),(n=r.search(/e/i))>0?(t<0&&(t=n),t+=+r.slice(n+1),r=r.substring(0,n)):t<0&&(t=r.length),n=0;48===r.charCodeAt(n);n++);for(i=r.length;48===r.charCodeAt(i-1);--i);if(r=r.slice(n,i)){if(i-=n,e.e=t=t-n-1,e.d=[],n=(t+1)%7,t<0&&(n+=7),n<i){for(n&&e.d.push(+r.slice(0,n)),i-=7;n<i;)e.d.push(+r.slice(n,n+=7));n=7-(r=r.slice(n)).length}else n-=i;for(;n--;)r+="0";e.d.push(+r),yr&&(e.e>e.constructor.maxE?(e.d=null,e.e=NaN):e.e<e.constructor.minE&&(e.e=0,e.d=[0]))}else e.e=0,e.d=[0];return e}function Qr(e,r){var t,n,i,u,o,a,s,c,f;if(r.indexOf("_")>-1){if(r=r.replace(/(\d)_(?=\d)/g,"$1"),Br.test(r))return $r(e,r)}else if("Infinity"===r||"NaN"===r)return+r||(e.s=NaN),e.e=NaN,e.d=null,e;if(_r.test(r))t=16,r=r.toLowerCase();else if(Cr.test(r))t=2;else{if(!Mr.test(r))throw Error(wr+r);t=8}for((u=r.search(/p/i))>0?(s=+r.slice(u+1),r=r.substring(2,u)):r=r.slice(2),o=(u=r.indexOf("."))>=0,n=e.constructor,o&&(u=(a=(r=r.replace(".","")).length)-u,i=Xr(n,new n(t),u,2*u)),u=f=(c=Pr(r,t,Nr)).length-1;0===c[u];--u)c.pop();return u<0?new n(0*e.s):(e.e=Ur(c,f),e.d=c,yr=!1,o&&(e=Rr(e,i,4*a)),s&&(e=e.times(Math.abs(s)<54?br(2,s):Wt.pow(2,s))),yr=!0,e)}function et(e,r,t,n,i){var u,o,a,s,c=e.precision,f=Math.ceil(c/7);for(yr=!1,s=t.times(t),a=new e(n);;){if(o=Rr(a.times(s),new e(r++*r++),c,1),a=i?n.plus(o):n.minus(o),n=Rr(o.times(s),new e(r++*r++),c,1),void 0!==(o=a.plus(n)).d[f]){for(u=f;o.d[u]===a.d[u]&&u--;);if(-1==u)break}u=a,a=n,n=o,o=u}return yr=!0,o.d.length=f+1,o}function rt(e,r){for(var t=e;--r;)t*=e;return t}function tt(e,r){var t,n=r.s<0,i=Zr(e,e.precision,1),u=i.times(.5);if((r=r.abs()).lte(u))return cr=n?4:1,r;if((t=r.divToInt(i)).isZero())cr=n?3:2;else{if((r=r.minus(t.times(i))).lte(u))return cr=Vr(t)?n?2:3:n?4:1,r;cr=Vr(t)?n?1:4:n?3:2}return r.minus(i).abs()}function nt(e,r,t,n){var i,u,o,a,s,c,f,l,p,d=e.constructor,h=void 0!==t;if(h?(Ir(t,1,dr),void 0===n?n=d.rounding:Ir(n,0,8)):(t=d.precision,n=d.rounding),e.isFinite()){for(h?(i=2,16==r?t=4*t-3:8==r&&(t=3*t-2)):i=r,(o=(f=qr(e)).indexOf("."))>=0&&(f=f.replace(".",""),(p=new d(1)).e=f.length-o,p.d=Pr(qr(p),10,i),p.e=p.d.length),u=s=(l=Pr(f,10,i)).length;0==l[--s];)l.pop();if(l[0]){if(o<0?u--:((e=new d(e)).d=l,e.e=u,l=(e=Rr(e,p,t,n,0,i)).d,u=e.e,c=sr),o=l[t],a=i/2,c=c||void 0!==l[t+1],c=n<4?(void 0!==o||c)&&(0===n||n===(e.s<0?3:2)):o>a||o===a&&(4===n||c||6===n&&1&l[t-1]||n===(e.s<0?8:7)),l.length=t,c)for(;++l[--t]>i-1;)l[t]=0,t||(++u,l.unshift(1));for(s=l.length;!l[s-1];--s);for(o=0,f="";o<s;o++)f+=hr.charAt(l[o]);if(h){if(s>1)if(16==r||8==r){for(o=16==r?4:3,--s;s%o;s++)f+="0";for(s=(l=Pr(f,i,r)).length;!l[s-1];--s);for(o=1,f="1.";o<s;o++)f+=hr.charAt(l[o])}else f=f.charAt(0)+"."+f.slice(1);f=f+(u<0?"p":"p+")+u}else if(u<0){for(;++u;)f="0"+f;f="0."+f}else if(++u>s)for(u-=s;u--;)f+="0";else u<s&&(f=f.slice(0,u)+"."+f.slice(u))}else f=h?"0p+0":"0";f=(16==r?"0x":2==r?"0b":8==r?"0o":"")+f}else f=Kr(e);return e.s<0?"-"+f:f}function it(e,r){if(e.length>r)return e.length=r,!0}function ut(e){return new this(e).abs()}function ot(e){return new this(e).acos()}function at(e){return new this(e).acosh()}function st(e,r){return new this(e).plus(r)}function ct(e){return new this(e).asin()}function ft(e){return new this(e).asinh()}function lt(e){return new this(e).atan()}function pt(e){return new this(e).atanh()}function dt(e,r){e=new this(e),r=new this(r);var t,n=this.precision,i=this.rounding,u=n+4;return e.s&&r.s?e.d||r.d?!r.d||e.isZero()?(t=r.s<0?Zr(this,n,i):new this(0)).s=e.s:!e.d||r.isZero()?(t=Zr(this,u,1).times(.5)).s=e.s:r.s<0?(this.precision=u,this.rounding=1,t=this.atan(Rr(e,r,u,1)),r=Zr(this,u,1),this.precision=n,this.rounding=i,t=e.s<0?t.minus(r):t.plus(r)):t=this.atan(Rr(e,r,u,1)):(t=Zr(this,u,1).times(r.s>0?.25:.75)).s=e.s:t=new this(NaN),t}function ht(e){return new this(e).cbrt()}function Dt(e){return jr(e=new this(e),e.e+1,2)}function mt(e,r,t){return new this(e).clamp(r,t)}function vt(e){if(!e||"object"!=typeof e)throw Error(gr+"Object expected");var r,t,n,i=!0===e.defaults,u=["precision",1,dr,"rounding",0,8,"toExpNeg",-pr,0,"toExpPos",0,pr,"maxE",0,pr,"minE",-pr,0,"modulo",0,9];for(r=0;r<u.length;r+=3)if(t=u[r],i&&(this[t]=vr[t]),void 0!==(n=e[t])){if(!(Fr(n)===n&&n>=u[r+1]&&n<=u[r+2]))throw Error(wr+t+": "+n);this[t]=n}if(t="crypto",i&&(this[t]=vr[t]),void 0!==(n=e[t])){if(!0!==n&&!1!==n&&0!==n&&1!==n)throw Error(wr+t+": "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(Er);this[t]=!0}else this[t]=!1}return this}function yt(e){return new this(e).cos()}function gt(e){return new this(e).cosh()}function wt(e,r){return new this(e).div(r)}function At(e){return new this(e).exp()}function Et(e){return jr(e=new this(e),e.e+1,3)}function xt(){var e,r,t=new this(0);for(yr=!1,e=0;e<arguments.length;)if((r=new this(arguments[e++])).d)t.d&&(t=t.plus(r.times(r)));else{if(r.s)return yr=!0,new this(1/0);t=r}return yr=!0,t.sqrt()}function Ft(e){return e instanceof Wt||e&&e.toStringTag===xr||!1}function bt(e){return new this(e).ln()}function Ct(e,r){return new this(e).log(r)}function _t(e){return new this(e).log(2)}function Mt(e){return new this(e).log(10)}function Bt(){return Gr(this,arguments,"lt")}function Nt(){return Gr(this,arguments,"gt")}function St(e,r){return new this(e).mod(r)}function Tt(e,r){return new this(e).mul(r)}function zt(e,r){return new this(e).pow(r)}function Ot(e){var r,t,n,i,u=0,o=new this(1),a=[];if(void 0===e?e=this.precision:Ir(e,1,dr),n=Math.ceil(e/7),this.crypto)if(crypto.getRandomValues)for(r=crypto.getRandomValues(new Uint32Array(n));u<n;)(i=r[u])>=429e7?r[u]=crypto.getRandomValues(new Uint32Array(1))[0]:a[u++]=i%1e7;else{if(!crypto.randomBytes)throw Error(Er);for(r=crypto.randomBytes(n*=4);u<n;)(i=r[u]+(r[u+1]<<8)+(r[u+2]<<16)+((127&r[u+3])<<24))>=214e7?crypto.randomBytes(4).copy(r,u):(a.push(i%1e7),u+=4);u=n/4}else for(;u<n;)a[u++]=1e7*Math.random()|0;for(e%=7,(n=a[--u])&&e&&(i=br(10,7-e),a[u]=(n/i|0)*i);0===a[u];u--)a.pop();if(u<0)t=0,a=[0];else{for(t=-1;0===a[0];t-=7)a.shift();for(n=1,i=a[0];i>=10;i/=10)n++;n<7&&(t-=7-n)}return o.e=t,o.d=a,o}function It(e){return jr(e=new this(e),e.e+1,this.rounding)}function kt(e){return(e=new this(e)).d?e.d[0]?e.s:0*e.s:e.s||NaN}function Pt(e){return new this(e).sin()}function Rt(e){return new this(e).sinh()}function jt(e){return new this(e).sqrt()}function qt(e,r){return new this(e).sub(r)}function Ut(){var e=0,r=arguments,t=new this(r[e]);for(yr=!1;t.s&&++e<r.length;)t=t.plus(r[e]);return yr=!0,jr(t,this.precision,this.rounding)}function Lt(e){return new this(e).tan()}function Zt(e){return new this(e).tanh()}function Yt(e){return jr(e=new this(e),e.e+1,1)}zr[Symbol.for("nodejs.util.inspect.custom")]=zr.toString,zr[Symbol.toStringTag]="Decimal";var Wt=zr.constructor=function e(r){var t,n,i;function u(e){var r,t,n,i=this;if(!(i instanceof u))return new u(e);if(i.constructor=u,Ft(e))return i.s=e.s,void(yr?!e.d||e.e>u.maxE?(i.e=NaN,i.d=null):e.e<u.minE?(i.e=0,i.d=[0]):(i.e=e.e,i.d=e.d.slice()):(i.e=e.e,i.d=e.d?e.d.slice():e.d));if("number"==(n=typeof e)){if(0===e)return i.s=1/e<0?-1:1,i.e=0,void(i.d=[0]);if(e<0?(e=-e,i.s=-1):i.s=1,e===~~e&&e<1e7){for(r=0,t=e;t>=10;t/=10)r++;return void(yr?r>u.maxE?(i.e=NaN,i.d=null):r<u.minE?(i.e=0,i.d=[0]):(i.e=r,i.d=[e]):(i.e=r,i.d=[e]))}return 0*e!=0?(e||(i.s=NaN),i.e=NaN,void(i.d=null)):$r(i,e.toString())}if("string"!==n)throw Error(wr+e);return 45===(t=e.charCodeAt(0))?(e=e.slice(1),i.s=-1):(43===t&&(e=e.slice(1)),i.s=1),Br.test(e)?$r(i,e):Qr(i,e)}if(u.prototype=zr,u.ROUND_UP=0,u.ROUND_DOWN=1,u.ROUND_CEIL=2,u.ROUND_FLOOR=3,u.ROUND_HALF_UP=4,u.ROUND_HALF_DOWN=5,u.ROUND_HALF_EVEN=6,u.ROUND_HALF_CEIL=7,u.ROUND_HALF_FLOOR=8,u.EUCLID=9,u.config=u.set=vt,u.clone=e,u.isDecimal=Ft,u.abs=ut,u.acos=ot,u.acosh=at,u.add=st,u.asin=ct,u.asinh=ft,u.atan=lt,u.atanh=pt,u.atan2=dt,u.cbrt=ht,u.ceil=Dt,u.clamp=mt,u.cos=yt,u.cosh=gt,u.div=wt,u.exp=At,u.floor=Et,u.hypot=xt,u.ln=bt,u.log=Ct,u.log10=Mt,u.log2=_t,u.max=Bt,u.min=Nt,u.mod=St,u.mul=Tt,u.pow=zt,u.random=Ot,u.round=It,u.sign=kt,u.sin=Pt,u.sinh=Rt,u.sqrt=jt,u.sub=qt,u.sum=Ut,u.tan=Lt,u.tanh=Zt,u.trunc=Yt,void 0===r&&(r={}),r&&!0!==r.defaults)for(i=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],t=0;t<i.length;)r.hasOwnProperty(n=i[t++])||(r[n]=this[n]);return u.config(r),u}(vr);Dr=new Wt(Dr),mr=new Wt(mr);const Xt=Wt;var Vt=fe("BigNumber",["?on","config"],(e=>{var{on:r,config:t}=e,n=Xt.clone({precision:t.precision,modulo:Xt.EUCLID});return n.prototype=Object.create(n.prototype),n.prototype.type="BigNumber",n.prototype.isBigNumber=!0,n.prototype.toJSON=function(){return{mathjs:"BigNumber",value:this.toString()}},n.fromJSON=function(e){return new n(e.value)},r&&r("config",(function(e,r){e.precision!==r.precision&&n.config({precision:e.precision})})),n}),{isClass:!0}),Gt={createBigNumberClass:Vt},Jt=Math.cosh||function(e){return Math.abs(e)<1e-9?1-e:.5*(Math.exp(e)+Math.exp(-e))},Ht=Math.sinh||function(e){return Math.abs(e)<1e-9?e:.5*(Math.exp(e)-Math.exp(-e))},Kt=function(){throw SyntaxError("Invalid Param")};function $t(e,r){var t=Math.abs(e),n=Math.abs(r);return 0===e?Math.log(n):0===r?Math.log(t):t<3e3&&n<3e3?.5*Math.log(e*e+r*r):(e/=2,r/=2,.5*Math.log(e*e+r*r)+Math.LN2)}function Qt(e,r){if(!(this instanceof Qt))return new Qt(e,r);var t=function(e,r){var t={re:0,im:0};if(null==e)t.re=t.im=0;else if(void 0!==r)t.re=e,t.im=r;else switch(typeof e){case"object":if("im"in e&&"re"in e)t.re=e.re,t.im=e.im;else if("abs"in e&&"arg"in e){if(!Number.isFinite(e.abs)&&Number.isFinite(e.arg))return Qt.INFINITY;t.re=e.abs*Math.cos(e.arg),t.im=e.abs*Math.sin(e.arg)}else if("r"in e&&"phi"in e){if(!Number.isFinite(e.r)&&Number.isFinite(e.phi))return Qt.INFINITY;t.re=e.r*Math.cos(e.phi),t.im=e.r*Math.sin(e.phi)}else 2===e.length?(t.re=e[0],t.im=e[1]):Kt();break;case"string":t.im=t.re=0;var n=e.replace(/_/g,"").match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g),i=1,u=0;null===n&&Kt();for(var o=0;o<n.length;o++){var a=n[o];" "===a||"\t"===a||"\n"===a||("+"===a?i++:"-"===a?u++:"i"===a||"I"===a?(i+u===0&&Kt()," "===n[o+1]||isNaN(n[o+1])?t.im+=parseFloat((u%2?"-":"")+"1"):(t.im+=parseFloat((u%2?"-":"")+n[o+1]),o++),i=u=0):((i+u===0||isNaN(a))&&Kt(),"i"===n[o+1]||"I"===n[o+1]?(t.im+=parseFloat((u%2?"-":"")+a),o++):t.re+=parseFloat((u%2?"-":"")+a),i=u=0))}i+u>0&&Kt();break;case"number":t.im=0,t.re=e;break;default:Kt()}return isNaN(t.re)||isNaN(t.im),t}(e,r);this.re=t.re,this.im=t.im}Qt.prototype={re:0,im:0,sign:function(){var e=this.abs();return new Qt(this.re/e,this.im/e)},add:function(e,r){var t=new Qt(e,r);return this.isInfinite()&&t.isInfinite()?Qt.NAN:this.isInfinite()||t.isInfinite()?Qt.INFINITY:new Qt(this.re+t.re,this.im+t.im)},sub:function(e,r){var t=new Qt(e,r);return this.isInfinite()&&t.isInfinite()?Qt.NAN:this.isInfinite()||t.isInfinite()?Qt.INFINITY:new Qt(this.re-t.re,this.im-t.im)},mul:function(e,r){var t=new Qt(e,r);return this.isInfinite()&&t.isZero()||this.isZero()&&t.isInfinite()?Qt.NAN:this.isInfinite()||t.isInfinite()?Qt.INFINITY:0===t.im&&0===this.im?new Qt(this.re*t.re,0):new Qt(this.re*t.re-this.im*t.im,this.re*t.im+this.im*t.re)},div:function(e,r){var t=new Qt(e,r);if(this.isZero()&&t.isZero()||this.isInfinite()&&t.isInfinite())return Qt.NAN;if(this.isInfinite()||t.isZero())return Qt.INFINITY;if(this.isZero()||t.isInfinite())return Qt.ZERO;e=this.re,r=this.im;var n,i,u=t.re,o=t.im;return 0===o?new Qt(e/u,r/u):Math.abs(u)<Math.abs(o)?new Qt((e*(i=u/o)+r)/(n=u*i+o),(r*i-e)/n):new Qt((e+r*(i=o/u))/(n=o*i+u),(r-e*i)/n)},pow:function(e,r){var t=new Qt(e,r);if(e=this.re,r=this.im,t.isZero())return Qt.ONE;if(0===t.im){if(0===r&&e>0)return new Qt(Math.pow(e,t.re),0);if(0===e)switch((t.re%4+4)%4){case 0:return new Qt(Math.pow(r,t.re),0);case 1:return new Qt(0,Math.pow(r,t.re));case 2:return new Qt(-Math.pow(r,t.re),0);case 3:return new Qt(0,-Math.pow(r,t.re))}}if(0===e&&0===r&&t.re>0&&t.im>=0)return Qt.ZERO;var n=Math.atan2(r,e),i=$t(e,r);return e=Math.exp(t.re*i-t.im*n),r=t.im*i+t.re*n,new Qt(e*Math.cos(r),e*Math.sin(r))},sqrt:function(){var e,r,t=this.re,n=this.im,i=this.abs();if(t>=0){if(0===n)return new Qt(Math.sqrt(t),0);e=.5*Math.sqrt(2*(i+t))}else e=Math.abs(n)/Math.sqrt(2*(i-t));return r=t<=0?.5*Math.sqrt(2*(i-t)):Math.abs(n)/Math.sqrt(2*(i+t)),new Qt(e,n<0?-r:r)},exp:function(){var e=Math.exp(this.re);return this.im,new Qt(e*Math.cos(this.im),e*Math.sin(this.im))},expm1:function(){var e=this.re,r=this.im;return new Qt(Math.expm1(e)*Math.cos(r)+function(e){var r=Math.PI/4;if(-r>e||e>r)return Math.cos(e)-1;var t=e*e;return t*(t*(t*(t*(t*(t*(t*(t/20922789888e3-1/87178291200)+1/479001600)-1/3628800)+1/40320)-1/720)+1/24)-.5)}(r),Math.exp(e)*Math.sin(r))},log:function(){var e=this.re,r=this.im;return new Qt($t(e,r),Math.atan2(r,e))},abs:function(){return e=this.re,r=this.im,t=Math.abs(e),n=Math.abs(r),t<3e3&&n<3e3?Math.sqrt(t*t+n*n):(t<n?(t=n,n=e/r):n=r/e,t*Math.sqrt(1+n*n));var e,r,t,n},arg:function(){return Math.atan2(this.im,this.re)},sin:function(){var e=this.re,r=this.im;return new Qt(Math.sin(e)*Jt(r),Math.cos(e)*Ht(r))},cos:function(){var e=this.re,r=this.im;return new Qt(Math.cos(e)*Jt(r),-Math.sin(e)*Ht(r))},tan:function(){var e=2*this.re,r=2*this.im,t=Math.cos(e)+Jt(r);return new Qt(Math.sin(e)/t,Ht(r)/t)},cot:function(){var e=2*this.re,r=2*this.im,t=Math.cos(e)-Jt(r);return new Qt(-Math.sin(e)/t,Ht(r)/t)},sec:function(){var e=this.re,r=this.im,t=.5*Jt(2*r)+.5*Math.cos(2*e);return new Qt(Math.cos(e)*Jt(r)/t,Math.sin(e)*Ht(r)/t)},csc:function(){var e=this.re,r=this.im,t=.5*Jt(2*r)-.5*Math.cos(2*e);return new Qt(Math.sin(e)*Jt(r)/t,-Math.cos(e)*Ht(r)/t)},asin:function(){var e=this.re,r=this.im,t=new Qt(r*r-e*e+1,-2*e*r).sqrt(),n=new Qt(t.re-r,t.im+e).log();return new Qt(n.im,-n.re)},acos:function(){var e=this.re,r=this.im,t=new Qt(r*r-e*e+1,-2*e*r).sqrt(),n=new Qt(t.re-r,t.im+e).log();return new Qt(Math.PI/2-n.im,n.re)},atan:function(){var e=this.re,r=this.im;if(0===e){if(1===r)return new Qt(0,1/0);if(-1===r)return new Qt(0,-1/0)}var t=e*e+(1-r)*(1-r),n=new Qt((1-r*r-e*e)/t,-2*e/t).log();return new Qt(-.5*n.im,.5*n.re)},acot:function(){var e=this.re,r=this.im;if(0===r)return new Qt(Math.atan2(1,e),0);var t=e*e+r*r;return 0!==t?new Qt(e/t,-r/t).atan():new Qt(0!==e?e/0:0,0!==r?-r/0:0).atan()},asec:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new Qt(0,1/0);var t=e*e+r*r;return 0!==t?new Qt(e/t,-r/t).acos():new Qt(0!==e?e/0:0,0!==r?-r/0:0).acos()},acsc:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new Qt(Math.PI/2,1/0);var t=e*e+r*r;return 0!==t?new Qt(e/t,-r/t).asin():new Qt(0!==e?e/0:0,0!==r?-r/0:0).asin()},sinh:function(){var e=this.re,r=this.im;return new Qt(Ht(e)*Math.cos(r),Jt(e)*Math.sin(r))},cosh:function(){var e=this.re,r=this.im;return new Qt(Jt(e)*Math.cos(r),Ht(e)*Math.sin(r))},tanh:function(){var e=2*this.re,r=2*this.im,t=Jt(e)+Math.cos(r);return new Qt(Ht(e)/t,Math.sin(r)/t)},coth:function(){var e=2*this.re,r=2*this.im,t=Jt(e)-Math.cos(r);return new Qt(Ht(e)/t,-Math.sin(r)/t)},csch:function(){var e=this.re,r=this.im,t=Math.cos(2*r)-Jt(2*e);return new Qt(-2*Ht(e)*Math.cos(r)/t,2*Jt(e)*Math.sin(r)/t)},sech:function(){var e=this.re,r=this.im,t=Math.cos(2*r)+Jt(2*e);return new Qt(2*Jt(e)*Math.cos(r)/t,-2*Ht(e)*Math.sin(r)/t)},asinh:function(){var e=this.im;this.im=-this.re,this.re=e;var r=this.asin();return this.re=-this.im,this.im=e,e=r.re,r.re=-r.im,r.im=e,r},acosh:function(){var e=this.acos();if(e.im<=0){var r=e.re;e.re=-e.im,e.im=r}else r=e.im,e.im=-e.re,e.re=r;return e},atanh:function(){var e=this.re,r=this.im,t=e>1&&0===r,n=1-e,i=1+e,u=n*n+r*r,o=0!==u?new Qt((i*n-r*r)/u,(r*n+i*r)/u):new Qt(-1!==e?e/0:0,0!==r?r/0:0),a=o.re;return o.re=$t(o.re,o.im)/2,o.im=Math.atan2(o.im,a)/2,t&&(o.im=-o.im),o},acoth:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new Qt(0,Math.PI/2);var t=e*e+r*r;return 0!==t?new Qt(e/t,-r/t).atanh():new Qt(0!==e?e/0:0,0!==r?-r/0:0).atanh()},acsch:function(){var e=this.re,r=this.im;if(0===r)return new Qt(0!==e?Math.log(e+Math.sqrt(e*e+1)):1/0,0);var t=e*e+r*r;return 0!==t?new Qt(e/t,-r/t).asinh():new Qt(0!==e?e/0:0,0!==r?-r/0:0).asinh()},asech:function(){var e=this.re,r=this.im;if(this.isZero())return Qt.INFINITY;var t=e*e+r*r;return 0!==t?new Qt(e/t,-r/t).acosh():new Qt(0!==e?e/0:0,0!==r?-r/0:0).acosh()},inverse:function(){if(this.isZero())return Qt.INFINITY;if(this.isInfinite())return Qt.ZERO;var e=this.re,r=this.im,t=e*e+r*r;return new Qt(e/t,-r/t)},conjugate:function(){return new Qt(this.re,-this.im)},neg:function(){return new Qt(-this.re,-this.im)},ceil:function(e){return e=Math.pow(10,e||0),new Qt(Math.ceil(this.re*e)/e,Math.ceil(this.im*e)/e)},floor:function(e){return e=Math.pow(10,e||0),new Qt(Math.floor(this.re*e)/e,Math.floor(this.im*e)/e)},round:function(e){return e=Math.pow(10,e||0),new Qt(Math.round(this.re*e)/e,Math.round(this.im*e)/e)},equals:function(e,r){var t=new Qt(e,r);return Math.abs(t.re-this.re)<=Qt.EPSILON&&Math.abs(t.im-this.im)<=Qt.EPSILON},clone:function(){return new Qt(this.re,this.im)},toString:function(){var e=this.re,r=this.im,t="";return this.isNaN()?"NaN":this.isInfinite()?"Infinity":(Math.abs(e)<Qt.EPSILON&&(e=0),Math.abs(r)<Qt.EPSILON&&(r=0),0===r?t+e:(0!==e?(t+=e,t+=" ",r<0?(r=-r,t+="-"):t+="+",t+=" "):r<0&&(r=-r,t+="-"),1!==r&&(t+=r),t+"i"))},toVector:function(){return[this.re,this.im]},valueOf:function(){return 0===this.im?this.re:null},isNaN:function(){return isNaN(this.re)||isNaN(this.im)},isZero:function(){return 0===this.im&&0===this.re},isFinite:function(){return isFinite(this.re)&&isFinite(this.im)},isInfinite:function(){return!(this.isNaN()||this.isFinite())}},Qt.ZERO=new Qt(0,0),Qt.ONE=new Qt(1,0),Qt.I=new Qt(0,1),Qt.PI=new Qt(Math.PI,0),Qt.E=new Qt(Math.E,0),Qt.INFINITY=new Qt(1/0,1/0),Qt.NAN=new Qt(NaN,NaN),Qt.EPSILON=1e-15;var en={createComplexClass:fe("Complex",[],(()=>(Object.defineProperty(Qt,"name",{value:"Complex"}),Qt.prototype.constructor=Qt,Qt.prototype.type="Complex",Qt.prototype.isComplex=!0,Qt.prototype.toJSON=function(){return{mathjs:"Complex",re:this.re,im:this.im}},Qt.prototype.toPolar=function(){return{r:this.abs(),phi:this.arg()}},Qt.prototype.format=function(e){var r=this.im,t=this.re,n=xe(this.re,e),i=xe(this.im,e),u=p(e)?e:e?e.precision:null;if(null!==u){var o=Math.pow(10,-u);Math.abs(t/r)<o&&(t=0),Math.abs(r/t)<o&&(r=0)}return 0===r?n:0===t?1===r?"i":-1===r?"-i":i+"i":r<0?-1===r?n+" - i":n+" - "+i.substring(1)+"i":1===r?n+" + i":n+" + "+i+"i"},Qt.fromPolar=function(e){switch(arguments.length){case 1:var r=arguments[0];if("object"==typeof r)return Qt(r);throw new TypeError("Input has to be an object with r and phi keys.");case 2:var t=arguments[0],n=arguments[1];if(p(t)){if(v(n)&&n.hasBase("ANGLE")&&(n=n.toNumber("rad")),p(n))return new Qt({r:t,phi:n});throw new TypeError("Phi is not a number nor an angle unit.")}throw new TypeError("Radius r is not a number.");default:throw new SyntaxError("Wrong number of arguments in function fromPolar")}},Qt.prototype.valueOf=Qt.prototype.toString,Qt.fromJSON=function(e){return new Qt(e)},Qt.compare=function(e,r){return e.re>r.re?1:e.re<r.re?-1:e.im>r.im?1:e.im<r.im?-1:0},Qt)),{isClass:!0})},rn={s:1,n:0,d:1};function tn(e,r){if(isNaN(e=parseInt(e,10)))throw fn();return e*r}function nn(e,r){if(0===r)throw cn();var t=Object.create(sn.prototype);t.s=e<0?-1:1;var n=an(e=e<0?-e:e,r);return t.n=e/n,t.d=r/n,t}function un(e){for(var r={},t=e,n=2,i=4;i<=t;){for(;t%n==0;)t/=n,r[n]=(r[n]||0)+1;i+=1+2*n++}return t!==e?t>1&&(r[t]=(r[t]||0)+1):r[e]=(r[e]||0)+1,r}var on=function(e,r){var t,n=0,i=1,u=1,o=0,a=0,s=0,c=1,f=1,l=0,p=1,d=1,h=1,D=1e7;if(null==e);else if(void 0!==r){if(u=(n=e)*(i=r),n%1!=0||i%1!=0)throw ln()}else switch(typeof e){case"object":if("d"in e&&"n"in e)n=e.n,i=e.d,"s"in e&&(n*=e.s);else{if(!(0 in e))throw fn();n=e[0],1 in e&&(i=e[1])}u=n*i;break;case"number":if(e<0&&(u=e,e=-e),e%1==0)n=e;else if(e>0){for(e>=1&&(e/=f=Math.pow(10,Math.floor(1+Math.log(e)/Math.LN10)));p<=D&&h<=D;){if(e===(t=(l+d)/(p+h))){p+h<=D?(n=l+d,i=p+h):h>p?(n=d,i=h):(n=l,i=p);break}e>t?(l+=d,p+=h):(d+=l,h+=p),p>D?(n=d,i=h):(n=l,i=p)}n*=f}else(isNaN(e)||isNaN(r))&&(i=n=NaN);break;case"string":if(null===(p=e.match(/\d+|./g)))throw fn();if("-"===p[l]?(u=-1,l++):"+"===p[l]&&l++,p.length===l+1?a=tn(p[l++],u):"."===p[l+1]||"."===p[l]?("."!==p[l]&&(o=tn(p[l++],u)),(1+ ++l===p.length||"("===p[l+1]&&")"===p[l+3]||"'"===p[l+1]&&"'"===p[l+3])&&(a=tn(p[l],u),c=Math.pow(10,p[l].length),l++),("("===p[l]&&")"===p[l+2]||"'"===p[l]&&"'"===p[l+2])&&(s=tn(p[l+1],u),f=Math.pow(10,p[l+1].length)-1,l+=3)):"/"===p[l+1]||":"===p[l+1]?(a=tn(p[l],u),c=tn(p[l+2],1),l+=3):"/"===p[l+3]&&" "===p[l+1]&&(o=tn(p[l],u),a=tn(p[l+2],u),c=tn(p[l+4],1),l+=5),p.length<=l){u=n=s+(i=c*f)*o+f*a;break}default:throw fn()}if(0===i)throw cn();rn.s=u<0?-1:1,rn.n=Math.abs(n),rn.d=Math.abs(i)};function an(e,r){if(!e)return r;if(!r)return e;for(;;){if(!(e%=r))return r;if(!(r%=e))return e}}function sn(e,r){if(on(e,r),!(this instanceof sn))return nn(rn.s*rn.n,rn.d);e=an(rn.d,rn.n),this.s=rn.s,this.n=rn.n/e,this.d=rn.d/e}var cn=function(){return new Error("Division by Zero")},fn=function(){return new Error("Invalid argument")},ln=function(){return new Error("Parameters must be integer")};sn.prototype={s:1,n:0,d:1,abs:function(){return nn(this.n,this.d)},neg:function(){return nn(-this.s*this.n,this.d)},add:function(e,r){return on(e,r),nn(this.s*this.n*rn.d+rn.s*this.d*rn.n,this.d*rn.d)},sub:function(e,r){return on(e,r),nn(this.s*this.n*rn.d-rn.s*this.d*rn.n,this.d*rn.d)},mul:function(e,r){return on(e,r),nn(this.s*rn.s*this.n*rn.n,this.d*rn.d)},div:function(e,r){return on(e,r),nn(this.s*rn.s*this.n*rn.d,this.d*rn.n)},clone:function(){return nn(this.s*this.n,this.d)},mod:function(e,r){if(isNaN(this.n)||isNaN(this.d))return new sn(NaN);if(void 0===e)return nn(this.s*this.n%this.d,1);if(on(e,r),0===rn.n&&0===this.d)throw cn();return nn(this.s*(rn.d*this.n)%(rn.n*this.d),rn.d*this.d)},gcd:function(e,r){return on(e,r),nn(an(rn.n,this.n)*an(rn.d,this.d),rn.d*this.d)},lcm:function(e,r){return on(e,r),0===rn.n&&0===this.n?nn(0,1):nn(rn.n*this.n,an(rn.n,this.n)*an(rn.d,this.d))},ceil:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new sn(NaN):nn(Math.ceil(e*this.s*this.n/this.d),e)},floor:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new sn(NaN):nn(Math.floor(e*this.s*this.n/this.d),e)},round:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new sn(NaN):nn(Math.round(e*this.s*this.n/this.d),e)},roundTo:function(e,r){return on(e,r),nn(this.s*Math.round(this.n*rn.d/(this.d*rn.n))*rn.n,rn.d)},inverse:function(){return nn(this.s*this.d,this.n)},pow:function(e,r){if(on(e,r),1===rn.d)return rn.s<0?nn(Math.pow(this.s*this.d,rn.n),Math.pow(this.n,rn.n)):nn(Math.pow(this.s*this.n,rn.n),Math.pow(this.d,rn.n));if(this.s<0)return null;var t=un(this.n),n=un(this.d),i=1,u=1;for(var o in t)if("1"!==o){if("0"===o){i=0;break}if(t[o]*=rn.n,t[o]%rn.d!=0)return null;t[o]/=rn.d,i*=Math.pow(o,t[o])}for(var o in n)if("1"!==o){if(n[o]*=rn.n,n[o]%rn.d!=0)return null;n[o]/=rn.d,u*=Math.pow(o,n[o])}return rn.s<0?nn(u,i):nn(i,u)},equals:function(e,r){return on(e,r),this.s*this.n*rn.d==rn.s*rn.n*this.d},compare:function(e,r){on(e,r);var t=this.s*this.n*rn.d-rn.s*rn.n*this.d;return(0<t)-(t<0)},simplify:function(e){if(isNaN(this.n)||isNaN(this.d))return this;e=e||.001;for(var r=this.abs(),t=r.toContinued(),n=1;n<t.length;n++){for(var i=nn(t[n-1],1),u=n-2;u>=0;u--)i=i.inverse().add(t[u]);if(Math.abs(i.sub(r).valueOf())<e)return i.mul(this.s)}return this},divisible:function(e,r){return on(e,r),!(!(rn.n*this.d)||this.n*rn.d%(rn.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(e){var r,t="",n=this.n,i=this.d;return this.s<0&&(t+="-"),1===i?t+=n:(e&&(r=Math.floor(n/i))>0&&(t+=r,t+=" ",n%=i),t+=n,t+="/",t+=i),t},toLatex:function(e){var r,t="",n=this.n,i=this.d;return this.s<0&&(t+="-"),1===i?t+=n:(e&&(r=Math.floor(n/i))>0&&(t+=r,n%=i),t+="\\frac{",t+=n,t+="}{",t+=i,t+="}"),t},toContinued:function(){var e,r=this.n,t=this.d,n=[];if(isNaN(r)||isNaN(t))return n;do{n.push(Math.floor(r/t)),e=r%t,r=t,t=e}while(1!==r);return n},toString:function(e){var r=this.n,t=this.d;if(isNaN(r)||isNaN(t))return"NaN";e=e||15;var n=function(e,r){for(;r%2==0;r/=2);for(;r%5==0;r/=5);if(1===r)return 0;for(var t=10%r,n=1;1!==t;n++)if(t=10*t%r,n>2e3)return 0;return n}(0,t),i=function(e,r,t){for(var n=1,i=function(e,r,t){for(var n=1;r>0;e=e*e%t,r>>=1)1&r&&(n=n*e%t);return n}(10,t,r),u=0;u<300;u++){if(n===i)return u;n=10*n%r,i=10*i%r}return 0}(0,t,n),u=this.s<0?"-":"";if(u+=r/t|0,r%=t,(r*=10)&&(u+="."),n){for(var o=i;o--;)u+=r/t|0,r%=t,r*=10;for(u+="(",o=n;o--;)u+=r/t|0,r%=t,r*=10;u+=")"}else for(o=e;r&&o--;)u+=r/t|0,r%=t,r*=10;return u}};var pn={createFractionClass:fe("Fraction",[],(()=>(Object.defineProperty(sn,"name",{value:"Fraction"}),sn.prototype.constructor=sn,sn.prototype.type="Fraction",sn.prototype.isFraction=!0,sn.prototype.toJSON=function(){return{mathjs:"Fraction",n:this.s*this.n,d:this.d}},sn.fromJSON=function(e){return new sn(e)},sn)),{isClass:!0})},dn=function(){return dn=i.create,i},hn=fe("typed",["?BigNumber","?Complex","?DenseMatrix","?Fraction"],(function(e){var{BigNumber:r,Complex:t,DenseMatrix:n,Fraction:i}=e,u=dn();return u.clear(),u.addTypes([{name:"number",test:p},{name:"Complex",test:D},{name:"BigNumber",test:d},{name:"bigint",test:h},{name:"Fraction",test:m},{name:"Unit",test:v},{name:"identifier",test:e=>y&&/^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])*$/.test(e)},{name:"string",test:y},{name:"Chain",test:ee},{name:"Array",test:g},{name:"Matrix",test:w},{name:"DenseMatrix",test:E},{name:"SparseMatrix",test:x},{name:"Range",test:F},{name:"Index",test:b},{name:"boolean",test:C},{name:"ResultSet",test:_},{name:"Help",test:M},{name:"function",test:B},{name:"Date",test:N},{name:"RegExp",test:S},{name:"null",test:k},{name:"undefined",test:P},{name:"AccessorNode",test:R},{name:"ArrayNode",test:j},{name:"AssignmentNode",test:q},{name:"BlockNode",test:U},{name:"ConditionalNode",test:L},{name:"ConstantNode",test:Z},{name:"FunctionNode",test:W},{name:"FunctionAssignmentNode",test:Y},{name:"IndexNode",test:X},{name:"Node",test:V},{name:"ObjectNode",test:G},{name:"OperatorNode",test:J},{name:"ParenthesisNode",test:H},{name:"RangeNode",test:K},{name:"RelationalNode",test:$},{name:"SymbolNode",test:Q},{name:"Map",test:z},{name:"Object",test:T}]),u.addConversions([{from:"number",to:"BigNumber",convert:function(e){if(r||Dn(e),e.toExponential().replace(/e.*$/,"").replace(/^0\.?0*|\./,"").length>15)throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: "+e+"). Use function bignumber(x) to convert to BigNumber.");return new r(e)}},{from:"number",to:"Complex",convert:function(e){return t||mn(e),new t(e,0)}},{from:"BigNumber",to:"Complex",convert:function(e){return t||mn(e),new t(e.toNumber(),0)}},{from:"bigint",to:"number",convert:function(e){if(e>Number.MAX_SAFE_INTEGER)throw new TypeError("Cannot implicitly convert bigint to number: value exceeds the max safe integer value (value: "+e+")");return Number(e)}},{from:"bigint",to:"BigNumber",convert:function(e){return r||Dn(e),new r(e.toString())}},{from:"bigint",to:"Fraction",convert:function(e){return i||vn(e),new i(e.toString())}},{from:"Fraction",to:"BigNumber",convert:function(e){throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.")}},{from:"Fraction",to:"Complex",convert:function(e){return t||mn(e),new t(e.valueOf(),0)}},{from:"number",to:"Fraction",convert:function(e){i||vn(e);var r=new i(e);if(r.valueOf()!==e)throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: "+e+"). Use function fraction(x) to convert to Fraction.");return r}},{from:"string",to:"number",convert:function(e){var r=Number(e);if(isNaN(r))throw new Error('Cannot convert "'+e+'" to a number');return r}},{from:"string",to:"BigNumber",convert:function(e){r||Dn(e);try{return new r(e)}catch(r){throw new Error('Cannot convert "'+e+'" to BigNumber')}}},{from:"string",to:"bigint",convert:function(e){try{return BigInt(e)}catch(r){throw new Error('Cannot convert "'+e+'" to BigInt')}}},{from:"string",to:"Fraction",convert:function(e){i||vn(e);try{return new i(e)}catch(r){throw new Error('Cannot convert "'+e+'" to Fraction')}}},{from:"string",to:"Complex",convert:function(e){t||mn(e);try{return new t(e)}catch(r){throw new Error('Cannot convert "'+e+'" to Complex')}}},{from:"boolean",to:"number",convert:function(e){return+e}},{from:"boolean",to:"BigNumber",convert:function(e){return r||Dn(e),new r(+e)}},{from:"boolean",to:"bigint",convert:function(e){return BigInt(+e)}},{from:"boolean",to:"Fraction",convert:function(e){return i||vn(e),new i(+e)}},{from:"boolean",to:"string",convert:function(e){return String(e)}},{from:"Array",to:"Matrix",convert:function(e){return n||function(){throw new Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided")}(),new n(e)}},{from:"Matrix",to:"Array",convert:function(e){return e.valueOf()}}]),u.onMismatch=(e,r,t)=>{var n=u.createError(e,r,t);if(["wrongType","mismatch"].includes(n.data.category)&&1===r.length&&A(r[0])&&t.some((e=>!e.params.includes(",")))){var i=new TypeError("Function '".concat(e,"' doesn't apply to matrices. To call it ")+"elementwise on a matrix 'M', try 'map(M, ".concat(e,")'."));throw i.data=n.data,i}throw n},u.onMismatch=(e,r,t)=>{var n=u.createError(e,r,t);if(["wrongType","mismatch"].includes(n.data.category)&&1===r.length&&A(r[0])&&t.some((e=>!e.params.includes(",")))){var i=new TypeError("Function '".concat(e,"' doesn't apply to matrices. To call it ")+"elementwise on a matrix 'M', try 'map(M, ".concat(e,")'."));throw i.data=n.data,i}throw n},u}));function Dn(e){throw new Error("Cannot convert value ".concat(e," into a BigNumber: no class 'BigNumber' provided"))}function mn(e){throw new Error("Cannot convert value ".concat(e," into a Complex number: no class 'Complex' provided"))}function vn(e){throw new Error("Cannot convert value ".concat(e," into a Fraction, no class 'Fraction' provided."))}var yn={BigNumberDependencies:Gt,ComplexDependencies:en,DenseMatrixDependencies:lr,FractionDependencies:pn,createTyped:hn};function gn(e,r){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e-9,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if(t<=0)throw new Error("Relative tolerance must be greater than 0");if(n<0)throw new Error("Absolute tolerance must be at least 0");return!e.isNaN()&&!r.isNaN()&&(e.isFinite()&&r.isFinite()?!!e.eq(r)||e.minus(r).abs().lte(e.constructor.max(e.constructor.max(e.abs(),r.abs()).mul(t),n)):e.eq(r))}var wn=fe("compareUnits",["typed"],(e=>{var{typed:r}=e;return{"Unit, Unit":r.referToSelf((e=>(t,n)=>{if(!t.equalBase(n))throw new Error("Cannot compare units with different base");return r.find(e,[t.valueType(),n.valueType()])(t.value,n.value)}))}})),An="equalScalar",En=fe(An,["typed","config"],(e=>{var{typed:r,config:t}=e,n=wn({typed:r});return r(An,{"boolean, boolean":function(e,r){return e===r},"number, number":function(e,r){return Be(e,r,t.relTol,t.absTol)},"BigNumber, BigNumber":function(e,r){return e.eq(r)||gn(e,r,t.relTol,t.absTol)},"bigint, bigint":function(e,r){return e===r},"Fraction, Fraction":function(e,r){return e.equals(r)},"Complex, Complex":function(e,r){return function(e,r,t,n){return Be(e.re,r.re,t,n)&&Be(e.im,r.im,t,n)}(e,r,t.relTol,t.absTol)}},n)})),xn=(fe(An,["typed","config"],(e=>{var{typed:r,config:t}=e;return r(An,{"number, number":function(e,r){return Be(e,r,t.relTol,t.absTol)}})})),{typedDependencies:yn,createEqualScalar:En}),Fn=fe("SparseMatrix",["typed","equalScalar","Matrix"],(e=>{var{typed:r,equalScalar:t,Matrix:n}=e;function i(e,r){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!y(r))throw new Error("Invalid datatype: "+r);if(w(e))!function(e,r,t){"SparseMatrix"===r.type?(e._values=r._values?te(r._values):void 0,e._index=te(r._index),e._ptr=te(r._ptr),e._size=te(r._size),e._datatype=t||r._datatype):u(e,r.valueOf(),t||r._datatype)}(this,e,r);else if(e&&g(e.index)&&g(e.ptr)&&g(e.size))this._values=e.values,this._index=e.index,this._ptr=e.ptr,this._size=e.size,this._datatype=r||e.datatype;else if(g(e))u(this,e,r);else{if(e)throw new TypeError("Unsupported type of data ("+re(e)+")");this._values=[],this._index=[],this._ptr=[0],this._size=[0,0],this._datatype=r}}function u(e,n,i){e._values=[],e._index=[],e._ptr=[],e._datatype=i;var u=n.length,o=0,a=t,s=0;if(y(i)&&(a=r.find(t,[i,i])||t,s=r.convert(0,i)),u>0){var c=0;do{e._ptr.push(e._index.length);for(var f=0;f<u;f++){var l=n[f];if(g(l)){if(0===c&&o<l.length&&(o=l.length),c<l.length){var p=l[c];a(p,s)||(e._values.push(p),e._index.push(f))}}else 0===c&&o<1&&(o=1),a(l,s)||(e._values.push(l),e._index.push(f))}c++}while(c<o)}e._ptr.push(e._index.length),e._size=[u,o]}function a(e,r,t,n){if(t-r==0)return t;for(var i=r;i<t;i++)if(n[i]===e)return i;return r}function s(e,r,t,n,i,u,o){i.splice(e,0,n),u.splice(e,0,r);for(var a=t+1;a<o.length;a++)o[a]++}function c(e,n,i,u){var o=u||0,a=t,s=0;y(e._datatype)&&(a=r.find(t,[e._datatype,e._datatype])||t,s=r.convert(0,e._datatype),o=r.convert(o,e._datatype));var c,f,l,p=!a(o,s),d=e._size[0],h=e._size[1];if(i>h){for(f=h;f<i;f++)if(e._ptr[f]=e._values.length,p)for(c=0;c<d;c++)e._values.push(o),e._index.push(c);e._ptr[i]=e._values.length}else i<h&&(e._ptr.splice(i+1,h-i),e._values.splice(e._ptr[i],e._values.length),e._index.splice(e._ptr[i],e._index.length));if(h=i,n>d){if(p){var D=0;for(f=0;f<h;f++){e._ptr[f]=e._ptr[f]+D,l=e._ptr[f+1]+D;var m=0;for(c=d;c<n;c++,m++)e._values.splice(l+m,0,o),e._index.splice(l+m,0,c),D++}e._ptr[h]=e._values.length}}else if(n<d){var v=0;for(f=0;f<h;f++){e._ptr[f]=e._ptr[f]-v;var g=e._ptr[f],w=e._ptr[f+1]-v;for(l=g;l<w;l++)(c=e._index[l])>n-1&&(e._values.splice(l,1),e._index.splice(l,1),v++)}e._ptr[f]=e._values.length}return e._size[0]=n,e._size[1]=i,e}function f(e,r,t,n,i){var u,o,a=n[0],s=n[1],c=[];for(u=0;u<a;u++)for(c[u]=[],o=0;o<s;o++)c[u][o]=0;for(o=0;o<s;o++)for(var f=t[o],l=t[o+1],p=f;p<l;p++)c[u=r[p]][o]=e?i?te(e[p]):e[p]:1;return c}return i.prototype=new n,i.prototype.createSparseMatrix=function(e,r){return new i(e,r)},Object.defineProperty(i,"name",{value:"SparseMatrix"}),i.prototype.constructor=i,i.prototype.type="SparseMatrix",i.prototype.isSparseMatrix=!0,i.prototype.getDataType=function(){return Qe(this._values,re)},i.prototype.storage=function(){return"sparse"},i.prototype.datatype=function(){return this._datatype},i.prototype.create=function(e,r){return new i(e,r)},i.prototype.density=function(){var e=this._size[0],r=this._size[1];return 0!==e&&0!==r?this._index.length/(e*r):0},i.prototype.subset=function(e,r,t){if(!this._values)throw new Error("Cannot invoke subset on a Pattern only matrix");switch(arguments.length){case 1:return function(e,r){if(!b(r))throw new TypeError("Invalid index");if(r.isScalar())return e.get(r.min());var t,n,u,a,s=r.size();if(s.length!==e._size.length)throw new o(s.length,e._size.length);var c=r.min(),f=r.max();for(t=0,n=e._size.length;t<n;t++)Le(c[t],e._size[t]),Le(f[t],e._size[t]);var l=e._values,p=e._index,d=e._ptr,h=r.dimension(0),D=r.dimension(1),m=[],v=[];h.forEach((function(e,r){v[e]=r[0],m[e]=!0}));var y=l?[]:void 0,g=[],w=[];return D.forEach((function(e){for(w.push(g.length),u=d[e],a=d[e+1];u<a;u++)t=p[u],!0===m[t]&&(g.push(v[t]),y&&y.push(l[u]))})),w.push(g.length),new i({values:y,index:g,ptr:w,size:s,datatype:e._datatype})}(this,e);case 2:case 3:return function(e,r,t,n){if(!r||!0!==r.isIndex)throw new TypeError("Invalid index");var i,u=r.size(),a=r.isScalar();if(w(t)?(i=t.size(),t=t.toArray()):i=je(t),a){if(0!==i.length)throw new TypeError("Scalar expected");e.set(r.min(),t,n)}else{if(1!==u.length&&2!==u.length)throw new o(u.length,e._size.length,"<");if(i.length<u.length){for(var s=0,c=0;1===u[s]&&1===i[s];)s++;for(;1===u[s];)c++,s++;t=He(t,u.length,c,i)}if(!ue(u,i))throw new o(u,i,">");if(1===u.length)r.dimension(0).forEach((function(r,i){Le(r),e.set([r,0],t[i[0]],n)}));else{var f=r.dimension(0),l=r.dimension(1);f.forEach((function(r,i){Le(r),l.forEach((function(u,o){Le(u),e.set([r,u],t[i[0]][o[0]],n)}))}))}}return e}(this,e,r,t);default:throw new SyntaxError("Wrong number of arguments")}},i.prototype.get=function(e){if(!g(e))throw new TypeError("Array expected");if(e.length!==this._size.length)throw new o(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke get on a Pattern only matrix");var r=e[0],t=e[1];Le(r,this._size[0]),Le(t,this._size[1]);var n=a(r,this._ptr[t],this._ptr[t+1],this._index);return n<this._ptr[t+1]&&this._index[n]===r?this._values[n]:0},i.prototype.set=function(e,n,i){if(!g(e))throw new TypeError("Array expected");if(e.length!==this._size.length)throw new o(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke set on a Pattern only matrix");var u=e[0],f=e[1],l=this._size[0],p=this._size[1],d=t,h=0;y(this._datatype)&&(d=r.find(t,[this._datatype,this._datatype])||t,h=r.convert(0,this._datatype)),(u>l-1||f>p-1)&&(c(this,Math.max(u+1,l),Math.max(f+1,p),i),l=this._size[0],p=this._size[1]),Le(u,l),Le(f,p);var D=a(u,this._ptr[f],this._ptr[f+1],this._index);return D<this._ptr[f+1]&&this._index[D]===u?d(n,h)?function(e,r,t,n,i){t.splice(e,1),n.splice(e,1);for(var u=r+1;u<i.length;u++)i[u]--}(D,f,this._values,this._index,this._ptr):this._values[D]=n:d(n,h)||s(D,u,f,n,this._values,this._index,this._ptr),this},i.prototype.resize=function(e,r,t){if(!A(e))throw new TypeError("Array or Matrix expected");var n=e.valueOf().map((e=>Array.isArray(e)&&1===e.length?e[0]:e));if(2!==n.length)throw new Error("Only two dimensions matrix are supported");return n.forEach((function(e){if(!p(e)||!we(e)||e<0)throw new TypeError("Invalid size, must contain positive integers (size: "+Ie(n)+")")})),c(t?this.clone():this,n[0],n[1],r)},i.prototype.reshape=function(e,r){if(!g(e))throw new TypeError("Array expected");if(2!==e.length)throw new Error("Sparse matrices can only be reshaped in two dimensions");e.forEach((function(r){if(!p(r)||!we(r)||r<=-2||0===r)throw new TypeError("Invalid size, must contain positive integers or -1 (size: "+Ie(e)+")")}));var t=this._size[0]*this._size[1];if(t!==(e=Xe(e,t))[0]*e[1])throw new Error("Reshaping sparse matrix will result in the wrong number of elements");var n=r?this.clone():this;if(this._size[0]===e[0]&&this._size[1]===e[1])return n;for(var i=[],u=0;u<n._ptr.length;u++)for(var o=0;o<n._ptr[u+1]-n._ptr[u];o++)i.push(u);for(var c=n._values.slice(),f=n._index.slice(),l=0;l<n._index.length;l++){var d=f[l],h=i[l],D=d*n._size[1]+h;i[l]=D%e[1],f[l]=Math.floor(D/e[1])}n._values.length=0,n._index.length=0,n._ptr.length=e[1]+1,n._size=e.slice();for(var m=0;m<n._ptr.length;m++)n._ptr[m]=0;for(var v=0;v<c.length;v++){var y=f[v],w=i[v],A=c[v];s(a(y,n._ptr[w],n._ptr[w+1],n._index),y,w,A,n._values,n._index,n._ptr)}return n},i.prototype.clone=function(){return new i({values:this._values?te(this._values):void 0,index:te(this._index),ptr:te(this._ptr),size:te(this._size),datatype:this._datatype})},i.prototype.size=function(){return this._size.slice(0)},i.prototype.map=function(e,n){if(!this._values)throw new Error("Cannot invoke map on a Pattern only matrix");var u=this,o=this._size[0],a=this._size[1],s=or(e,u,"map");return function(e,n,o,a,c,f,l){var p=[],d=[],h=[],D=t,m=0;y(e._datatype)&&(D=r.find(t,[e._datatype,e._datatype])||t,m=r.convert(0,e._datatype));for(var v=function(e,r,t){var n=function(e,r,t){return s(e,[r,t],u)}(e,r,t);D(n,m)||(p.push(n),d.push(r))},g=0;g<=c;g++){h.push(p.length);var w=e._ptr[g],A=e._ptr[g+1];if(l)for(var E=w;E<A;E++){var x=e._index[E];x>=0&&x<=o&&v(e._values[E],x-0,g-0)}else{for(var F={},b=w;b<A;b++)F[e._index[b]]=e._values[b];for(var C=0;C<=o;C++)v(C in F?F[C]:0,C-0,g-0)}}return h.push(p.length),new i({values:p,index:d,ptr:h,size:[o-0+1,c-0+1]})}(this,0,o-1,0,a-1,0,n)},i.prototype.forEach=function(e,r){if(!this._values)throw new Error("Cannot invoke forEach on a Pattern only matrix");for(var t=this,n=this._size[0],i=this._size[1],u=or(e,t,"forEach"),o=0;o<i;o++){var a=this._ptr[o],s=this._ptr[o+1];if(r)for(var c=a;c<s;c++){var f=this._index[c];u(this._values[c],[f,o],t)}else{for(var l={},p=a;p<s;p++)l[this._index[p]]=this._values[p];for(var d=0;d<n;d++)u(d in l?l[d]:0,[d,o],t)}}},i.prototype[Symbol.iterator]=function*(){if(!this._values)throw new Error("Cannot iterate a Pattern only matrix");for(var e=this._size[1],r=0;r<e;r++)for(var t=this._ptr[r],n=this._ptr[r+1],i=t;i<n;i++){var u=this._index[i];yield{value:this._values[i],index:[u,r]}}},i.prototype.toArray=function(){return f(this._values,this._index,this._ptr,this._size,!0)},i.prototype.valueOf=function(){return f(this._values,this._index,this._ptr,this._size,!1)},i.prototype.format=function(e){for(var r=this._size[0],t=this._size[1],n=this.density(),i="Sparse Matrix ["+Ie(r,e)+" x "+Ie(t,e)+"] density: "+Ie(n,e)+"\n",u=0;u<t;u++)for(var o=this._ptr[u],a=this._ptr[u+1],s=o;s<a;s++)i+="\n    ("+Ie(this._index[s],e)+", "+Ie(u,e)+") ==> "+(this._values?Ie(this._values[s],e):"X");return i},i.prototype.toString=function(){return Ie(this.toArray())},i.prototype.toJSON=function(){return{mathjs:"SparseMatrix",values:this._values,index:this._index,ptr:this._ptr,size:this._size,datatype:this._datatype}},i.prototype.diagonal=function(e){if(e){if(d(e)&&(e=e.toNumber()),!p(e)||!we(e))throw new TypeError("The parameter k must be an integer number")}else e=0;var r=e>0?e:0,t=e<0?-e:0,n=this._size[0],u=this._size[1],o=Math.min(n-t,u-r),a=[],s=[],c=[];c[0]=0;for(var f=r;f<u&&a.length<o;f++)for(var l=this._ptr[f],h=this._ptr[f+1],D=l;D<h;D++){var m=this._index[D];if(m===f-r+t){a.push(this._values[D]),s[a.length-1]=m-t;break}}return c.push(a.length),new i({values:a,index:s,ptr:c,size:[o,1]})},i.fromJSON=function(e){return new i(e)},i.diagonal=function(e,n,u,o,a){if(!g(e))throw new TypeError("Array expected, size parameter");if(2!==e.length)throw new Error("Only two dimensions matrix are supported");if(e=e.map((function(e){if(d(e)&&(e=e.toNumber()),!p(e)||!we(e)||e<1)throw new Error("Size values must be positive integers");return e})),u){if(d(u)&&(u=u.toNumber()),!p(u)||!we(u))throw new TypeError("The parameter k must be an integer number")}else u=0;var s=t,c=0;y(a)&&(s=r.find(t,[a,a])||t,c=r.convert(0,a));var f,l=u>0?u:0,h=u<0?-u:0,D=e[0],m=e[1],v=Math.min(D-h,m-l);if(g(n)){if(n.length!==v)throw new Error("Invalid value array length");f=function(e){return n[e]}}else if(w(n)){var A=n.size();if(1!==A.length||A[0]!==v)throw new Error("Invalid matrix length");f=function(e){return n.get([e])}}else f=function(){return n};for(var E=[],x=[],F=[],b=0;b<m;b++){F.push(E.length);var C=b-l;if(C>=0&&C<v){var _=f(C);s(_,c)||(x.push(C+h),E.push(_))}}return F.push(E.length),new i({values:E,index:x,ptr:F,size:[D,m]})},i.prototype.swapRows=function(e,r){if(!(p(e)&&we(e)&&p(r)&&we(r)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return Le(e,this._size[0]),Le(r,this._size[0]),i._swapRows(e,r,this._size[1],this._values,this._index,this._ptr),this},i._forEachRow=function(e,r,t,n,i){for(var u=n[e],o=n[e+1],a=u;a<o;a++)i(t[a],r[a])},i._swapRows=function(e,r,t,n,i,u){for(var o=0;o<t;o++){var s=u[o],c=u[o+1],f=a(e,s,c,i),l=a(r,s,c,i);if(f<c&&l<c&&i[f]===e&&i[l]===r){if(n){var p=n[f];n[f]=n[l],n[l]=p}}else if(f<c&&i[f]===e&&(l>=c||i[l]!==r)){var d=n?n[f]:void 0;i.splice(l,0,r),n&&n.splice(l,0,d),i.splice(l<=f?f+1:f,1),n&&n.splice(l<=f?f+1:f,1)}else if(l<c&&i[l]===r&&(f>=c||i[f]!==e)){var h=n?n[l]:void 0;i.splice(f,0,e),n&&n.splice(f,0,h),i.splice(f<=l?l+1:l,1),n&&n.splice(f<=l?l+1:l,1)}}},i}),{isClass:!0}),bn={MatrixDependencies:ge,equalScalarDependencies:xn,typedDependencies:yn,createSparseMatrixClass:Fn},Cn="number",_n="number, number";function Mn(e){return Math.abs(e)}function Bn(e,r){return e+r}function Nn(e,r){return e-r}function Sn(e,r){return e*r}function Tn(e){return-e}function zn(e){return Ae(e)}function On(e,r){return e*e<1&&r===1/0||e*e>1&&r===-1/0?0:Math.pow(e,r)}Mn.signature=Cn,Bn.signature=_n,Nn.signature=_n,Sn.signature=_n,Tn.signature=Cn,zn.signature=Cn,On.signature=_n;var In="addScalar",kn={typedDependencies:yn,createAddScalar:fe(In,["typed"],(e=>{var{typed:r}=e;return r(In,{"number, number":Bn,"Complex, Complex":function(e,r){return e.add(r)},"BigNumber, BigNumber":function(e,r){return e.plus(r)},"bigint, bigint":function(e,r){return e+r},"Fraction, Fraction":function(e,r){return e.add(r)},"Unit, Unit":r.referToSelf((e=>(t,n)=>{if(null===t.value||void 0===t.value)throw new Error("Parameter x contains a unit with undefined value");if(null===n.value||void 0===n.value)throw new Error("Parameter y contains a unit with undefined value");if(!t.equalBase(n))throw new Error("Units do not match");var i=t.clone();return i.value=r.find(e,[i.valueType(),n.valueType()])(i.value,n.value),i.fixPrefix=!1,i}))})}))};function Pn(e,r,t){return e&&"function"==typeof e.map?e.map((function(e){return Pn(e,r,t)})):r(e)}var Rn="isInteger",jn={typedDependencies:yn,createIsInteger:fe(Rn,["typed"],(e=>{var{typed:r}=e;return r(Rn,{number:we,BigNumber:function(e){return e.isInt()},bigint:function(e){return!0},Fraction:function(e){return 1===e.d&&isFinite(e.n)},"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})}))},qn="matrix",Un=fe(qn,["typed","Matrix","DenseMatrix","SparseMatrix"],(e=>{var{typed:r,Matrix:t,DenseMatrix:n,SparseMatrix:i}=e;return r(qn,{"":function(){return u([])},string:function(e){return u([],e)},"string, string":function(e,r){return u([],e,r)},Array:function(e){return u(e)},Matrix:function(e){return u(e,e.storage())},"Array | Matrix, string":u,"Array | Matrix, string, string":u});function u(e,r,t){if("dense"===r||"default"===r||void 0===r)return new n(e,t);if("sparse"===r)return new i(e,t);throw new TypeError("Unknown matrix type "+JSON.stringify(r)+".")}})),Ln={DenseMatrixDependencies:lr,MatrixDependencies:ge,SparseMatrixDependencies:bn,typedDependencies:yn,createMatrix:Un},Zn="concat",Yn={isIntegerDependencies:jn,matrixDependencies:Ln,typedDependencies:yn,createConcat:fe(Zn,["typed","matrix","isInteger"],(e=>{var{typed:r,matrix:t,isInteger:n}=e;return r(Zn,{"...Array | Matrix | number | BigNumber":function(e){var r,i,u=e.length,s=-1,c=!1,f=[];for(r=0;r<u;r++){var l=e[r];if(w(l)&&(c=!0),p(l)||d(l)){if(r!==u-1)throw new Error("Dimension must be specified as last argument");if(i=s,s=l.valueOf(),!n(s))throw new TypeError("Integer number expected for dimension");if(s<0||r>0&&s>i)throw new a(s,i+1)}else{var h=te(l).valueOf(),D=je(h);if(f[r]=h,i=s,s=D.length-1,r>0&&s!==i)throw new o(i+1,s+1)}}if(0===f.length)throw new SyntaxError("At least one matrix expected");for(var m=f.shift();f.length;)m=rr(m,f.shift(),s);return c?t(m):m},"...string":function(e){return e.join("")}})}))},Wn=fe("matAlgo01xDSid",["typed"],(e=>{var{typed:r}=e;return function(e,t,n,i){var u=e._data,a=e._size,s=e._datatype||e.getDataType(),c=t._values,f=t._index,l=t._ptr,p=t._size,d=t._datatype||void 0===t._data?t._datatype:t.getDataType();if(a.length!==p.length)throw new o(a.length,p.length);if(a[0]!==p[0]||a[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+p+")");if(!c)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var h,D,m=a[0],v=a[1],y="string"==typeof s&&"mixed"!==s&&s===d?s:void 0,g=y?r.find(n,[y,y]):n,w=[];for(h=0;h<m;h++)w[h]=[];var A=[],E=[];for(D=0;D<v;D++){for(var x=D+1,F=l[D],b=l[D+1],C=F;C<b;C++)A[h=f[C]]=i?g(c[C],u[h][D]):g(u[h][D],c[C]),E[h]=x;for(h=0;h<m;h++)E[h]===x?w[h][D]=A[h]:w[h][D]=u[h][D]}return e.createDenseMatrix({data:w,size:[m,v],datatype:s===e._datatype&&d===t._datatype?y:void 0})}})),Xn=fe("matAlgo04xSidSid",["typed","equalScalar"],(e=>{var{typed:r,equalScalar:t}=e;return function(e,n,i){var u=e._values,a=e._index,s=e._ptr,c=e._size,f=e._datatype||void 0===e._data?e._datatype:e.getDataType(),l=n._values,p=n._index,d=n._ptr,h=n._size,D=n._datatype||void 0===n._data?n._datatype:n.getDataType();if(c.length!==h.length)throw new o(c.length,h.length);if(c[0]!==h[0]||c[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+c+") must match Matrix B ("+h+")");var m,v=c[0],y=c[1],g=t,w=0,A=i;"string"==typeof f&&f===D&&"mixed"!==f&&(m=f,g=r.find(t,[m,m]),w=r.convert(0,m),A=r.find(i,[m,m]));var E,x,F,b,C,_=u&&l?[]:void 0,M=[],B=[],N=u&&l?[]:void 0,S=u&&l?[]:void 0,T=[],z=[];for(x=0;x<y;x++){B[x]=M.length;var O=x+1;for(b=s[x],C=s[x+1],F=b;F<C;F++)E=a[F],M.push(E),T[E]=O,N&&(N[E]=u[F]);for(b=d[x],C=d[x+1],F=b;F<C;F++)if(T[E=p[F]]===O){if(N){var I=A(N[E],l[F]);g(I,w)?T[E]=null:N[E]=I}}else M.push(E),z[E]=O,S&&(S[E]=l[F]);if(N&&S)for(F=B[x];F<M.length;)T[E=M[F]]===O?(_[F]=N[E],F++):z[E]===O?(_[F]=S[E],F++):M.splice(F,1)}return B[y]=M.length,e.createSparseMatrix({values:_,index:M,ptr:B,size:[v,y],datatype:f===e._datatype&&D===n._datatype?m:void 0})}})),Vn=fe("matAlgo10xSids",["typed","DenseMatrix"],(e=>{var{typed:r,DenseMatrix:t}=e;return function(e,n,i,u){var o=e._values,a=e._index,s=e._ptr,c=e._size,f=e._datatype;if(!o)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],d=c[1],h=i;"string"==typeof f&&(l=f,n=r.convert(n,l),h=r.find(i,[l,l]));for(var D=[],m=[],v=[],y=0;y<d;y++){for(var g=y+1,w=s[y],A=s[y+1],E=w;E<A;E++){var x=a[E];m[x]=o[E],v[x]=g}for(var F=0;F<p;F++)0===y&&(D[F]=[]),v[F]===g?D[F][y]=u?h(n,m[F]):h(m[F],n):D[F][y]=n}return new t({data:D,size:[p,d],datatype:l})}})),Gn=fe("matAlgo13xDD",["typed"],(e=>{var{typed:r}=e;return function(e,n,i){var u,a=e._data,s=e._size,c=e._datatype,f=n._data,l=n._size,p=n._datatype,d=[];if(s.length!==l.length)throw new o(s.length,l.length);for(var h=0;h<s.length;h++){if(s[h]!==l[h])throw new RangeError("Dimension mismatch. Matrix A ("+s+") must match Matrix B ("+l+")");d[h]=s[h]}var D=i;"string"==typeof c&&c===p&&(u=c,D=r.find(i,[u,u]));var m=d.length>0?t(D,0,d,d[0],a,f):[];return e.createDenseMatrix({data:m,size:d,datatype:u})};function t(e,r,n,i,u,o){var a=[];if(r===n.length-1)for(var s=0;s<i;s++)a[s]=e(u[s],o[s]);else for(var c=0;c<i;c++)a[c]=t(e,r+1,n,n[r+1],u[c],o[c]);return a}})),Jn=fe("matAlgo14xDs",["typed"],(e=>{var{typed:r}=e;return function(e,n,i,u){var o,a=e._data,s=e._size,c=e._datatype,f=i;"string"==typeof c&&(o=c,n=r.convert(n,o),f=r.find(i,[o,o]));var l=s.length>0?t(f,0,s,s[0],a,n,u):[];return e.createDenseMatrix({data:l,size:te(s),datatype:o})};function t(e,r,n,i,u,o,a){var s=[];if(r===n.length-1)for(var c=0;c<i;c++)s[c]=a?e(o,u[c]):e(u[c],o);else for(var f=0;f<i;f++)s[f]=t(e,r+1,n,n[r+1],u[f],o,a);return s}}));function Hn(e,r){if(ue(e.size(),r.size()))return[e,r];var t=tr(e.size(),r.size());return[e,r].map((e=>function(e,r){return ue(e.size(),r)?e:e.create(ir(e.valueOf(),r),e.datatype())}(e,t)))}var Kn=fe("matrixAlgorithmSuite",["typed","matrix"],(e=>{var{typed:r,matrix:t}=e,n=Gn({typed:r}),i=Jn({typed:r});return function(e){var u,o=e.elop,a=e.SD||e.DS;o?(u={"DenseMatrix, DenseMatrix":(e,r)=>n(...Hn(e,r),o),"Array, Array":(e,r)=>n(...Hn(t(e),t(r)),o).valueOf(),"Array, DenseMatrix":(e,r)=>n(...Hn(t(e),r),o),"DenseMatrix, Array":(e,r)=>n(...Hn(e,t(r)),o)},e.SS&&(u["SparseMatrix, SparseMatrix"]=(r,t)=>e.SS(...Hn(r,t),o,!1)),e.DS&&(u["DenseMatrix, SparseMatrix"]=(r,t)=>e.DS(...Hn(r,t),o,!1),u["Array, SparseMatrix"]=(r,n)=>e.DS(...Hn(t(r),n),o,!1)),a&&(u["SparseMatrix, DenseMatrix"]=(e,r)=>a(...Hn(r,e),o,!0),u["SparseMatrix, Array"]=(e,r)=>a(...Hn(t(r),e),o,!0))):(u={"DenseMatrix, DenseMatrix":r.referToSelf((e=>(r,t)=>n(...Hn(r,t),e))),"Array, Array":r.referToSelf((e=>(r,i)=>n(...Hn(t(r),t(i)),e).valueOf())),"Array, DenseMatrix":r.referToSelf((e=>(r,i)=>n(...Hn(t(r),i),e))),"DenseMatrix, Array":r.referToSelf((e=>(r,i)=>n(...Hn(r,t(i)),e)))},e.SS&&(u["SparseMatrix, SparseMatrix"]=r.referToSelf((r=>(t,n)=>e.SS(...Hn(t,n),r,!1)))),e.DS&&(u["DenseMatrix, SparseMatrix"]=r.referToSelf((r=>(t,n)=>e.DS(...Hn(t,n),r,!1))),u["Array, SparseMatrix"]=r.referToSelf((r=>(n,i)=>e.DS(...Hn(t(n),i),r,!1)))),a&&(u["SparseMatrix, DenseMatrix"]=r.referToSelf((e=>(r,t)=>a(...Hn(t,r),e,!0))),u["SparseMatrix, Array"]=r.referToSelf((e=>(r,n)=>a(...Hn(t(n),r),e,!0)))));var s=e.scalar||"any";(e.Ds||e.Ss)&&(o?(u["DenseMatrix,"+s]=(e,r)=>i(e,r,o,!1),u[s+", DenseMatrix"]=(e,r)=>i(r,e,o,!0),u["Array,"+s]=(e,r)=>i(t(e),r,o,!1).valueOf(),u[s+", Array"]=(e,r)=>i(t(r),e,o,!0).valueOf()):(u["DenseMatrix,"+s]=r.referToSelf((e=>(r,t)=>i(r,t,e,!1))),u[s+", DenseMatrix"]=r.referToSelf((e=>(r,t)=>i(t,r,e,!0))),u["Array,"+s]=r.referToSelf((e=>(r,n)=>i(t(r),n,e,!1).valueOf())),u[s+", Array"]=r.referToSelf((e=>(r,n)=>i(t(n),r,e,!0).valueOf()))));var c=void 0!==e.sS?e.sS:e.Ss;return o?(e.Ss&&(u["SparseMatrix,"+s]=(r,t)=>e.Ss(r,t,o,!1)),c&&(u[s+", SparseMatrix"]=(e,r)=>c(r,e,o,!0))):(e.Ss&&(u["SparseMatrix,"+s]=r.referToSelf((r=>(t,n)=>e.Ss(t,n,r,!1)))),c&&(u[s+", SparseMatrix"]=r.referToSelf((e=>(r,t)=>c(t,r,e,!0))))),o&&o.signatures&&ne(u,o.signatures),u}})),$n=fe("add",["typed","matrix","addScalar","equalScalar","DenseMatrix","SparseMatrix","concat"],(e=>{var{typed:r,matrix:t,addScalar:n,equalScalar:i,DenseMatrix:u,SparseMatrix:o,concat:a}=e,s=Wn({typed:r}),c=Xn({typed:r,equalScalar:i}),f=Vn({typed:r,DenseMatrix:u}),l=Kn({typed:r,matrix:t,concat:a});return r("add",{"any, any":n,"any, any, ...any":r.referToSelf((e=>(r,t,n)=>{for(var i=e(r,t),u=0;u<n.length;u++)i=e(i,n[u]);return i}))},l({elop:n,DS:s,SS:c,Ss:f}))})),Qn={DenseMatrixDependencies:lr,SparseMatrixDependencies:bn,addScalarDependencies:kn,concatDependencies:Yn,equalScalarDependencies:xn,matrixDependencies:Ln,typedDependencies:yn,createAdd:$n},ei="subtractScalar",ri={typedDependencies:yn,createSubtractScalar:fe(ei,["typed"],(e=>{var{typed:r}=e;return r(ei,{"number, number":Nn,"Complex, Complex":function(e,r){return e.sub(r)},"BigNumber, BigNumber":function(e,r){return e.minus(r)},"bigint, bigint":function(e,r){return e-r},"Fraction, Fraction":function(e,r){return e.sub(r)},"Unit, Unit":r.referToSelf((e=>(t,n)=>{if(null===t.value||void 0===t.value)throw new Error("Parameter x contains a unit with undefined value");if(null===n.value||void 0===n.value)throw new Error("Parameter y contains a unit with undefined value");if(!t.equalBase(n))throw new Error("Units do not match");var i=t.clone();return i.value=r.find(e,[i.valueType(),n.valueType()])(i.value,n.value),i.fixPrefix=!1,i}))})}))},ti="unaryMinus",ni={typedDependencies:yn,createUnaryMinus:fe(ti,["typed"],(e=>{var{typed:r}=e;return r(ti,{number:Tn,"Complex | BigNumber | Fraction":e=>e.neg(),bigint:e=>-e,Unit:r.referToSelf((e=>t=>{var n=t.clone();return n.value=r.find(e,n.valueType())(t.value),n})),"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e,!0)))})}))},ii=fe("matAlgo03xDSf",["typed"],(e=>{var{typed:r}=e;return function(e,t,n,i){var u=e._data,a=e._size,s=e._datatype||e.getDataType(),c=t._values,f=t._index,l=t._ptr,p=t._size,d=t._datatype||void 0===t._data?t._datatype:t.getDataType();if(a.length!==p.length)throw new o(a.length,p.length);if(a[0]!==p[0]||a[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+p+")");if(!c)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var h,D=a[0],m=a[1],v=0,y=n;"string"==typeof s&&s===d&&"mixed"!==s&&(h=s,v=r.convert(0,h),y=r.find(n,[h,h]));for(var g=[],w=0;w<D;w++)g[w]=[];for(var A=[],E=[],x=0;x<m;x++){for(var F=x+1,b=l[x],C=l[x+1],_=b;_<C;_++){var M=f[_];A[M]=i?y(c[_],u[M][x]):y(u[M][x],c[_]),E[M]=F}for(var B=0;B<D;B++)E[B]===F?g[B][x]=A[B]:g[B][x]=i?y(v,u[B][x]):y(u[B][x],v)}return e.createDenseMatrix({data:g,size:[D,m],datatype:s===e._datatype&&d===t._datatype?h:void 0})}})),ui=fe("matAlgo05xSfSf",["typed","equalScalar"],(e=>{var{typed:r,equalScalar:t}=e;return function(e,n,i){var u=e._values,a=e._index,s=e._ptr,c=e._size,f=e._datatype||void 0===e._data?e._datatype:e.getDataType(),l=n._values,p=n._index,d=n._ptr,h=n._size,D=n._datatype||void 0===n._data?n._datatype:n.getDataType();if(c.length!==h.length)throw new o(c.length,h.length);if(c[0]!==h[0]||c[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+c+") must match Matrix B ("+h+")");var m,v=c[0],y=c[1],g=t,w=0,A=i;"string"==typeof f&&f===D&&"mixed"!==f&&(m=f,g=r.find(t,[m,m]),w=r.convert(0,m),A=r.find(i,[m,m]));var E,x,F,b,C=u&&l?[]:void 0,_=[],M=[],B=C?[]:void 0,N=C?[]:void 0,S=[],T=[];for(x=0;x<y;x++){M[x]=_.length;var z=x+1;for(F=s[x],b=s[x+1];F<b;F++)E=a[F],_.push(E),S[E]=z,B&&(B[E]=u[F]);for(F=d[x],b=d[x+1];F<b;F++)S[E=p[F]]!==z&&_.push(E),T[E]=z,N&&(N[E]=l[F]);if(C)for(F=M[x];F<_.length;){var O=S[E=_[F]],I=T[E];if(O===z||I===z){var k=A(O===z?B[E]:w,I===z?N[E]:w);g(k,w)?_.splice(F,1):(C.push(k),F++)}}}return M[y]=_.length,e.createSparseMatrix({values:C,index:_,ptr:M,size:[v,y],datatype:f===e._datatype&&D===n._datatype?m:void 0})}})),oi=fe("matAlgo12xSfs",["typed","DenseMatrix"],(e=>{var{typed:r,DenseMatrix:t}=e;return function(e,n,i,u){var o=e._values,a=e._index,s=e._ptr,c=e._size,f=e._datatype;if(!o)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],d=c[1],h=i;"string"==typeof f&&(l=f,n=r.convert(n,l),h=r.find(i,[l,l]));for(var D=[],m=[],v=[],y=0;y<d;y++){for(var g=y+1,w=s[y],A=s[y+1],E=w;E<A;E++){var x=a[E];m[x]=o[E],v[x]=g}for(var F=0;F<p;F++)0===y&&(D[F]=[]),v[F]===g?D[F][y]=u?h(n,m[F]):h(m[F],n):D[F][y]=u?h(n,0):h(0,n)}return new t({data:D,size:[p,d],datatype:l})}})),ai="subtract",si=fe(ai,["typed","matrix","equalScalar","subtractScalar","unaryMinus","DenseMatrix","concat"],(e=>{var{typed:r,matrix:t,equalScalar:n,subtractScalar:i,unaryMinus:u,DenseMatrix:o,concat:a}=e,s=Wn({typed:r}),c=ii({typed:r}),f=ui({typed:r,equalScalar:n}),l=Vn({typed:r,DenseMatrix:o}),p=oi({typed:r,DenseMatrix:o}),d=Kn({typed:r,matrix:t,concat:a});return r(ai,{"any, any":i},d({elop:i,SS:f,DS:s,SD:c,Ss:p,sS:l}))})),ci={DenseMatrixDependencies:lr,concatDependencies:Yn,equalScalarDependencies:xn,matrixDependencies:Ln,subtractScalarDependencies:ri,typedDependencies:yn,unaryMinusDependencies:ni,createSubtract:si},fi="conj",li={typedDependencies:yn,createConj:fe(fi,["typed"],(e=>{var{typed:r}=e;return r(fi,{"number | BigNumber | Fraction":e=>e,Complex:e=>e.conjugate(),"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})}))},pi={typedDependencies:yn,createMultiplyScalar:fe("multiplyScalar",["typed"],(e=>{var{typed:r}=e;return r("multiplyScalar",{"number, number":Sn,"Complex, Complex":function(e,r){return e.mul(r)},"BigNumber, BigNumber":function(e,r){return e.times(r)},"bigint, bigint":function(e,r){return e*r},"Fraction, Fraction":function(e,r){return e.mul(r)},"number | Fraction | BigNumber | Complex, Unit":(e,r)=>r.multiply(e),"Unit, number | Fraction | BigNumber | Complex | Unit":(e,r)=>e.multiply(r)})}))};function di(){throw new Error('No "bignumber" implementation available')}function hi(){throw new Error('No "fraction" implementation available')}function Di(){throw new Error('No "matrix" implementation available')}var mi="size",vi=fe(mi,["typed","config","?matrix"],(e=>{var{typed:r,config:t,matrix:n}=e;return r(mi,{Matrix:function(e){return e.create(e.size(),"number")},Array:je,string:function(e){return"Array"===t.matrix?[e.length]:n([e.length],"dense","number")},"number | Complex | BigNumber | Unit | boolean | null":function(e){return"Array"===t.matrix?[]:n?n([],"dense","number"):Di()}})})),yi={matrixDependencies:Ln,typedDependencies:yn,createSize:vi},gi=fe("dot",["typed","addScalar","multiplyScalar","conj","size"],(e=>{var{typed:r,addScalar:t,multiplyScalar:n,conj:i,size:u}=e;return r("dot",{"Array | DenseMatrix, Array | DenseMatrix":function(e,u){var s=o(e,u),c=w(e)?e._data:e,f=w(e)?e._datatype||e.getDataType():void 0,l=w(u)?u._data:u,p=w(u)?u._datatype||u.getDataType():void 0,d=2===a(e).length,h=2===a(u).length,D=t,m=n;if(f&&p&&f===p&&"string"==typeof f&&"mixed"!==f){var v=f;D=r.find(t,[v,v]),m=r.find(n,[v,v])}if(!d&&!h){for(var y=m(i(c[0]),l[0]),g=1;g<s;g++)y=D(y,m(i(c[g]),l[g]));return y}if(!d&&h){for(var A=m(i(c[0]),l[0][0]),E=1;E<s;E++)A=D(A,m(i(c[E]),l[E][0]));return A}if(d&&!h){for(var x=m(i(c[0][0]),l[0]),F=1;F<s;F++)x=D(x,m(i(c[F][0]),l[F]));return x}if(d&&h){for(var b=m(i(c[0][0]),l[0][0]),C=1;C<s;C++)b=D(b,m(i(c[C][0]),l[C][0]));return b}},"SparseMatrix, SparseMatrix":function(e,r){o(e,r);for(var i=e._index,u=e._values,a=r._index,s=r._values,c=0,f=t,l=n,p=0,d=0;p<i.length&&d<a.length;){var h=i[p],D=a[d];h<D?p++:h>D?d++:h===D&&(c=f(c,l(u[p],s[d])),p++,d++)}return c}});function o(e,r){var t,n,i=a(e),u=a(r);if(1===i.length)t=i[0];else{if(2!==i.length||1!==i[1])throw new RangeError("Expected a column vector, instead got a matrix of size ("+i.join(", ")+")");t=i[0]}if(1===u.length)n=u[0];else{if(2!==u.length||1!==u[1])throw new RangeError("Expected a column vector, instead got a matrix of size ("+u.join(", ")+")");n=u[0]}if(t!==n)throw new RangeError("Vectors must have equal length ("+t+" != "+n+")");if(0===t)throw new RangeError("Cannot calculate the dot product of empty vectors");return t}function a(e){return w(e)?e.size():u(e)}})),wi={addScalarDependencies:kn,conjDependencies:li,multiplyScalarDependencies:pi,sizeDependencies:yi,typedDependencies:yn,createDot:gi},Ai=fe("matAlgo11xS0s",["typed","equalScalar"],(e=>{var{typed:r,equalScalar:t}=e;return function(e,n,i,u){var o=e._values,a=e._index,s=e._ptr,c=e._size,f=e._datatype;if(!o)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],d=c[1],h=t,D=0,m=i;"string"==typeof f&&(l=f,h=r.find(t,[l,l]),D=r.convert(0,l),n=r.convert(n,l),m=r.find(i,[l,l]));for(var v=[],y=[],g=[],w=0;w<d;w++){g[w]=y.length;for(var A=s[w],E=s[w+1],x=A;x<E;x++){var F=a[x],b=u?m(n,o[x]):m(o[x],n);h(b,D)||(y.push(F),v.push(b))}}return g[d]=y.length,e.createSparseMatrix({values:v,index:y,ptr:g,size:[p,d],datatype:l})}})),Ei="multiply",xi=fe(Ei,["typed","matrix","addScalar","multiplyScalar","equalScalar","dot"],(e=>{var{typed:r,matrix:t,addScalar:n,multiplyScalar:i,equalScalar:u,dot:o}=e,a=Ai({typed:r,equalScalar:u}),s=Jn({typed:r});function c(e,r){switch(e.length){case 1:switch(r.length){case 1:if(e[0]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");break;case 2:if(e[0]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Vector length ("+e[0]+") must match Matrix rows ("+r[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+r.length+" dimensions)")}break;case 2:switch(r.length){case 1:if(e[1]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Matrix columns ("+e[1]+") must match Vector length ("+r[0]+")");break;case 2:if(e[1]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Matrix A columns ("+e[1]+") must match Matrix B rows ("+r[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+r.length+" dimensions)")}break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has "+e.length+" dimensions)")}}var f=r("_multiplyMatrixVector",{"DenseMatrix, any":function(e,t){var u,o=e._data,a=e._size,s=e._datatype||e.getDataType(),c=t._data,f=t._datatype||t.getDataType(),l=a[0],p=a[1],d=n,h=i;s&&f&&s===f&&"string"==typeof s&&"mixed"!==s&&(u=s,d=r.find(n,[u,u]),h=r.find(i,[u,u]));for(var D=[],m=0;m<l;m++){for(var v=o[m],y=h(v[0],c[0]),g=1;g<p;g++)y=d(y,h(v[g],c[g]));D[m]=y}return e.createDenseMatrix({data:D,size:[l],datatype:s===e._datatype&&f===t._datatype?u:void 0})},"SparseMatrix, any":function(e,t){var o=e._values,a=e._index,s=e._ptr,c=e._datatype||void 0===e._data?e._datatype:e.getDataType();if(!o)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var f,l=t._data,p=t._datatype||t.getDataType(),d=e._size[0],h=t._size[0],D=[],m=[],v=[],y=n,g=i,w=u,A=0;c&&p&&c===p&&"string"==typeof c&&"mixed"!==c&&(f=c,y=r.find(n,[f,f]),g=r.find(i,[f,f]),w=r.find(u,[f,f]),A=r.convert(0,f));var E=[],x=[];v[0]=0;for(var F=0;F<h;F++){var b=l[F];if(!w(b,A))for(var C=s[F],_=s[F+1],M=C;M<_;M++){var B=a[M];x[B]?E[B]=y(E[B],g(b,o[M])):(x[B]=!0,m.push(B),E[B]=g(b,o[M]))}}for(var N=m.length,S=0;S<N;S++){var T=m[S];D[S]=E[T]}return v[1]=m.length,e.createSparseMatrix({values:D,index:m,ptr:v,size:[d,1],datatype:c===e._datatype&&p===t._datatype?f:void 0})}}),l=r("_multiplyMatrixMatrix",{"DenseMatrix, DenseMatrix":function(e,t){var u,o=e._data,a=e._size,s=e._datatype||e.getDataType(),c=t._data,f=t._size,l=t._datatype||t.getDataType(),p=a[0],d=a[1],h=f[1],D=n,m=i;s&&l&&s===l&&"string"==typeof s&&"mixed"!==s&&"mixed"!==s&&(u=s,D=r.find(n,[u,u]),m=r.find(i,[u,u]));for(var v=[],y=0;y<p;y++){var g=o[y];v[y]=[];for(var w=0;w<h;w++){for(var A=m(g[0],c[0][w]),E=1;E<d;E++)A=D(A,m(g[E],c[E][w]));v[y][w]=A}}return e.createDenseMatrix({data:v,size:[p,h],datatype:s===e._datatype&&l===t._datatype?u:void 0})},"DenseMatrix, SparseMatrix":function(e,t){var o=e._data,a=e._size,s=e._datatype||e.getDataType(),c=t._values,f=t._index,l=t._ptr,p=t._size,d=t._datatype||void 0===t._data?t._datatype:t.getDataType();if(!c)throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");var h,D=a[0],m=p[1],v=n,y=i,g=u,w=0;s&&d&&s===d&&"string"==typeof s&&"mixed"!==s&&(h=s,v=r.find(n,[h,h]),y=r.find(i,[h,h]),g=r.find(u,[h,h]),w=r.convert(0,h));for(var A=[],E=[],x=[],F=t.createSparseMatrix({values:A,index:E,ptr:x,size:[D,m],datatype:s===e._datatype&&d===t._datatype?h:void 0}),b=0;b<m;b++){x[b]=E.length;var C=l[b],_=l[b+1];if(_>C)for(var M=0,B=0;B<D;B++){for(var N=B+1,S=void 0,T=C;T<_;T++){var z=f[T];M!==N?(S=y(o[B][z],c[T]),M=N):S=v(S,y(o[B][z],c[T]))}M!==N||g(S,w)||(E.push(B),A.push(S))}}return x[m]=E.length,F},"SparseMatrix, DenseMatrix":function(e,t){var o=e._values,a=e._index,s=e._ptr,c=e._datatype||void 0===e._data?e._datatype:e.getDataType();if(!o)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var f,l=t._data,p=t._datatype||t.getDataType(),d=e._size[0],h=t._size[0],D=t._size[1],m=n,v=i,y=u,g=0;c&&p&&c===p&&"string"==typeof c&&"mixed"!==c&&(f=c,m=r.find(n,[f,f]),v=r.find(i,[f,f]),y=r.find(u,[f,f]),g=r.convert(0,f));for(var w=[],A=[],E=[],x=e.createSparseMatrix({values:w,index:A,ptr:E,size:[d,D],datatype:c===e._datatype&&p===t._datatype?f:void 0}),F=[],b=[],C=0;C<D;C++){E[C]=A.length;for(var _=C+1,M=0;M<h;M++){var B=l[M][C];if(!y(B,g))for(var N=s[M],S=s[M+1],T=N;T<S;T++){var z=a[T];b[z]!==_?(b[z]=_,A.push(z),F[z]=v(B,o[T])):F[z]=m(F[z],v(B,o[T]))}}for(var O=E[C],I=A.length,k=O;k<I;k++){var P=A[k];w[k]=F[P]}}return E[D]=A.length,x},"SparseMatrix, SparseMatrix":function(e,t){var u,o=e._values,a=e._index,s=e._ptr,c=e._datatype||void 0===e._data?e._datatype:e.getDataType(),f=t._values,l=t._index,p=t._ptr,d=t._datatype||void 0===t._data?t._datatype:t.getDataType(),h=e._size[0],D=t._size[1],m=o&&f,v=n,y=i;c&&d&&c===d&&"string"==typeof c&&"mixed"!==c&&(u=c,v=r.find(n,[u,u]),y=r.find(i,[u,u]));for(var g,w,A,E,x,F,b,C,_=m?[]:void 0,M=[],B=[],N=e.createSparseMatrix({values:_,index:M,ptr:B,size:[h,D],datatype:c===e._datatype&&d===t._datatype?u:void 0}),S=m?[]:void 0,T=[],z=0;z<D;z++){B[z]=M.length;var O=z+1;for(x=p[z],F=p[z+1],E=x;E<F;E++)if(C=l[E],m)for(w=s[C],A=s[C+1],g=w;g<A;g++)T[b=a[g]]!==O?(T[b]=O,M.push(b),S[b]=y(f[E],o[g])):S[b]=v(S[b],y(f[E],o[g]));else for(w=s[C],A=s[C+1],g=w;g<A;g++)T[b=a[g]]!==O&&(T[b]=O,M.push(b));if(m)for(var I=B[z],k=M.length,P=I;P<k;P++){var R=M[P];_[P]=S[R]}}return B[D]=M.length,N}});return r(Ei,i,{"Array, Array":r.referTo("Matrix, Matrix",(e=>(r,n)=>{c(je(r),je(n));var i=e(t(r),t(n));return w(i)?i.valueOf():i})),"Matrix, Matrix":function(e,t){var u=e.size(),a=t.size();return c(u,a),1===u.length?1===a.length?function(e,r,t){if(0===t)throw new Error("Cannot multiply two empty vectors");return o(e,r)}(e,t,u[0]):function(e,t){if("dense"!==t.storage())throw new Error("Support for SparseMatrix not implemented");return function(e,t){var u,o=e._data,a=e._size,s=e._datatype||e.getDataType(),c=t._data,f=t._size,l=t._datatype||t.getDataType(),p=a[0],d=f[1],h=n,D=i;s&&l&&s===l&&"string"==typeof s&&"mixed"!==s&&(u=s,h=r.find(n,[u,u]),D=r.find(i,[u,u]));for(var m=[],v=0;v<d;v++){for(var y=D(o[0],c[0][v]),g=1;g<p;g++)y=h(y,D(o[g],c[g][v]));m[v]=y}return e.createDenseMatrix({data:m,size:[d],datatype:s===e._datatype&&l===t._datatype?u:void 0})}(e,t)}(e,t):1===a.length?f(e,t):l(e,t)},"Matrix, Array":r.referTo("Matrix,Matrix",(e=>(r,n)=>e(r,t(n)))),"Array, Matrix":r.referToSelf((e=>(r,n)=>e(t(r,n.storage()),n))),"SparseMatrix, any":function(e,r){return a(e,r,i,!1)},"DenseMatrix, any":function(e,r){return s(e,r,i,!1)},"any, SparseMatrix":function(e,r){return a(r,e,i,!0)},"any, DenseMatrix":function(e,r){return s(r,e,i,!0)},"Array, any":function(e,r){return s(t(e),r,i,!1).valueOf()},"any, Array":function(e,r){return s(t(r),e,i,!0).valueOf()},"any, any":i,"any, any, ...any":r.referToSelf((e=>(r,t,n)=>{for(var i=e(r,t),u=0;u<n.length;u++)i=e(i,n[u]);return i}))})})),Fi={addScalarDependencies:kn,dotDependencies:wi,equalScalarDependencies:xn,matrixDependencies:Ln,multiplyScalarDependencies:pi,typedDependencies:yn,createMultiply:xi},bi=fe("bignumber",["typed","BigNumber"],(e=>{var{typed:r,BigNumber:t}=e;return r("bignumber",{"":function(){return new t(0)},number:function(e){return new t(e+"")},string:function(e){var r=e.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);if(r){var n=r[2],i=t(r[1]),u=new t(2).pow(Number(n));if(i.gt(u.sub(1)))throw new SyntaxError('String "'.concat(e,'" is out of range'));var o=new t(2).pow(Number(n)-1);return i.gte(o)?i.sub(u):i}return new t(e)},BigNumber:function(e){return e},bigint:function(e){return new t(e.toString())},Unit:r.referToSelf((e=>r=>{var t=r.clone();return t.value=e(r.value),t})),Fraction:function(e){return new t(e.n).div(e.d).times(e.s)},null:function(e){return new t(0)},"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})})),Ci={BigNumberDependencies:Gt,typedDependencies:yn,createBignumber:bi},_i=fe("fraction",["typed","Fraction"],(e=>{var{typed:r,Fraction:t}=e;return r("fraction",{number:function(e){if(!isFinite(e)||isNaN(e))throw new Error(e+" cannot be represented as a fraction");return new t(e)},string:function(e){return new t(e)},"number, number":function(e,r){return new t(e,r)},null:function(e){return new t(0)},BigNumber:function(e){return new t(e.toString())},bigint:function(e){return new t(e.toString())},Fraction:function(e){return e},Unit:r.referToSelf((e=>r=>{var t=r.clone();return t.value=e(r.value),t})),Object:function(e){return new t(e)},"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})})),Mi={FractionDependencies:pn,typedDependencies:yn,createFraction:_i},Bi=fe("number",["typed"],(e=>{var{typed:r}=e,t=r("number",{"":function(){return 0},number:function(e){return e},string:function(e){if("NaN"===e)return NaN;var r,t,n=(t=(r=e).match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/))?{input:r,radix:{"0b":2,"0o":8,"0x":16}[t[1]],integerPart:t[2],fractionalPart:t[3]}:null;if(n)return function(e){for(var r=parseInt(e.integerPart,e.radix),t=0,n=0;n<e.fractionalPart.length;n++)t+=parseInt(e.fractionalPart[n],e.radix)/Math.pow(e.radix,n+1);var i=r+t;if(isNaN(i))throw new SyntaxError('String "'+e.input+'" is not a valid number');return i}(n);var i=0,u=e.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);u&&(i=Number(u[2]),e=u[1]);var o=Number(e);if(isNaN(o))throw new SyntaxError('String "'+e+'" is not a valid number');if(u){if(o>2**i-1)throw new SyntaxError('String "'.concat(e,'" is out of range'));o>=2**(i-1)&&(o-=2**i)}return o},BigNumber:function(e){return e.toNumber()},bigint:function(e){return Number(e)},Fraction:function(e){return e.valueOf()},Unit:r.referToSelf((e=>r=>{var t=r.clone();return t.value=e(r.value),t})),null:function(e){return 0},"Unit, string | Unit":function(e,r){return e.toNumber(r)},"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))});return t.fromJSON=function(e){return parseFloat(e.value)},t})),Ni={typedDependencies:yn,createNumber:Bi},Si="divideScalar",Ti={numericDependencies:{bignumberDependencies:Ci,fractionDependencies:Mi,numberDependencies:Ni,createNumeric:fe("numeric",["number","?bignumber","?fraction"],(e=>{var{number:r,bignumber:t,fraction:n}=e,i={string:!0,number:!0,BigNumber:!0,Fraction:!0},u={number:e=>r(e),BigNumber:t?e=>t(e):di,bigint:e=>BigInt(e),Fraction:n?e=>n(e):hi};return function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"number";if(void 0!==(arguments.length>2?arguments[2]:void 0))throw new SyntaxError("numeric() takes one or two arguments");var t=re(e);if(!(t in i))throw new TypeError("Cannot convert "+e+' of type "'+t+'"; valid input types are '+Object.keys(i).join(", "));if(!(r in u))throw new TypeError("Cannot convert "+e+' to type "'+r+'"; valid output types are '+Object.keys(u).join(", "));return r===t?e:u[r](e)}}))},typedDependencies:yn,createDivideScalar:fe(Si,["typed","numeric"],(e=>{var{typed:r,numeric:t}=e;return r(Si,{"number, number":function(e,r){return e/r},"Complex, Complex":function(e,r){return e.div(r)},"BigNumber, BigNumber":function(e,r){return e.div(r)},"bigint, bigint":function(e,r){return e/r},"Fraction, Fraction":function(e,r){return e.div(r)},"Unit, number | Complex | Fraction | BigNumber | Unit":(e,r)=>e.divide(r),"number | Fraction | Complex | BigNumber, Unit":(e,r)=>r.divideInto(e)})}))},zi={typedDependencies:yn,createAbs:fe("abs",["typed"],(e=>{var{typed:r}=e;return r("abs",{number:Mn,"Complex | BigNumber | Fraction | Unit":e=>e.abs(),bigint:e=>e<0n?-e:e,"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e,!0)))})}))},Oi="isZero",Ii={equalScalarDependencies:xn,typedDependencies:yn,createIsZero:fe(Oi,["typed","equalScalar"],(e=>{var{typed:r,equalScalar:t}=e;return r(Oi,{"number | BigNumber | Complex | Fraction":e=>t(e,0),bigint:e=>0n===e,Unit:r.referToSelf((e=>t=>r.find(e,t.valueType())(t.value))),"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})}))},ki={divideScalarDependencies:Ti,isZeroDependencies:Ii,matrixDependencies:Ln,multiplyDependencies:Fi,subtractScalarDependencies:ri,typedDependencies:yn,unaryMinusDependencies:ni,createDet:fe("det",["typed","matrix","subtractScalar","multiply","divideScalar","isZero","unaryMinus"],(e=>{var{typed:r,matrix:t,subtractScalar:n,multiply:i,divideScalar:u,isZero:o,unaryMinus:a}=e;return r("det",{any:function(e){return te(e)},"Array | Matrix":function(e){var r;switch((r=w(e)?e.size():Array.isArray(e)?(e=t(e)).size():[]).length){case 0:return te(e);case 1:if(1===r[0])return te(e.valueOf()[0]);if(0===r[0])return 1;throw new RangeError("Matrix must be square (size: "+Ie(r)+")");case 2:var s=r[0],c=r[1];if(s===c)return function(e,r){if(1===r)return te(e[0][0]);if(2===r)return n(i(e[0][0],e[1][1]),i(e[1][0],e[0][1]));for(var t=!1,s=new Array(r).fill(0).map(((e,r)=>r)),c=0;c<r;c++){var f=s[c];if(o(e[f][c])){var l=void 0;for(l=c+1;l<r;l++)if(!o(e[s[l]][c])){f=s[l],s[l]=s[c],s[c]=f,t=!t;break}if(l===r)return e[f][c]}for(var p=e[f][c],d=0===c?1:e[s[c-1]][c-1],h=c+1;h<r;h++)for(var D=s[h],m=c+1;m<r;m++)e[D][m]=u(n(i(e[D][m],p),i(e[D][c],e[f][m])),d)}var v=e[s[r-1]][r-1];return t?a(v):v}(e.clone().valueOf(),s);if(0===c)return 1;throw new RangeError("Matrix must be square (size: "+Ie(r)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+Ie(r)+")")}}})}))},Pi="identity",Ri=fe(Pi,["typed","config","matrix","BigNumber","DenseMatrix","SparseMatrix"],(e=>{var{typed:r,config:t,matrix:n,BigNumber:i,DenseMatrix:u,SparseMatrix:o}=e;return r(Pi,{"":function(){return"Matrix"===t.matrix?n([]):[]},string:function(e){return n(e)},"number | BigNumber":function(e){return s(e,e,"Matrix"===t.matrix?"dense":void 0)},"number | BigNumber, string":function(e,r){return s(e,e,r)},"number | BigNumber, number | BigNumber":function(e,r){return s(e,r,"Matrix"===t.matrix?"dense":void 0)},"number | BigNumber, number | BigNumber, string":function(e,r,t){return s(e,r,t)},Array:function(e){return a(e)},"Array, string":function(e,r){return a(e,r)},Matrix:function(e){return a(e.valueOf(),e.storage())},"Matrix, string":function(e,r){return a(e.valueOf(),r)}});function a(e,r){switch(e.length){case 0:return r?n(r):[];case 1:return s(e[0],e[0],r);case 2:return s(e[0],e[1],r);default:throw new Error("Vector containing two values expected")}}function s(e,r,t){var n=d(e)||d(r)?i:null;if(d(e)&&(e=e.toNumber()),d(r)&&(r=r.toNumber()),!we(e)||e<1)throw new Error("Parameters in function identity must be positive integers");if(!we(r)||r<1)throw new Error("Parameters in function identity must be positive integers");var a=n?new i(1):1,s=n?new n(0):0,c=[e,r];if(t){if("sparse"===t)return o.diagonal(c,a,0,s);if("dense"===t)return u.diagonal(c,a,0,s);throw new TypeError('Unknown matrix type "'.concat(t,'"'))}for(var f=Ze([],c,s),l=e<r?e:r,p=0;p<l;p++)f[p][p]=a;return f}})),ji={BigNumberDependencies:Gt,DenseMatrixDependencies:lr,SparseMatrixDependencies:bn,matrixDependencies:Ln,typedDependencies:yn,createIdentity:Ri},qi=fe("inv",["typed","matrix","divideScalar","addScalar","multiply","unaryMinus","det","identity","abs"],(e=>{var{typed:r,matrix:t,divideScalar:n,addScalar:i,multiply:u,unaryMinus:o,det:a,identity:s,abs:c}=e;return r("inv",{"Array | Matrix":function(e){var r=w(e)?e.size():je(e);switch(r.length){case 1:if(1===r[0])return w(e)?t([n(1,e.valueOf()[0])]):[n(1,e[0])];throw new RangeError("Matrix must be square (size: "+Ie(r)+")");case 2:var i=r[0],u=r[1];if(i===u)return w(e)?t(f(e.valueOf(),i,u),e.storage()):f(e,i,u);throw new RangeError("Matrix must be square (size: "+Ie(r)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+Ie(r)+")")}},any:function(e){return n(1,e)}});function f(e,r,t){var f,l,p,d,h;if(1===r){if(0===(d=e[0][0]))throw Error("Cannot calculate inverse, determinant is zero");return[[n(1,d)]]}if(2===r){var D=a(e);if(0===D)throw Error("Cannot calculate inverse, determinant is zero");return[[n(e[1][1],D),n(o(e[0][1]),D)],[n(o(e[1][0]),D),n(e[0][0],D)]]}var m=e.concat();for(f=0;f<r;f++)m[f]=m[f].concat();for(var v=s(r).valueOf(),y=0;y<t;y++){var g=c(m[y][y]),w=y;for(f=y+1;f<r;)c(m[f][y])>g&&(g=c(m[f][y]),w=f),f++;if(0===g)throw Error("Cannot calculate inverse, determinant is zero");(f=w)!==y&&(h=m[y],m[y]=m[f],m[f]=h,h=v[y],v[y]=v[f],v[f]=h);var A=m[y],E=v[y];for(f=0;f<r;f++){var x=m[f],F=v[f];if(f!==y){if(0!==x[y]){for(p=n(o(x[y]),A[y]),l=y;l<t;l++)x[l]=i(x[l],u(p,A[l]));for(l=0;l<t;l++)F[l]=i(F[l],u(p,E[l]))}}else{for(p=A[y],l=y;l<t;l++)x[l]=n(x[l],p);for(l=0;l<t;l++)F[l]=n(F[l],p)}}}return v}})),Ui={absDependencies:zi,addScalarDependencies:kn,detDependencies:ki,divideScalarDependencies:Ti,identityDependencies:ji,matrixDependencies:Ln,multiplyDependencies:Fi,typedDependencies:yn,unaryMinusDependencies:ni,createInv:qi},Li={divideScalarDependencies:Ti,equalScalarDependencies:xn,invDependencies:Ui,matrixDependencies:Ln,multiplyDependencies:Fi,typedDependencies:yn,createDivide:fe("divide",["typed","matrix","multiply","equalScalar","divideScalar","inv"],(e=>{var{typed:r,matrix:t,multiply:n,equalScalar:i,divideScalar:u,inv:o}=e,a=Ai({typed:r,equalScalar:i}),s=Jn({typed:r});return r("divide",ne({"Array | Matrix, Array | Matrix":function(e,r){return n(e,o(r))},"DenseMatrix, any":function(e,r){return s(e,r,u,!1)},"SparseMatrix, any":function(e,r){return a(e,r,u,!1)},"Array, any":function(e,r){return s(t(e),r,u,!1).valueOf()},"any, Array | Matrix":function(e,r){return n(e,o(r))}},u.signatures))}))},Zi="cross",Yi=fe(Zi,["typed","matrix","subtract","multiply"],(e=>{var{typed:r,matrix:t,subtract:n,multiply:i}=e;return r(Zi,{"Matrix, Matrix":function(e,r){return t(u(e.toArray(),r.toArray()))},"Matrix, Array":function(e,r){return t(u(e.toArray(),r))},"Array, Matrix":function(e,r){return t(u(e,r.toArray()))},"Array, Array":u});function u(e,r){var t=Math.max(je(e).length,je(r).length);e=Ge(e),r=Ge(r);var u=je(e),o=je(r);if(1!==u.length||1!==o.length||3!==u[0]||3!==o[0])throw new RangeError("Vectors with length 3 expected (Size A = ["+u.join(", ")+"], B = ["+o.join(", ")+"])");var a=[n(i(e[1],r[2]),i(e[2],r[1])),n(i(e[2],r[0]),i(e[0],r[2])),n(i(e[0],r[1]),i(e[1],r[0]))];return t>1?[a]:a}})),Wi={matrixDependencies:Ln,multiplyDependencies:Fi,subtractDependencies:ci,typedDependencies:yn,createCross:Yi},Xi="transpose",Vi=fe(Xi,["typed","matrix"],(e=>{var{typed:r,matrix:t}=e;return r(Xi,{Array:e=>n(t(e)).valueOf(),Matrix:n,any:te});function n(e){var r,t=e.size();switch(t.length){case 1:r=e.clone();break;case 2:var n=t[0],i=t[1];if(0===i)throw new RangeError("Cannot transpose a 2D matrix with no columns (size: "+Ie(t)+")");switch(e.storage()){case"dense":r=function(e,r,t){for(var n,i=e._data,u=[],o=0;o<t;o++){n=u[o]=[];for(var a=0;a<r;a++)n[a]=te(i[a][o])}return e.createDenseMatrix({data:u,size:[t,r],datatype:e._datatype})}(e,n,i);break;case"sparse":r=function(e,r,t){for(var n,i,u,o=e._values,a=e._index,s=e._ptr,c=o?[]:void 0,f=[],l=[],p=[],d=0;d<r;d++)p[d]=0;for(n=0,i=a.length;n<i;n++)p[a[n]]++;for(var h=0,D=0;D<r;D++)l.push(h),h+=p[D],p[D]=l[D];for(l.push(h),u=0;u<t;u++)for(var m=s[u],v=s[u+1],y=m;y<v;y++){var g=p[a[y]]++;f[g]=u,o&&(c[g]=te(o[y]))}return e.createSparseMatrix({values:c,index:f,ptr:l,size:[t,r],datatype:e._datatype})}(e,n,i)}break;default:throw new RangeError("Matrix must be a vector or two dimensional (size: "+Ie(t)+")")}return r}})),Gi="ctranspose",Ji={conjDependencies:li,transposeDependencies:{matrixDependencies:Ln,typedDependencies:yn,createTranspose:Vi},typedDependencies:yn,createCtranspose:fe(Gi,["typed","transpose","conj"],(e=>{var{typed:r,transpose:t,conj:n}=e;return r(Gi,{any:function(e){return n(t(e))}})}))},Hi={typedDependencies:yn,createAtan:fe("atan",["typed"],(e=>{var{typed:r}=e;return r("atan",{number:function(e){return Math.atan(e)},Complex:function(e){return e.atan()},BigNumber:function(e){return e.atan()}})}))},Ki=fe("matAlgo07xSSf",["typed","DenseMatrix"],(e=>{var{typed:r,DenseMatrix:t}=e;return function(e,i,u){var a=e._size,s=e._datatype||void 0===e._data?e._datatype:e.getDataType(),c=i._size,f=i._datatype||void 0===i._data?i._datatype:i.getDataType();if(a.length!==c.length)throw new o(a.length,c.length);if(a[0]!==c[0]||a[1]!==c[1])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+c+")");var l,p,d,h=a[0],D=a[1],m=0,v=u;"string"==typeof s&&s===f&&"mixed"!==s&&(l=s,m=r.convert(0,l),v=r.find(u,[l,l]));var y=[];for(p=0;p<h;p++)y[p]=[];var g=[],w=[],A=[],E=[];for(d=0;d<D;d++){var x=d+1;for(n(e,d,A,g,x),n(i,d,E,w,x),p=0;p<h;p++){var F=A[p]===x?g[p]:m,b=E[p]===x?w[p]:m;y[p][d]=v(F,b)}}return new t({data:y,size:[h,D],datatype:s===e._datatype&&f===i._datatype?l:void 0})};function n(e,r,t,n,i){for(var u=e._values,o=e._index,a=e._ptr,s=a[r],c=a[r+1];s<c;s++){var f=o[s];t[f]=i,n[f]=u[s]}}})),$i="smaller",Qi=fe($i,["typed","config","matrix","DenseMatrix","concat"],(e=>{var{typed:r,config:t,matrix:n,DenseMatrix:i,concat:u}=e,o=ii({typed:r}),a=Ki({typed:r,DenseMatrix:i}),s=oi({typed:r,DenseMatrix:i}),c=Kn({typed:r,matrix:n,concat:u}),f=wn({typed:r});return r($i,eu({typed:r,config:t}),{"boolean, boolean":(e,r)=>e<r,"BigNumber, BigNumber":function(e,r){return e.lt(r)&&!gn(e,r,t.relTol,t.absTol)},"bigint, bigint":(e,r)=>e<r,"Fraction, Fraction":(e,r)=>-1===e.compare(r),"Complex, Complex":function(e,r){throw new TypeError("No ordering relation is defined for complex numbers")}},f,c({SS:a,DS:o,Ss:s}))})),eu=fe($i,["typed","config"],(e=>{var{typed:r,config:t}=e;return r($i,{"number, number":function(e,r){return e<r&&!Be(e,r,t.relTol,t.absTol)}})})),ru={DenseMatrixDependencies:lr,concatDependencies:Yn,matrixDependencies:Ln,typedDependencies:yn,createSmaller:Qi},tu="getMatrixDataType";function nu(e){var r=[];return e.forEach(((e,t)=>{e&&r.push(t)})),r}var iu={ImmutableDenseMatrixDependencies:{DenseMatrixDependencies:lr,smallerDependencies:ru,createImmutableDenseMatrixClass:fe("ImmutableDenseMatrix",["smaller","DenseMatrix"],(e=>{var{smaller:r,DenseMatrix:t}=e;function n(e,r){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!y(r))throw new Error("Invalid datatype: "+r);if(w(e)||g(e)){var i=new t(e,r);this._data=i._data,this._size=i._size,this._datatype=i._datatype,this._min=null,this._max=null}else if(e&&g(e.data)&&g(e.size))this._data=e.data,this._size=e.size,this._datatype=e.datatype,this._min=void 0!==e.min?e.min:null,this._max=void 0!==e.max?e.max:null;else{if(e)throw new TypeError("Unsupported type of data ("+re(e)+")");this._data=[],this._size=[0],this._datatype=r,this._min=null,this._max=null}}return n.prototype=new t,n.prototype.type="ImmutableDenseMatrix",n.prototype.isImmutableDenseMatrix=!0,n.prototype.subset=function(e){switch(arguments.length){case 1:var r=t.prototype.subset.call(this,e);return w(r)?new n({data:r._data,size:r._size,datatype:r._datatype}):r;case 2:case 3:throw new Error("Cannot invoke set subset on an Immutable Matrix instance");default:throw new SyntaxError("Wrong number of arguments")}},n.prototype.set=function(){throw new Error("Cannot invoke set on an Immutable Matrix instance")},n.prototype.resize=function(){throw new Error("Cannot invoke resize on an Immutable Matrix instance")},n.prototype.reshape=function(){throw new Error("Cannot invoke reshape on an Immutable Matrix instance")},n.prototype.clone=function(){return new n({data:te(this._data),size:te(this._size),datatype:this._datatype})},n.prototype.toJSON=function(){return{mathjs:"ImmutableDenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},n.fromJSON=function(e){return new n(e)},n.prototype.swapRows=function(){throw new Error("Cannot invoke swapRows on an Immutable Matrix instance")},n.prototype.min=function(){if(null===this._min){var e=null;this.forEach((function(t){(null===e||r(t,e))&&(e=t)})),this._min=null!==e?e:void 0}return this._min},n.prototype.max=function(){if(null===this._max){var e=null;this.forEach((function(t){(null===e||r(e,t))&&(e=t)})),this._max=null!==e?e:void 0}return this._max},n}),{isClass:!0})},getMatrixDataTypeDependencies:{typedDependencies:yn,createGetMatrixDataType:fe(tu,["typed"],(e=>{var{typed:r}=e;return r(tu,{Array:function(e){return Qe(e,re)},Matrix:function(e){return e.getDataType()}})}))},createIndexClass:fe("Index",["ImmutableDenseMatrix","getMatrixDataType"],(e=>{var{ImmutableDenseMatrix:r,getMatrixDataType:t}=e;function n(e){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");this._dimensions=[],this._sourceSize=[],this._isScalar=!0;for(var r=0,u=arguments.length;r<u;r++){var o=arguments[r],a=g(o),s=w(o),c=null;if(F(o))this._dimensions.push(o),this._isScalar=!1;else if(a||s){var f=void 0;"boolean"===t(o)?(a&&(f=i(nu(o).valueOf())),s&&(f=i(nu(o._data).valueOf())),c=o.valueOf().length):f=i(o.valueOf()),this._dimensions.push(f);var l=f.size();1===l.length&&1===l[0]&&null===c||(this._isScalar=!1)}else if("number"==typeof o)this._dimensions.push(i([o]));else{if("string"!=typeof o)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");this._dimensions.push(o)}this._sourceSize.push(c)}}function i(e){for(var t=0,n=e.length;t<n;t++)if("number"!=typeof e[t]||!we(e[t]))throw new TypeError("Index parameters must be positive integer numbers");return new r(e)}return n.prototype.type="Index",n.prototype.isIndex=!0,n.prototype.clone=function(){var e=new n;return e._dimensions=te(this._dimensions),e._isScalar=this._isScalar,e._sourceSize=this._sourceSize,e},n.create=function(e){var r=new n;return n.apply(r,e),r},n.prototype.size=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e[r]="string"==typeof n?1:n.size()[0]}return e},n.prototype.max=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e[r]="string"==typeof n?n:n.max()}return e},n.prototype.min=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e[r]="string"==typeof n?n:n.min()}return e},n.prototype.forEach=function(e){for(var r=0,t=this._dimensions.length;r<t;r++)e(this._dimensions[r],r,this)},n.prototype.dimension=function(e){return this._dimensions[e]||null},n.prototype.isObjectProperty=function(){return 1===this._dimensions.length&&"string"==typeof this._dimensions[0]},n.prototype.getObjectProperty=function(){return this.isObjectProperty()?this._dimensions[0]:null},n.prototype.isScalar=function(){return this._isScalar},n.prototype.toArray=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e.push("string"==typeof n?n:n.toArray())}return e},n.prototype.valueOf=n.prototype.toArray,n.prototype.toString=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];"string"==typeof n?e.push(JSON.stringify(n)):e.push(n.toString())}return"["+e.join(", ")+"]"},n.prototype.toJSON=function(){return{mathjs:"Index",dimensions:this._dimensions}},n.fromJSON=function(e){return n.create(e.dimensions)},n}),{isClass:!0})};function uu(e){return e>0}uu.signature="number";var ou="isPositive",au=fe(ou,["typed","config"],(e=>{var{typed:r,config:t}=e;return r(ou,{number:e=>!Be(e,0,t.relTol,t.absTol)&&uu(e),BigNumber:e=>!(gn(e,new e.constructor(0),t.relTol,t.absTol)||e.isNeg()||e.isZero()||e.isNaN()),bigint:e=>e>0n,Fraction:e=>e.s>0&&e.n>0,Unit:r.referToSelf((e=>t=>r.find(e,t.valueType())(t.value))),"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})})),su={typedDependencies:yn,createIsPositive:au},cu="larger",fu=fe(cu,["typed","config","matrix","DenseMatrix","concat"],(e=>{var{typed:r,config:t,matrix:n,DenseMatrix:i,concat:u}=e,o=ii({typed:r}),a=Ki({typed:r,DenseMatrix:i}),s=oi({typed:r,DenseMatrix:i}),c=Kn({typed:r,matrix:n,concat:u}),f=wn({typed:r});return r(cu,lu({typed:r,config:t}),{"boolean, boolean":(e,r)=>e>r,"BigNumber, BigNumber":function(e,r){return e.gt(r)&&!gn(e,r,t.relTol,t.absTol)},"bigint, bigint":(e,r)=>e>r,"Fraction, Fraction":(e,r)=>1===e.compare(r),"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")}},f,c({SS:a,DS:o,Ss:s}))})),lu=fe(cu,["typed","config"],(e=>{var{typed:r,config:t}=e;return r(cu,{"number, number":function(e,r){return e>r&&!Be(e,r,t.relTol,t.absTol)}})})),pu={DenseMatrixDependencies:lr,concatDependencies:Yn,matrixDependencies:Ln,typedDependencies:yn,createLarger:fu},du="largerEq",hu=fe(du,["typed","config","matrix","DenseMatrix","concat"],(e=>{var{typed:r,config:t,matrix:n,DenseMatrix:i,concat:u}=e,o=ii({typed:r}),a=Ki({typed:r,DenseMatrix:i}),s=oi({typed:r,DenseMatrix:i}),c=Kn({typed:r,matrix:n,concat:u}),f=wn({typed:r});return r(du,Du({typed:r,config:t}),{"boolean, boolean":(e,r)=>e>=r,"BigNumber, BigNumber":function(e,r){return e.gte(r)||gn(e,r,t.relTol,t.absTol)},"bigint, bigint":function(e,r){return e>=r},"Fraction, Fraction":(e,r)=>-1!==e.compare(r),"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")}},f,c({SS:a,DS:o,Ss:s}))})),Du=fe(du,["typed","config"],(e=>{var{typed:r,config:t}=e;return r(du,{"number, number":function(e,r){return e>=r||Be(e,r,t.relTol,t.absTol)}})})),mu={DenseMatrixDependencies:lr,concatDependencies:Yn,matrixDependencies:Ln,typedDependencies:yn,createLargerEq:hu},vu="smallerEq",yu=fe(vu,["typed","config","matrix","DenseMatrix","concat"],(e=>{var{typed:r,config:t,matrix:n,DenseMatrix:i,concat:u}=e,o=ii({typed:r}),a=Ki({typed:r,DenseMatrix:i}),s=oi({typed:r,DenseMatrix:i}),c=Kn({typed:r,matrix:n,concat:u}),f=wn({typed:r});return r(vu,gu({typed:r,config:t}),{"boolean, boolean":(e,r)=>e<=r,"BigNumber, BigNumber":function(e,r){return e.lte(r)||gn(e,r,t.relTol,t.absTol)},"bigint, bigint":(e,r)=>e<=r,"Fraction, Fraction":(e,r)=>1!==e.compare(r),"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")}},f,c({SS:a,DS:o,Ss:s}))})),gu=fe(vu,["typed","config"],(e=>{var{typed:r,config:t}=e;return r(vu,{"number, number":function(e,r){return e<=r||Be(e,r,t.relTol,t.absTol)}})})),wu={DenseMatrixDependencies:lr,concatDependencies:Yn,matrixDependencies:Ln,typedDependencies:yn,createSmallerEq:yu},Au="range",Eu=fe(Au,["typed","config","?matrix","?bignumber","smaller","smallerEq","larger","largerEq","add","isPositive"],(e=>{var{typed:r,config:t,matrix:n,bignumber:i,smaller:u,smallerEq:o,larger:a,largerEq:s,add:c,isPositive:f}=e;return r(Au,{string:p,"string, boolean":p,"number, number":function(e,r){return l(d(e,r,1,!1))},"number, number, number":function(e,r,t){return l(d(e,r,t,!1))},"number, number, boolean":function(e,r,t){return l(d(e,r,1,t))},"number, number, number, boolean":function(e,r,t,n){return l(d(e,r,t,n))},"BigNumber, BigNumber":function(e,r){return l(d(e,r,new(0,e.constructor)(1),!1))},"BigNumber, BigNumber, BigNumber":function(e,r,t){return l(d(e,r,t,!1))},"BigNumber, BigNumber, boolean":function(e,r,t){return l(d(e,r,new(0,e.constructor)(1),t))},"BigNumber, BigNumber, BigNumber, boolean":function(e,r,t,n){return l(d(e,r,t,n))},"Unit, Unit, Unit":function(e,r,t){return l(d(e,r,t,!1))},"Unit, Unit, Unit, boolean":function(e,r,t,n){return l(d(e,r,t,n))}});function l(e){return"Matrix"===t.matrix?n?n(e):Di():e}function p(e,r){var n=function(e){var r=e.split(":").map((function(e){return Number(e)}));if(r.some((function(e){return isNaN(e)})))return null;switch(r.length){case 2:return{start:r[0],end:r[1],step:1};case 3:return{start:r[0],end:r[2],step:r[1]};default:return null}}(e);if(!n)throw new SyntaxError('String "'+e+'" is no valid range');return"BigNumber"===t.number?(void 0===i&&di(),l(d(i(n.start),i(n.end),i(n.step)))):l(d(n.start,n.end,n.step,r))}function d(e,r,t,n){for(var i=[],l=f(t)?n?o:u:n?s:a,p=e;l(p,r);)i.push(p),p=c(p,t);return i}})),xu="column",Fu={IndexDependencies:iu,matrixDependencies:Ln,rangeDependencies:{bignumberDependencies:Ci,matrixDependencies:Ln,addDependencies:Qn,isPositiveDependencies:su,largerDependencies:pu,largerEqDependencies:mu,smallerDependencies:ru,smallerEqDependencies:wu,typedDependencies:yn,createRange:Eu},typedDependencies:yn,createColumn:fe(xu,["typed","Index","matrix","range"],(e=>{var{typed:r,Index:t,matrix:n,range:i}=e;return r(xu,{"Matrix, number":u,"Array, number":function(e,r){return u(n(te(e)),r).valueOf()}});function u(e,r){if(2!==e.size().length)throw new Error("Only two dimensional matrix is supported");Le(r,e.size()[1]);var u=i(0,e.size()[0]),o=new t(u,r),a=e.subset(o);return w(a)?a:n([[a]])}}))},bu=fe("complex",["typed","Complex"],(e=>{var{typed:r,Complex:t}=e;return r("complex",{"":function(){return t.ZERO},number:function(e){return new t(e,0)},"number, number":function(e,r){return new t(e,r)},"BigNumber, BigNumber":function(e,r){return new t(e.toNumber(),r.toNumber())},Fraction:function(e){return new t(e.valueOf(),0)},Complex:function(e){return e.clone()},string:function(e){return t(e)},null:function(e){return t(0)},Object:function(e){if("re"in e&&"im"in e)return new t(e.re,e.im);if("r"in e&&"phi"in e||"abs"in e&&"arg"in e)return new t(e);throw new Error("Expected object with properties (re and im) or (r and phi) or (abs and arg)")},"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})})),Cu={ComplexDependencies:en,typedDependencies:yn,createComplex:bu},_u=fe("trigUnit",["typed"],(e=>{var{typed:r}=e;return{Unit:r.referToSelf((e=>t=>{if(!t.hasBase(t.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cot is no angle");return r.find(e,t.valueType())(t.value)}))}})),Mu={typedDependencies:yn,createCos:fe("cos",["typed"],(e=>{var{typed:r}=e,t=_u({typed:r});return r("cos",{number:Math.cos,"Complex | BigNumber":e=>e.cos()},t)}))},Bu="diag",Nu=fe(Bu,["typed","matrix","DenseMatrix","SparseMatrix"],(e=>{var{typed:r,matrix:t,DenseMatrix:n,SparseMatrix:i}=e;return r(Bu,{Array:function(e){return u(e,0,je(e),null)},"Array, number":function(e,r){return u(e,r,je(e),null)},"Array, BigNumber":function(e,r){return u(e,r.toNumber(),je(e),null)},"Array, string":function(e,r){return u(e,0,je(e),r)},"Array, number, string":function(e,r,t){return u(e,r,je(e),t)},"Array, BigNumber, string":function(e,r,t){return u(e,r.toNumber(),je(e),t)},Matrix:function(e){return u(e,0,e.size(),e.storage())},"Matrix, number":function(e,r){return u(e,r,e.size(),e.storage())},"Matrix, BigNumber":function(e,r){return u(e,r.toNumber(),e.size(),e.storage())},"Matrix, string":function(e,r){return u(e,0,e.size(),r)},"Matrix, number, string":function(e,r,t){return u(e,r,e.size(),t)},"Matrix, BigNumber, string":function(e,r,t){return u(e,r.toNumber(),e.size(),t)}});function u(e,r,u,o){if(!we(r))throw new TypeError("Second parameter in function diag must be an integer");var a=r>0?r:0,s=r<0?-r:0;switch(u.length){case 1:return function(e,r,t,u,o,a){var s=[u+o,u+a];if(t&&"sparse"!==t&&"dense"!==t)throw new TypeError("Unknown matrix type ".concat(t,'"'));var c="sparse"===t?i.diagonal(s,e,r):n.diagonal(s,e,r);return null!==t?c:c.valueOf()}(e,r,o,u[0],s,a);case 2:return function(e,r,n,i,u,o){if(w(e)){var a=e.diagonal(r);return null!==n?n!==a.storage()?t(a,n):a:a.valueOf()}for(var s=Math.min(i[0]-u,i[1]-o),c=[],f=0;f<s;f++)c[f]=e[f+u][f+o];return null!==n?t(c):c}(e,r,o,u,s,a)}throw new RangeError("Matrix for function diag must be 2 dimensional")}})),Su={DenseMatrixDependencies:lr,SparseMatrixDependencies:bn,matrixDependencies:Ln,typedDependencies:yn,createDiag:Nu},Tu="equal",zu=fe(Tu,["typed","matrix","equalScalar","DenseMatrix","concat"],(e=>{var{typed:r,matrix:t,equalScalar:n,DenseMatrix:i,concat:u}=e,o=ii({typed:r}),a=Ki({typed:r,DenseMatrix:i}),s=oi({typed:r,DenseMatrix:i}),c=Kn({typed:r,matrix:t,concat:u});return r(Tu,Ou({typed:r,equalScalar:n}),c({elop:n,SS:a,DS:o,Ss:s}))})),Ou=fe(Tu,["typed","equalScalar"],(e=>{var{typed:r,equalScalar:t}=e;return r(Tu,{"any, any":function(e,r){return null===e?null===r:null===r?null===e:void 0===e?void 0===r:void 0===r?void 0===e:t(e,r)}})})),Iu={DenseMatrixDependencies:lr,concatDependencies:Yn,equalScalarDependencies:xn,matrixDependencies:Ln,typedDependencies:yn,createEqual:zu},ku="flatten",Pu={typedDependencies:yn,createFlatten:fe(ku,["typed"],(e=>{var{typed:r}=e;return r(ku,{Array:function(e){return $e(e)},Matrix:function(e){return e.create($e(e.toArray()),e.datatype())}})}))},Ru={typedDependencies:yn,createIm:fe("im",["typed"],(e=>{var{typed:r}=e;return r("im",{number:()=>0,"BigNumber | Fraction":e=>e.mul(0),Complex:e=>e.im,"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})}))},ju="matrixFromColumns",qu=fe(ju,["typed","matrix","flatten","size"],(e=>{var{typed:r,matrix:t,flatten:n,size:i}=e;return r(ju,{"...Array":function(e){return u(e)},"...Matrix":function(e){return t(u(e.map((e=>e.toArray()))))}});function u(e){if(0===e.length)throw new TypeError("At least one column is needed to construct a matrix.");for(var r=o(e[0]),t=[],i=0;i<r;i++)t[i]=[];for(var u of e){var a=o(u);if(a!==r)throw new TypeError("The vectors had different length: "+(0|r)+" ≠ "+(0|a));for(var s=n(u),c=0;c<r;c++)t[c].push(s[c])}return t}function o(e){var r=i(e);if(1===r.length)return r[0];if(2===r.length){if(1===r[0])return r[1];if(1===r[1])return r[0];throw new TypeError("At least one of the arguments is not a vector.")}throw new TypeError("Only one- or two-dimensional vectors are supported.")}})),Uu={flattenDependencies:Pu,matrixDependencies:Ln,sizeDependencies:yi,typedDependencies:yn,createMatrixFromColumns:qu},Lu="sign",Zu={BigNumberDependencies:Gt,FractionDependencies:pn,complexDependencies:Cu,typedDependencies:yn,createSign:fe(Lu,["typed","BigNumber","Fraction","complex"],(e=>{var{typed:r,BigNumber:t,complex:n,Fraction:i}=e;return r(Lu,{number:zn,Complex:function(e){return 0===e.im?n(zn(e.re)):e.sign()},BigNumber:function(e){return new t(e.cmp(0))},bigint:function(e){return e>0n?1n:e<0n?-1n:0n},Fraction:function(e){return new i(e.s,1)},"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e,!0))),Unit:r.referToSelf((e=>t=>{if(!t._isDerived()&&0!==t.units[0].unit.offset)throw new TypeError("sign is ambiguous for units with offset");return r.find(e,t.valueType())(t.value)}))})}))},Yu=fe("sqrt",["config","typed","Complex"],(e=>{var{config:r,typed:t,Complex:n}=e;return t("sqrt",{number:i,Complex:function(e){return e.sqrt()},BigNumber:function(e){return!e.isNegative()||r.predictable?e.sqrt():i(e.toNumber())},Unit:function(e){return e.pow(.5)}});function i(e){return isNaN(e)?NaN:e>=0||r.predictable?Math.sqrt(e):new n(e,0).sqrt()}})),Wu={ComplexDependencies:en,typedDependencies:yn,createSqrt:Yu},Xu="zeros",Vu=fe(Xu,["typed","config","matrix","BigNumber"],(e=>{var{typed:r,config:t,matrix:n,BigNumber:i}=e;return r(Xu,{"":function(){return"Array"===t.matrix?u([]):u([],"default")},"...number | BigNumber | string":function(e){if("string"==typeof e[e.length-1]){var r=e.pop();return u(e,r)}return"Array"===t.matrix?u(e):u(e,"default")},Array:u,Matrix:function(e){var r=e.storage();return u(e.valueOf(),r)},"Array | Matrix, string":function(e,r){return u(e.valueOf(),r)}});function u(e,r){var t=function(e){var r=!1;return e.forEach((function(e,t,n){d(e)&&(r=!0,n[t]=e.toNumber())})),r}(e),u=t?new i(0):0;if(function(e){e.forEach((function(e){if("number"!=typeof e||!we(e)||e<0)throw new Error("Parameters in function zeros must be positive integers")}))}(e),r){var o=n(r);return e.length>0?o.resize(e,u):o}var a=[];return e.length>0?Ze(a,e,u):a}})),Gu={BigNumberDependencies:Gt,matrixDependencies:Ln,typedDependencies:yn,createZeros:Vu},Ju=fe("qr",["typed","matrix","zeros","identity","isZero","equal","sign","sqrt","conj","unaryMinus","addScalar","divideScalar","multiplyScalar","subtractScalar","complex"],(e=>{var{typed:r,matrix:t,zeros:i,identity:u,isZero:o,equal:a,sign:s,sqrt:c,conj:f,unaryMinus:l,addScalar:p,divideScalar:d,multiplyScalar:h,subtractScalar:D,complex:m}=e;return n(r("qr",{DenseMatrix:function(e){return y(e)},SparseMatrix:function(e){return function(){throw new Error("qr not implemented for sparse matrices yet")}()},Array:function(e){var r=y(t(e));return{Q:r.Q.valueOf(),R:r.R.valueOf()}}}),{_denseQRimpl:v});function v(e){var r,t,n,m=e._size[0],v=e._size[1],y=u([m],"dense"),g=y._data,w=e.clone(),A=w._data,E=i([m],"");for(n=0;n<Math.min(v,m);++n){var x=A[n][n],F=l(a(x,0)?1:s(x)),b=f(F),C=0;for(r=n;r<m;r++)C=p(C,h(A[r][n],f(A[r][n])));var _=h(F,c(C));if(!o(_)){var M=D(x,_);for(E[n]=1,r=n+1;r<m;r++)E[r]=d(A[r][n],M);var B=l(f(d(M,_))),N=void 0;for(t=n;t<v;t++){for(N=0,r=n;r<m;r++)N=p(N,h(f(E[r]),A[r][t]));for(N=h(N,B),r=n;r<m;r++)A[r][t]=h(D(A[r][t],h(E[r],N)),b)}for(r=0;r<m;r++){for(N=0,t=n;t<m;t++)N=p(N,h(g[r][t],E[t]));for(N=h(N,B),t=n;t<m;++t)g[r][t]=d(D(g[r][t],h(N,f(E[t]))),b)}}}return{Q:y,R:w,toString:function(){return"Q: "+this.Q.toString()+"\nR: "+this.R.toString()}}}function y(e){var r=v(e),t=r.R._data;if(e._data.length>0)for(var n="Complex"===t[0][0].type?m(0):0,i=0;i<t.length;++i)for(var u=0;u<i&&u<(t[0]||[]).length;++u)t[i][u]=n;return r}})),Hu={addScalarDependencies:kn,complexDependencies:Cu,conjDependencies:li,divideScalarDependencies:Ti,equalDependencies:Iu,identityDependencies:ji,isZeroDependencies:Ii,matrixDependencies:Ln,multiplyScalarDependencies:pi,signDependencies:Zu,sqrtDependencies:Wu,subtractScalarDependencies:ri,typedDependencies:yn,unaryMinusDependencies:ni,zerosDependencies:Gu,createQr:Ju},Ku={typedDependencies:yn,createRe:fe("re",["typed"],(e=>{var{typed:r}=e;return r("re",{"number | BigNumber | Fraction":e=>e,Complex:e=>e.re,"Array | Matrix":r.referToSelf((e=>r=>Pn(r,e)))})}))},$u="reshape",Qu={isIntegerDependencies:jn,matrixDependencies:Ln,typedDependencies:yn,createReshape:fe($u,["typed","isInteger","matrix"],(e=>{var{typed:r,isInteger:t}=e;return r($u,{"Matrix, Array":function(e,r){return e.reshape(r,!0)},"Array, Array":function(e,r){return r.forEach((function(e){if(!t(e))throw new TypeError("Invalid size for dimension: "+e)})),We(e,r)}})}))},eo={typedDependencies:yn,createSin:fe("sin",["typed"],(e=>{var{typed:r}=e,t=_u({typed:r});return r("sin",{number:Math.sin,"Complex | BigNumber":e=>e.sin()},t)}))};function ro(e){var{DenseMatrix:r}=e;return function(e,t,n){var i=e.size();if(2!==i.length)throw new RangeError("Matrix must be two dimensional (size: "+Ie(i)+")");var u=i[0];if(u!==i[1])throw new RangeError("Matrix must be square (size: "+Ie(i)+")");var o=[];if(w(t)){var a=t.size(),s=t._data;if(1===a.length){if(a[0]!==u)throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(var c=0;c<u;c++)o[c]=[s[c]];return new r({data:o,size:[u,1],datatype:t._datatype})}if(2===a.length){if(a[0]!==u||1!==a[1])throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");if(E(t)){if(n){o=[];for(var f=0;f<u;f++)o[f]=[s[f][0]];return new r({data:o,size:[u,1],datatype:t._datatype})}return t}if(x(t)){for(var l=0;l<u;l++)o[l]=[0];for(var p=t._values,d=t._index,h=t._ptr,D=h[1],m=h[0];m<D;m++)o[d[m]][0]=p[m];return new r({data:o,size:[u,1],datatype:t._datatype})}}throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.")}if(g(t)){var v=je(t);if(1===v.length){if(v[0]!==u)throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(var y=0;y<u;y++)o[y]=[t[y]];return new r({data:o,size:[u,1]})}if(2===v.length){if(v[0]!==u||1!==v[1])throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(var A=0;A<u;A++)o[A]=[t[A][0]];return new r({data:o,size:[u,1]})}throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.")}}}var to="usolve",no={DenseMatrixDependencies:lr,divideScalarDependencies:Ti,equalScalarDependencies:xn,matrixDependencies:Ln,multiplyScalarDependencies:pi,subtractScalarDependencies:ri,typedDependencies:yn,createUsolve:fe(to,["typed","matrix","divideScalar","multiplyScalar","subtractScalar","equalScalar","DenseMatrix"],(e=>{var{typed:r,matrix:t,divideScalar:n,multiplyScalar:i,subtractScalar:u,equalScalar:o,DenseMatrix:a}=e,s=ro({DenseMatrix:a});return r(to,{"SparseMatrix, Array | Matrix":function(e,r){return function(e,r){for(var t=(r=s(e,r,!0))._data,c=e._size[0],f=e._size[1],l=e._values,p=e._index,d=e._ptr,h=[],D=f-1;D>=0;D--){var m=t[D][0]||0;if(o(m,0))h[D]=[0];else{for(var v=0,y=[],g=[],w=d[D],A=d[D+1]-1;A>=w;A--){var E=p[A];E===D?v=l[A]:E<D&&(y.push(l[A]),g.push(E))}if(o(v,0))throw new Error("Linear system cannot be solved since matrix is singular");for(var x=n(m,v),F=0,b=g.length;F<b;F++){var C=g[F];t[C]=[u(t[C][0],i(x,y[F]))]}h[D]=[x]}}return new a({data:h,size:[c,1]})}(e,r)},"DenseMatrix, Array | Matrix":function(e,r){return c(e,r)},"Array, Array | Matrix":function(e,r){return c(t(e),r).valueOf()}});function c(e,r){for(var t=(r=s(e,r,!0))._data,c=e._size[0],f=e._size[1],l=[],p=e._data,d=f-1;d>=0;d--){var h=t[d][0]||0,D=void 0;if(o(h,0))D=0;else{var m=p[d][d];if(o(m,0))throw new Error("Linear system cannot be solved since matrix is singular");D=n(h,m);for(var v=d-1;v>=0;v--)t[v]=[u(t[v][0]||0,i(D,p[v][d]))]}l[d]=[D]}return new a({data:l,size:[c,1]})}}))},io="usolveAll",uo={DenseMatrixDependencies:lr,divideScalarDependencies:Ti,equalScalarDependencies:xn,matrixDependencies:Ln,multiplyScalarDependencies:pi,subtractScalarDependencies:ri,typedDependencies:yn,createUsolveAll:fe(io,["typed","matrix","divideScalar","multiplyScalar","subtractScalar","equalScalar","DenseMatrix"],(e=>{var{typed:r,matrix:t,divideScalar:n,multiplyScalar:i,subtractScalar:u,equalScalar:o,DenseMatrix:a}=e,s=ro({DenseMatrix:a});return r(io,{"SparseMatrix, Array | Matrix":function(e,r){return function(e,r){for(var t=[s(e,r,!0)._data.map((e=>e[0]))],c=e._size[0],f=e._size[1],l=e._values,p=e._index,d=e._ptr,h=f-1;h>=0;h--)for(var D=t.length,m=0;m<D;m++){for(var v=t[m],y=[],g=[],w=d[h],A=0,E=d[h+1]-1;E>=w;E--){var x=p[E];x===h?A=l[E]:x<h&&(y.push(l[E]),g.push(x))}if(o(A,0))if(o(v[h],0)){if(0===m){var F=[...v];F[h]=1;for(var b=0,C=g.length;b<C;b++){var _=g[b];F[_]=u(F[_],y[b])}t.push(F)}}else{if(0===m)return[];t.splice(m,1),m-=1,D-=1}else{v[h]=n(v[h],A);for(var M=0,B=g.length;M<B;M++){var N=g[M];v[N]=u(v[N],i(v[h],y[M]))}}}return t.map((e=>new a({data:e.map((e=>[e])),size:[c,1]})))}(e,r)},"DenseMatrix, Array | Matrix":function(e,r){return c(e,r)},"Array, Array | Matrix":function(e,r){return c(t(e),r).map((e=>e.valueOf()))}});function c(e,r){for(var t=[s(e,r,!0)._data.map((e=>e[0]))],c=e._data,f=e._size[0],l=e._size[1]-1;l>=0;l--)for(var p=t.length,d=0;d<p;d++){var h=t[d];if(o(c[l][l],0))if(o(h[l],0)){if(0===d){var D=[...h];D[l]=1;for(var m=l-1;m>=0;m--)D[m]=u(D[m],c[m][l]);t.push(D)}}else{if(0===d)return[];t.splice(d,1),d-=1,p-=1}else{h[l]=n(h[l],c[l][l]);for(var v=l-1;v>=0;v--)h[v]=u(h[v],i(h[l],c[v][l]))}}return t.map((e=>new a({data:e.map((e=>[e])),size:[f,1]})))}}))};var oo,ao=fe("eigs",["config","typed","matrix","addScalar","equal","subtract","abs","atan","cos","sin","multiplyScalar","divideScalar","inv","bignumber","multiply","add","larger","column","flatten","number","complex","sqrt","diag","size","reshape","qr","usolve","usolveAll","im","re","smaller","matrixFromColumns","dot"],(e=>{var{config:r,typed:t,matrix:i,addScalar:u,subtract:o,equal:a,abs:s,atan:c,cos:f,sin:l,multiplyScalar:h,divideScalar:v,inv:y,bignumber:g,multiply:w,add:A,larger:E,column:x,flatten:F,number:b,complex:C,sqrt:_,diag:M,size:B,reshape:N,qr:S,usolve:T,usolveAll:z,im:O,re:I,smaller:k,matrixFromColumns:P,dot:R}=e,j=function(e){var{config:r,addScalar:t,subtract:n,abs:i,atan:u,cos:o,sin:a,multiplyScalar:s,inv:c,bignumber:f,multiply:l,add:p}=e;function d(e,r,t,n){for(var i=e.length,u=Math.cos(r),o=Math.sin(r),a=Array(i).fill(0),s=Array(i).fill(0),c=0;c<i;c++)a[c]=u*e[c][t]-o*e[c][n],s[c]=o*e[c][t]+u*e[c][n];for(var f=0;f<i;f++)e[f][t]=a[f],e[f][n]=s[f];return e}function h(e,r,i,u){for(var c=e.length,l=o(r),p=a(r),d=Array(c).fill(f(0)),h=Array(c).fill(f(0)),D=0;D<c;D++)d[D]=n(s(l,e[D][i]),s(p,e[D][u])),h[D]=t(s(p,e[D][i]),s(l,e[D][u]));for(var m=0;m<c;m++)e[m][i]=d[m],e[m][u]=h[m];return e}function D(e,r,i,u){for(var c=e.length,d=f(o(r)),h=f(a(r)),D=s(d,d),m=s(h,h),v=Array(c).fill(f(0)),y=Array(c).fill(f(0)),g=l(f(2),d,h,e[i][u]),w=t(n(s(D,e[i][i]),g),s(m,e[u][u])),A=p(s(m,e[i][i]),g,s(D,e[u][u])),E=0;E<c;E++)v[E]=n(s(d,e[i][E]),s(h,e[u][E])),y[E]=t(s(h,e[i][E]),s(d,e[u][E]));e[i][i]=w,e[u][u]=A,e[i][u]=f(0),e[u][i]=f(0);for(var x=0;x<c;x++)x!==i&&x!==u&&(e[i][x]=v[x],e[x][i]=v[x],e[u][x]=y[x],e[x][u]=y[x]);return e}function m(e,r,t,n){for(var i=e.length,u=Math.cos(r),o=Math.sin(r),a=u*u,s=o*o,c=Array(i).fill(0),f=Array(i).fill(0),l=a*e[t][t]-2*u*o*e[t][n]+s*e[n][n],p=s*e[t][t]+2*u*o*e[t][n]+a*e[n][n],d=0;d<i;d++)c[d]=u*e[t][d]-o*e[n][d],f[d]=o*e[t][d]+u*e[n][d];e[t][t]=l,e[n][n]=p,e[t][n]=0,e[n][t]=0;for(var h=0;h<i;h++)h!==t&&h!==n&&(e[t][h]=c[h],e[h][t]=c[h],e[n][h]=f[h],e[h][n]=f[h]);return e}function v(e){for(var r=e.length,t=0,n=[0,1],i=0;i<r;i++)for(var u=i+1;u<r;u++)Math.abs(t)<Math.abs(e[i][u])&&(t=Math.abs(e[i][u]),n=[i,u]);return[n,t]}function y(e){for(var r=e.length,t=0,n=[0,1],u=0;u<r;u++)for(var o=u+1;o<r;o++)i(t)<i(e[u][o])&&(t=i(e[u][o]),n=[u,o]);return[n,t]}function g(e,r,t){var n,u=e.length,o=Array(u);if(t){n=Array(u);for(var a=0;a<u;a++)n[a]=Array(u)}for(var s=0;s<u;s++){for(var c=0,f=e[0],l=0;l<e.length;l++)i(e[l])<i(f)&&(f=e[c=l]);if(o[s]=e.splice(c,1)[0],t)for(var p=0;p<u;p++)n[s][p]=r[p][c],r[p].splice(c,1)}if(!t)return{values:o};var d=n.map(((e,r)=>({value:o[r],vector:e})));return{values:o,eigenvectors:d}}return function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.relTol,a=arguments.length>3?arguments[3]:void 0,p=arguments.length>4?arguments[4]:void 0;if("number"===a)return function(e,t,n){var i,u,o=e.length,a=Math.abs(t/o);if(n){u=new Array(o);for(var s=0;s<o;s++)u[s]=Array(o).fill(0),u[s][s]=1}for(var c,f,l,p,h=v(e);Math.abs(h[1])>=Math.abs(a);){var D=h[0][0],y=h[0][1];e=m(e,(c=e[D][D],f=e[y][y],l=e[D][y],p=void 0,p=f-c,i=Math.abs(p)<=r.relTol?Math.PI/4:.5*Math.atan(2*l/(f-c))),D,y),n&&(u=d(u,i,D,y)),h=v(e)}for(var w=Array(o).fill(0),A=0;A<o;A++)w[A]=e[A][A];return g(te(w),u,n)}(e,o,p);if("BigNumber"===a)return function(e,t,o){var a,p,d=e.length,m=i(t/d);if(o){p=new Array(d);for(var v=0;v<d;v++)p[v]=Array(d).fill(0),p[v][v]=1}for(var w,A,E,x,F=y(e);i(F[1])>=i(m);){var b=F[0][0],C=F[0][1];e=D(e,(w=e[b][b],A=e[C][C],E=e[b][C],x=void 0,x=n(A,w),a=i(x)<=r.relTol?f(-1).acos().div(4):s(.5,u(l(2,E,c(x))))),b,C),o&&(p=h(p,a,b,C)),F=y(e)}for(var _=Array(d).fill(0),M=0;M<d;M++)_[M]=e[M][M];return g(te(_),p,o)}(e,o,p);throw TypeError("Unsupported data type: "+a)}}({config:r,addScalar:u,subtract:o,column:x,flatten:F,equal:a,abs:s,atan:c,cos:f,sin:l,multiplyScalar:h,inv:y,bignumber:g,complex:C,multiply:w,add:A}),q=function(e){var{addScalar:r,subtract:t,flatten:n,multiply:i,multiplyScalar:u,divideScalar:o,sqrt:a,abs:s,bignumber:c,diag:f,size:l,reshape:p,inv:d,qr:h,usolve:D,usolveAll:m,equal:v,complex:y,larger:g,smaller:w,matrixFromColumns:A,dot:E}=e;function x(e,r,n,i,u,o,a,f){var l="BigNumber"===f,p="Complex"===f,d=l?c(0):p?y(0):0,h=l?c(1):p?y(1):1;if(w(s(n),a))return[[h,d],[d,h]];if(g(s(t(u,o)),a))return[[t(u,i),t(o,i)],[n,n]];var D=t(e,u),m=t(i,u);return w(s(r),a)&&w(s(m),a)?[[D,h],[n,d]]:[[r,d],[m,h]]}function F(e,r){for(var t=0;t<e.length;t++)e[t].push(...Array(r-e[t].length).fill(0));for(var n=e.length;n<r;n++)e.push(Array(r).fill(0)),e[n][n]=1;return e}function b(e,r,t){for(var n=0;n<e.length;n++)if(t(e[n],r))return n;return-1}function C(e,r,t,n,i){for(var u,o="BigNumber"===i?c(1e3):1e3,a=0;a<5;++a){u=_(r,t,i);try{u=D(e,u)}catch(e){continue}if(g(B(u),o))break}if(a>=5)return null;for(a=0;;){var s=D(e,u);if(w(B(M(u,[s])),n))break;if(++a>=10)return null;u=N(s)}return u}function _(e,r,t){var n="BigNumber"===t,i="Complex"===t,u=Array(e).fill(0).map((e=>2*Math.random()-1));return n&&(u=u.map((e=>c(e)))),i&&(u=u.map((e=>y(e)))),N(u=M(u,r),t)}function M(e,r){var n=l(e);for(var u of r)u=p(u,n),e=t(e,i(o(E(u,e),E(u,u)),u));return e}function B(e){return s(a(E(e,e)))}function N(e,r){var t="Complex"===r,n="BigNumber"===r?c(1):t?y(1):1;return i(o(n,B(e)),e)}return function(e,l,p,D){var A=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],E=function(e,t,n,i,a){var l,p="BigNumber"===i,d="Complex"===i,h=p?c(0):0,D=p?c(1):d?y(1):1,m=p?c(1):1,A=p?c(10):2,E=u(A,A);a&&(l=Array(t).fill(D));for(var x=!1;!x;){x=!0;for(var F=0;F<t;F++){for(var b=h,C=h,_=0;_<t;_++)F!==_&&(b=r(b,s(e[_][F])),C=r(C,s(e[F][_])));if(!v(b,0)&&!v(C,0)){for(var M=m,B=b,N=o(C,A),S=u(C,A);w(B,N);)B=u(B,E),M=u(M,A);for(;g(B,S);)B=o(B,E),M=o(M,A);if(w(o(r(B,C),M),u(r(b,C),.95))){x=!1;for(var T=o(1,M),z=0;z<t;z++)F!==z&&(e[F][z]=u(e[F][z],T),e[z][F]=u(e[z][F],M));a&&(l[F]=u(l[F],T))}}}}return a?f(l):null}(e,l,0,D,A);!function(e,n,i,a,f,l){var p="BigNumber"===a,d="Complex"===a,h=p?c(0):d?y(0):0;p&&(i=c(i));for(var D=0;D<n-2;D++){for(var m=0,v=h,g=D+1;g<n;g++){var A=e[g][D];w(s(v),s(A))&&(v=A,m=g)}if(!w(s(v),i)){if(m!==D+1){var E=e[m];e[m]=e[D+1],e[D+1]=E;for(var x=0;x<n;x++){var F=e[x][m];e[x][m]=e[x][D+1],e[x][D+1]=F}if(f){var b=l[m];l[m]=l[D+1],l[D+1]=b}}for(var C=D+2;C<n;C++){var _=o(e[C][D],v);if(0!==_){for(var M=0;M<n;M++)e[C][M]=t(e[C][M],u(_,e[D+1][M]));for(var B=0;B<n;B++)e[B][D+1]=r(e[B][D+1],u(_,e[B][C]));if(f)for(var N=0;N<n;N++)l[C][N]=t(l[C][N],u(_,l[D+1][N]))}}}}}(e,l,p,D,A,E);var{values:_,C:M}=function(e,n,o,l,p){var d="BigNumber"===l,D="Complex"===l,m=d?c(1):D?y(1):1;d&&(o=c(o));for(var v,g,A,E,b,C,_,M,B=te(e),N=[],S=n,T=[],z=p?f(Array(n).fill(m)):void 0,O=p?f(Array(S).fill(m)):void 0,I=0;I<=100;){I+=1;for(var k=B[S-1][S-1],P=0;P<S;P++)B[P][P]=t(B[P][P],k);var{Q:R,R:j}=h(B);B=i(j,R);for(var q=0;q<S;q++)B[q][q]=r(B[q][q],k);if(p&&(O=i(O,R)),1===S||w(s(B[S-1][S-2]),o)){I=0,N.push(B[S-1][S-1]),p&&(T.unshift([[1]]),F(O,n),z=i(z,O),S>1&&(O=f(Array(S-1).fill(m)))),S-=1,B.pop();for(var U=0;U<S;U++)B[U].pop()}else if(2===S||w(s(B[S-2][S-3]),o)){I=0;var L=(v=B[S-2][S-2],g=B[S-2][S-1],A=B[S-1][S-2],E=B[S-1][S-1],b=void 0,C=void 0,_=void 0,M=void 0,b=r(v,E),C=t(u(v,E),u(g,A)),_=u(b,.5),M=u(a(t(u(b,b),u(4,C))),.5),[r(_,M),t(_,M)]);N.push(...L),p&&(T.unshift(x(B[S-2][S-2],B[S-2][S-1],B[S-1][S-2],B[S-1][S-1],L[0],L[1],o,l)),F(O,n),z=i(z,O),S>2&&(O=f(Array(S-2).fill(m)))),S-=2,B.pop(),B.pop();for(var Z=0;Z<S;Z++)B[Z].pop(),B[Z].pop()}if(0===S)break}if(N.sort(((e,r)=>+t(s(e),s(r)))),I>100){var Y=Error("The eigenvalues failed to converge. Only found these eigenvalues: "+N.join(", "));throw Y.values=N,Y.vectors=[],Y}var W=p?i(z,function(e,r){for(var t=[],n=0;n<r;n++)t[n]=Array(r).fill(0);var i=0;for(var u of e){for(var o=u.length,a=0;a<o;a++)for(var s=0;s<o;s++)t[i+a][i+s]=u[a][s];i+=o}return t}(T,n)):void 0;return{values:N,C:W}}(e,l,p,D,A);if(A){var B=function(e,r,u,o,a,s,l){var p=d(u),h=i(p,e,u),D="BigNumber"===l,g="Complex"===l,w=D?c(0):g?y(0):0,A=D?c(1):g?y(1):1,E=[],x=[];for(var F of a){var _=b(E,F,v);-1===_?(E.push(F),x.push(1)):x[_]+=1}for(var M=[],B=E.length,N=Array(r).fill(w),S=f(Array(r).fill(A)),T=function(){var e=E[z],a=t(h,i(e,S)),c=m(a,N);for(c.shift();c.length<x[z];){var f=C(a,r,c,s,l);if(null===f)break;c.push(f)}var p=i(d(o),u);c=c.map((e=>i(p,e))),M.push(...c.map((r=>({value:e,vector:n(r)}))))},z=0;z<B;z++)T();return M}(e,l,M,E,_,p,D);return{values:_,eigenvectors:B}}return{values:_}}}({config:r,addScalar:u,subtract:o,multiply:w,multiplyScalar:h,flatten:F,divideScalar:v,sqrt:_,abs:s,bignumber:g,diag:M,size:B,reshape:N,qr:S,inv:y,usolve:T,usolveAll:z,equal:a,complex:C,larger:E,smaller:k,matrixFromColumns:P,dot:R});return t("eigs",{Array:function(e){return U(i(e))},"Array, number|BigNumber":function(e,r){return U(i(e),{precision:r})},"Array, Object":(e,r)=>U(i(e),r),Matrix:function(e){return U(e,{matricize:!0})},"Matrix, number|BigNumber":function(e,r){return U(e,{precision:r,matricize:!0})},"Matrix, Object":function(e,r){var t={matricize:!0};return n(t,r),U(e,t)}});function U(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=!("eigenvectors"in n)||n.eigenvectors,a=function(e,r,t){var n=e.toArray(),i=e.size();if(2!==i.length||i[0]!==i[1])throw new RangeError("Matrix must be square (size: ".concat(Ie(i),")"));var u=i[0];if(function(e,r,t){for(var n=0;n<r;n++)for(var i=0;i<r;i++)if(E(g(s(O(e[n][i]))),t))return!1;return!0}(n,u,r)&&(function(e,r){for(var t=0;t<r;t++)for(var n=0;n<r;n++)e[t][n]=I(e[t][n])}(n,u),function(e,r,t){for(var n=0;n<r;n++)for(var i=n;i<r;i++)if(E(g(s(o(e[n][i],e[i][n]))),t))return!1;return!0}(n,u,r))){var a=L(e,n,u);return j(n,u,r,a,t)}var c=L(e,n,u);return q(n,u,r,c,t)}(e,null!==(t=n.precision)&&void 0!==t?t:r.relTol,u);return n.matricize&&(a.values=i(a.values),u&&(a.eigenvectors=a.eigenvectors.map((e=>{var{value:r,vector:t}=e;return{value:r,vector:i(t)}})))),u&&Object.defineProperty(a,"vectors",{enumerable:!1,get:()=>{throw new Error("eigs(M).vectors replaced with eigs(M).eigenvectors")}}),a}function L(e,r,t){var n=e.datatype();if("number"===n||"BigNumber"===n||"Complex"===n)return n;for(var i=!1,u=!1,o=!1,a=0;a<t;a++)for(var s=0;s<t;s++){var c=r[a][s];if(p(c)||m(c))i=!0;else if(d(c))u=!0;else{if(!D(c))throw TypeError("Unsupported type in Matrix: "+re(c));o=!0}}if(u&&o&&console.warn("Complex BigNumbers not supported, this operation will lose precission."),o){for(var f=0;f<t;f++)for(var l=0;l<t;l++)r[f][l]=C(r[f][l]);return"Complex"}if(u){for(var h=0;h<t;h++)for(var v=0;v<t;v++)r[h][v]=g(r[h][v]);return"BigNumber"}if(i){for(var y=0;y<t;y++)for(var w=0;w<t;w++)r[y][w]=b(r[y][w]);return"number"}throw TypeError("Matrix contains unsupported types only.")}})),so={absDependencies:zi,addDependencies:Qn,addScalarDependencies:kn,atanDependencies:Hi,bignumberDependencies:Ci,columnDependencies:Fu,complexDependencies:Cu,cosDependencies:Mu,diagDependencies:Su,divideScalarDependencies:Ti,dotDependencies:wi,equalDependencies:Iu,flattenDependencies:Pu,imDependencies:Ru,invDependencies:Ui,largerDependencies:pu,matrixDependencies:Ln,matrixFromColumnsDependencies:Uu,multiplyDependencies:Fi,multiplyScalarDependencies:pi,numberDependencies:Ni,qrDependencies:Hu,reDependencies:Ku,reshapeDependencies:Qu,sinDependencies:eo,sizeDependencies:yi,smallerDependencies:ru,sqrtDependencies:Wu,subtractDependencies:ci,typedDependencies:yn,usolveDependencies:no,usolveAllDependencies:uo,createEigs:ao},co=fe("pow",["typed","config","identity","multiply","matrix","inv","fraction","number","Complex"],(e=>{var{typed:r,config:t,identity:n,multiply:i,matrix:u,inv:o,number:a,fraction:s,Complex:c}=e;return r("pow",{"number, number":f,"Complex, Complex":function(e,r){return e.pow(r)},"BigNumber, BigNumber":function(e,r){return r.isInteger()||e>=0||t.predictable?e.pow(r):new c(e.toNumber(),0).pow(r.toNumber(),0)},"bigint, bigint":(e,r)=>e**r,"Fraction, Fraction":function(e,r){var n=e.pow(r);if(null!=n)return n;if(t.predictable)throw new Error("Result of pow is non-rational and cannot be expressed as a fraction");return f(e.valueOf(),r.valueOf())},"Array, number":l,"Array, BigNumber":function(e,r){return l(e,r.toNumber())},"Matrix, number":p,"Matrix, BigNumber":function(e,r){return p(e,r.toNumber())},"Unit, number | BigNumber":function(e,r){return e.pow(r)}});function f(e,r){if(t.predictable&&!we(r)&&e<0)try{var n=s(r),i=a(n);if((r===i||Math.abs((r-i)/r)<1e-14)&&n.d%2==1)return(n.n%2==0?1:-1)*Math.pow(-e,r)}catch(e){}return t.predictable&&(e<-1&&r===1/0||e>-1&&e<0&&r===-1/0)?NaN:we(r)||e>=0||t.predictable?On(e,r):e*e<1&&r===1/0||e*e>1&&r===-1/0?0:new c(e,0).pow(r,0)}function l(e,r){if(!we(r))throw new TypeError("For A^b, b must be an integer (value is "+r+")");var t=je(e);if(2!==t.length)throw new Error("For A^b, A must be 2 dimensional (A has "+t.length+" dimensions)");if(t[0]!==t[1])throw new Error("For A^b, A must be square (size is "+t[0]+"x"+t[1]+")");if(r<0)try{return l(o(e),-r)}catch(e){if("Cannot calculate inverse, determinant is zero"===e.message)throw new TypeError("For A^b, when A is not invertible, b must be a positive integer (value is "+r+")");throw e}for(var u=n(t[0]).valueOf(),a=e;r>=1;)1&~r||(u=i(a,u)),r>>=1,a=i(a,a);return u}function p(e,r){return u(l(e.valueOf(),r))}})),fo={ComplexDependencies:en,fractionDependencies:Mi,identityDependencies:ji,invDependencies:Ui,matrixDependencies:Ln,multiplyDependencies:Fi,numberDependencies:Ni,typedDependencies:yn,createPow:co},lo="norm",po=fe(lo,["typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs"],(e=>{var{typed:r,abs:t,add:n,pow:i,conj:u,sqrt:o,multiply:a,equalScalar:s,larger:c,smaller:f,matrix:l,ctranspose:p,eigs:d}=e;return r(lo,{number:Math.abs,Complex:function(e){return e.abs()},BigNumber:function(e){return e.abs()},boolean:function(e){return Math.abs(e)},Array:function(e){return h(l(e),2)},Matrix:function(e){return h(e,2)},"Array, number | BigNumber | string":function(e,r){return h(l(e),r)},"Matrix, number | BigNumber | string":function(e,r){return h(e,r)}});function h(e,r){var l=e.size();if(1===l.length)return function(e,r){if(r===Number.POSITIVE_INFINITY||"inf"===r)return function(e){var r=0;return e.forEach((function(e){var n=t(e);c(n,r)&&(r=n)}),!0),r}(e);if(r===Number.NEGATIVE_INFINITY||"-inf"===r)return function(e){var r;return e.forEach((function(e){var n=t(e);r&&!f(n,r)||(r=n)}),!0),r||0}(e);if("fro"===r)return h(e,2);if("number"==typeof r&&!isNaN(r)){if(!s(r,0)){var u=0;return e.forEach((function(e){u=n(i(t(e),r),u)}),!0),i(u,1/r)}return Number.POSITIVE_INFINITY}throw new Error("Unsupported parameter value")}(e,r);if(2===l.length){if(l[0]&&l[1])return function(e,r){if(1===r)return function(e){var r=[],i=0;return e.forEach((function(e,u){var o=u[1],a=n(r[o]||0,t(e));c(a,i)&&(i=a),r[o]=a}),!0),i}(e);if(r===Number.POSITIVE_INFINITY||"inf"===r)return function(e){var r=[],i=0;return e.forEach((function(e,u){var o=u[0],a=n(r[o]||0,t(e));c(a,i)&&(i=a),r[o]=a}),!0),i}(e);if("fro"===r)return function(e){var r=0;return e.forEach((function(e,t){r=n(r,a(e,u(e)))})),t(o(r))}(e);if(2===r)return function(e){var r=e.size();if(r[0]!==r[1])throw new RangeError("Invalid matrix dimensions");var n=p(e),i=a(n,e),u=d(i).values.toArray(),s=u[u.length-1];return t(o(s))}(e);throw new Error("Unsupported parameter value "+r)}(e,r);throw new RangeError("Invalid matrix dimensions")}}})),ho=function e(r,t){var s=n({},he,t);if("function"!=typeof Object.create)throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");var c,f,l=(c={isNumber:p,isComplex:D,isBigNumber:d,isBigInt:h,isFraction:m,isUnit:v,isString:y,isArray:g,isMatrix:w,isCollection:A,isDenseMatrix:E,isSparseMatrix:x,isRange:F,isIndex:b,isBoolean:C,isResultSet:_,isHelp:M,isFunction:B,isDate:N,isRegExp:S,isObject:T,isMap:z,isPartitionedMap:O,isObjectWrappingMap:I,isNull:k,isUndefined:P,isAccessorNode:R,isArrayNode:j,isAssignmentNode:q,isBlockNode:U,isConditionalNode:L,isConstantNode:Z,isFunctionAssignmentNode:Y,isFunctionNode:W,isIndexNode:X,isNode:V,isObjectNode:G,isOperatorNode:J,isParenthesisNode:H,isRangeNode:K,isRelationalNode:$,isSymbolNode:Q,isChain:ee},f=new de,c.on=f.on.bind(f),c.off=f.off.bind(f),c.once=f.once.bind(f),c.emit=f.emit.bind(f),c);l.config=ve(s,l.emit),l.expression={transform:{},mathWithTransform:{config:l.config}};var re={};function te(){for(var e=arguments.length,r=new Array(e),t=0;t<e;t++)r[t]=arguments[t];return l.typed.apply(l.typed,r)}te.isTypedFunction=i.isTypedFunction;var ne=function(e,r,t,n){function i(r,i,u){var a;if(u.wrap&&"function"==typeof i&&(i=function(e){var r=function(){for(var r=[],n=0,i=arguments.length;n<i;n++){var u=arguments[n];r[n]=u&&u.valueOf()}return e.apply(t,r)};return e.transform&&(r.transform=e.transform),r}(i)),"function"==typeof(a=i)&&"string"==typeof a.signature&&(i=e(r,{[i.signature]:i})),e.isTypedFunction(t[r])&&e.isTypedFunction(i))return i=u.override?e(r,i.signatures):e(t[r],i),t[r]=i,delete n[r],o(r,i),void t.emit("import",r,(function(){return i}));if(void 0===t[r]||u.override)return t[r]=i,delete n[r],o(r,i),void t.emit("import",r,(function(){return i}));if(!u.silent)throw new Error('Cannot import "'+r+'": already exists')}function o(e,r){r&&"function"==typeof r.transform?(t.expression.transform[e]=r.transform,c(e)&&(t.expression.mathWithTransform[e]=r.transform)):(delete t.expression.transform[e],c(e)&&(t.expression.mathWithTransform[e]=r))}function a(e){delete t.expression.transform[e],c(e)?t.expression.mathWithTransform[e]=t[e]:delete t.expression.mathWithTransform[e]}function s(r,i){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.fn;if(u.includes("."))throw new Error("Factory name should not contain a nested path. Name: "+JSON.stringify(u));var o=l(r)?t.expression.transform:t,s=u in t.expression.transform,c=ce(o,u)?o[u]:void 0,p=function(){var n={};r.dependencies.map(pe).forEach((e=>{if(e.includes("."))throw new Error("Factory dependency should not contain a nested path. Name: "+JSON.stringify(e));"math"===e?n.math=t:"mathWithTransform"===e?n.mathWithTransform=t.expression.mathWithTransform:"classes"===e?n.classes=t:n[e]=t[e]}));var o=r(n);if(o&&"function"==typeof o.transform)throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with export const path = "expression.transform"');if(void 0===c||i.override)return o;if(e.isTypedFunction(c)&&e.isTypedFunction(o))return e(c,o);if(i.silent)return c;throw new Error('Cannot import "'+u+'": already exists')};r.meta&&!1===r.meta.lazy?(o[u]=p(),c&&s?a(u):(l(r)||f(r))&&se(t.expression.mathWithTransform,u,(()=>o[u]))):(se(o,u,p),c&&s?a(u):(l(r)||f(r))&&se(t.expression.mathWithTransform,u,(()=>o[u]))),n[u]=r,t.emit("import",u,p)}function c(e){return!ce(p,e)}function f(e){return!(e.fn.includes(".")||ce(p,e.fn)||e.meta&&e.meta.isClass)}function l(e){return void 0!==e&&void 0!==e.meta&&!0===e.meta.isTransformFunction||!1}var p={expression:!0,type:!0,docs:!0,error:!0,json:!0,chain:!0};return function(e,r){var t=arguments.length;if(1!==t&&2!==t)throw new u("import",t,1,2);r||(r={});var n,o={};for(var a in function e(t,n,i){if(Array.isArray(n))n.forEach((r=>e(t,r)));else if("object"==typeof n)for(var u in n)ce(n,u)&&e(t,n[u],u);else if(le(n)||void 0!==i){var o=le(n)?l(n)?n.fn+".transform":n.fn:i;if(ce(t,o)&&t[o]!==n&&!r.silent)throw new Error('Cannot import "'+o+'" twice');t[o]=n}else if(!r.silent)throw new TypeError("Factory, Object, or Array expected")}(o,e),o)if(ce(o,a)){var c=o[a];if(le(c))s(c,r);else if("function"==typeof(n=c)||"number"==typeof n||"string"==typeof n||"boolean"==typeof n||null===n||v(n)||D(n)||d(n)||m(n)||w(n)||Array.isArray(n))i(a,c,r);else if(!r.silent)throw new TypeError("Factory, Object, or Array expected")}}}(te,0,l,re);return l.import=ne,l.on("config",(()=>{Object.values(re).forEach((e=>{e&&e.meta&&e.meta.recreateOnConfigChange&&ne(e,{override:!0})}))})),l.create=e.bind(null,r),l.factory=fe,l.import(Object.values(oe(r))),l.ArgumentsError=u,l.DimensionError=o,l.IndexError=a,l}({addDependencies:Qn,subtractDependencies:ci,multiplyDependencies:Fi,divideDependencies:Li,dotDependencies:wi,crossDependencies:Wi,normDependencies:{absDependencies:zi,addDependencies:Qn,conjDependencies:li,ctransposeDependencies:Ji,eigsDependencies:so,equalScalarDependencies:xn,largerDependencies:pu,matrixDependencies:Ln,multiplyDependencies:Fi,powDependencies:fo,smallerDependencies:ru,sqrtDependencies:Wu,typedDependencies:yn,createNorm:po},matrixDependencies:Ln,identityDependencies:ji}),Do={add:ho.add,subtract:ho.subtract,multiply:ho.multiply,divide:ho.divide,dot:ho.dot,cross:ho.cross,norm:ho.norm,matrix:ho.matrix,identity:ho.identity},mo=function(){function e(){}return e.make_scaler=function(e,r,t){return Do.matrix([[e,0,0,0],[0,r,0,0],[0,0,t,0],[0,0,0,1]])},e.make_translator=function(e,r,t){return Do.matrix([[1,0,0,e],[0,1,0,r],[0,0,1,t],[0,0,0,1]])},e.make_rotator_x=function(e){var r=Math.cos(e),t=Math.sin(e);return Do.matrix([[1,0,0,0],[0,r,-t,0],[0,t,r,0],[0,0,0,1]])},e.make_rotator_y=function(e){var r=Math.cos(e),t=Math.sin(e);return Do.matrix([[r,0,t,0],[0,1,0,0],[-t,0,r,0],[0,0,0,1]])},e.make_rotator_z=function(e){var r=Math.cos(e),t=Math.sin(e);return Do.matrix([[r,-t,0,0],[t,r,0,0],[0,0,1,0],[0,0,0,1]])},e.make_perspective=function(e,r,t,n){var i=r*(1/Math.tan(e/2)),u=1/Math.tan(e/2),o=n*(n-t),a=-n*t/(n-t);return Do.matrix([[i,0,0,0],[0,u,0,0],[0,0,o,a],[0,0,1,0]])},e.make_view=function(e,r,t){var n=Do.subtract(r,e),i=Do.divide(n,Do.norm(n)).valueOf(),u=Do.cross(t,n),o=Do.divide(u,Do.norm(u)).valueOf(),a=Do.cross(i,o).valueOf();return Do.matrix([[o[0],o[1],o[2],-Do.dot(o,e)],[a[0],a[1],a[2],-Do.dot(a,e)],[i[0],i[1],i[2],-Do.dot(i,e)],[0,0,0,1]])},e.perspective_divide=function(e,r){var t=Do.multiply(e,r).valueOf();return 0!=t[3]&&(t[0]/=t[3],t[1]/=t[3],t[2]/=t[3]),t},e}(),vo=function(){function e(){}return e.getTarget=function(){var t=[0,0,1],n=mo.make_rotator_y(e.yaw),i=mo.make_rotator_x(e.pitch),u=Do.identity(4);u=Do.multiply(i,u),u=Do.multiply(n,u);var o=Do.multiply(u,r.vec3_to_vec4(t));return e.direction=r.vec4_to_vec3(o.toArray()),e.right=Do.cross(e.direction,e.up).valueOf(),Do.add(e.position,e.direction)},e.rotateCameraX=function(r){e.pitch+=r},e.rotateCameraY=function(r){e.yaw+=r},e.position=[0,0,0],e.direction=[0,0,1],e.up=[0,1,0],e.right=[1,0,0],e.forward_velocity=[0,0,0],e.yaw=0,e.pitch=0,e}(),yo=function(){function e(){}return e.RED=[255,0,0,255],e.GREEN=[0,255,0,255],e.BLUE=[0,0,255,255],e.YELLOW=[255,255,0,255],e.CYAN=[0,255,255,255],e.MAGENTA=[255,0,255,255],e.WHITE=[255,255,255,255],e.BLACK=[0,0,0,255],e.BROWN=[165,42,42,255],e}(),go=function(){function r(){}return r.findWeights=function(r,t,n,i){var u=[n[0]-r[0],n[1]-r[1]],o=[t[0]-r[0],t[1]-r[1]],a=[n[0]-i[0],n[1]-i[1]],s=[t[0]-i[0],t[1]-i[1]],c=[i[0]-r[0],i[1]-r[1]],f=u[e.X]*o[e.Y]-u[e.Y]*o[e.X],l=(a[e.X]*s[e.Y]-a[e.Y]*s[e.X])/f,p=(u[e.X]*c[e.Y]-u[e.Y]*c[e.X])/f;return[l,p,1-l-p]},r}(),wo=function(){function r(){}return r.clear=function(){r.pixel_buffer.fill(0)},r.refresh=function(){r.context.putImageData(r.image_data,0,0)},r.drawPixel=function(e,t,n){var i=4*(t*r.canvas.width+e);r.pixel_buffer[i+0]=n[0],r.pixel_buffer[i+1]=n[1],r.pixel_buffer[i+2]=n[2],r.pixel_buffer[i+3]=n[3]},r.drawVertex=function(e,t,n,i){for(var u=e;u<e+n;u++)for(var o=t;o<t+n;o++)r.drawPixel(u,o,i)},r.drawLine=function(e,t,n,i,u){for(var o=n-e,a=i-t,s=Math.abs(o)>=Math.abs(a)?Math.abs(o):Math.abs(a),c=o/s,f=a/s,l=e,p=t,d=0;d<=Math.round(s);d++)r.drawPixel(Math.round(l),Math.round(p),u),l+=c,p+=f},r.drawTriangle=function(t){var n=t.points[0][e.X],i=t.points[0][e.Y],u=t.points[1][e.X],o=t.points[1][e.Y],a=t.points[2][e.X],s=t.points[2][e.Y];r.drawLine(n,i,u,o,yo.BLACK),r.drawLine(u,o,a,s,yo.BLACK),r.drawLine(a,s,n,i,yo.BLACK)},r.fillTriangle=function(t){var n,i,u,o,a,s,c,f,l,p,d,h,D,m,v=Math.round(t.points[0][e.X]),y=Math.round(t.points[0][e.Y]),g=t.points[0][e.Z],w=t.points[0][e.W],A=Math.round(t.points[1][e.X]),E=Math.round(t.points[1][e.Y]),x=t.points[1][e.Z],F=t.points[1][e.W],b=Math.round(t.points[2][e.X]),C=Math.round(t.points[2][e.Y]),_=t.points[2][e.Z],M=t.points[2][e.W];y>E&&(v=(n=[A,v])[0],A=n[1],y=(i=[E,y])[0],E=i[1],g=(u=[x,g])[0],x=u[1],w=(o=[F,w])[0],F=o[1]),E>C&&(A=(a=[b,A])[0],b=a[1],E=(s=[C,E])[0],C=s[1],x=(c=[_,x])[0],_=c[1],F=(f=[M,F])[0],M=f[1]),y>E&&(v=(l=[A,v])[0],A=l[1],y=(p=[E,y])[0],E=p[1],g=(d=[x,g])[0],x=d[1],w=(h=[F,w])[0],F=h[1]);var B=[v,y,g,w],N=[A,E,x,F],S=[b,C,_,M],T=0,z=0;if(E-y!=0&&(T=(A-v)/Math.abs(E-y)),C-y!=0&&(z=(b-v)/Math.abs(C-y)),E-y!=0)for(var O=y;O<=E;O++){var I=Math.round(A+(O-E)*T);(U=Math.round(v+(O-y)*z))<I&&(U=(D=[I,U])[0],I=D[1]);for(var k=I;k<U;k++){var P=[k,O],R=(L=go.findWeights([B[e.X],B[e.Y]],[N[e.X],N[e.Y]],[S[e.X],S[e.Y]],P))[e.X],j=L[e.Y],q=L[e.Z];(Z=1-(R/B[e.W]+j/N[e.W]+q/S[e.W]))<r.getZBufferAt(k,O)&&(r.drawPixel(k,O,t.colour),r.setZBufferAt(k,O,Z))}}if(T=0,z=0,C-E!=0&&(T=(b-A)/Math.abs(C-E)),C-y!=0&&(z=(b-v)/Math.abs(C-y)),C-E!=0)for(O=E;O<=C;O++){var U;for(I=Math.round(A+(O-E)*T),(U=Math.round(v+(O-y)*z))<I&&(I=(m=[U,I])[0],U=m[1]),k=I;k<U;k++){var L,Z;P=[k,O],R=(L=go.findWeights([B[e.X],B[e.Y]],[N[e.X],N[e.Y]],[S[e.X],S[e.Y]],P))[e.X],j=L[e.Y],q=L[e.Z],(Z=1-(R/B[e.W]+j/N[e.W]+q/S[e.W]))<r.getZBufferAt(k,O)&&(r.drawPixel(k,O,t.colour),r.setZBufferAt(k,O,Z))}}},r.render=function(t){if(1==r.render_options.filled&&r.fillTriangle(t),1==r.render_options.vertex){var n=Math.round(t.points[0][e.X]-2),i=Math.round(t.points[0][e.Y]-2);r.drawVertex(n,i,4,yo.BLACK),n=Math.round(t.points[1][e.X]-2),i=Math.round(t.points[1][e.Y]-2),r.drawVertex(n,i,4,yo.BLACK),n=Math.round(t.points[2][e.X]-2),i=Math.round(t.points[2][e.Y]-2),r.drawVertex(n,i,4,yo.BLACK)}1==r.render_options.wireframe&&r.drawTriangle(t)},r.clearZBuffer=function(){r.z_buffer.fill(1)},r.getZBufferAt=function(e,t){return e<0||e>=r.canvas.width||t<0||t>=r.canvas.height?1:r.z_buffer[r.canvas.width*t+e]},r.setZBufferAt=function(e,t,n){e<0||e>=r.canvas.width||t<0||t>=r.canvas.height||(r.z_buffer[r.canvas.width*t+e]=n)},r}();wo.canvas=document.getElementById("my-canvas"),wo.canvas.style.background="lightgrey",wo.canvas.width=320,wo.canvas.height=200,wo.context=wo.canvas.getContext("2d"),wo.image_data=wo.context.getImageData(0,0,wo.canvas.width,wo.canvas.height),wo.pixel_buffer=wo.image_data.data,wo.render_options={vertex:!1,wireframe:!1,filled:!0},wo.z_buffer=Array(wo.canvas.width*wo.canvas.height).fill(1),wo.cull_mode=!0,function(e){e[e.LEFT_FRUSTUM_PLANE=0]="LEFT_FRUSTUM_PLANE",e[e.RIGHT_FRUSTUM_PLANE=1]="RIGHT_FRUSTUM_PLANE",e[e.TOP_FRUSTUM_PLANE=2]="TOP_FRUSTUM_PLANE",e[e.BOTTOM_FRUSTUM_PLANE=3]="BOTTOM_FRUSTUM_PLANE",e[e.NEAR_FRUSTUM_PLANE=4]="NEAR_FRUSTUM_PLANE",e[e.FAR_FRUSTUM_PLANE=5]="FAR_FRUSTUM_PLANE"}(oo||(oo={}));var Ao=function(){function t(){}return t.lerp=function(e,r,t){return e+t*(r-e)},t.initFrustumPlanes=function(e,r,n,i){var u=Math.cos(e/2),o=Math.sin(e/2),a=Math.cos(r/2),s=Math.sin(r/2),c=[0,0,0];t.frustum_planes[oo.LEFT_FRUSTUM_PLANE]={point:c,normal:[u,0,o]},t.frustum_planes[oo.RIGHT_FRUSTUM_PLANE]={point:c,normal:[-u,0,o]},t.frustum_planes[oo.TOP_FRUSTUM_PLANE]={point:c,normal:[0,-a,s]},t.frustum_planes[oo.BOTTOM_FRUSTUM_PLANE]={point:c,normal:[0,a,s]},t.frustum_planes[oo.NEAR_FRUSTUM_PLANE]={point:[0,0,n],normal:[0,0,1]},t.frustum_planes[oo.FAR_FRUSTUM_PLANE]={point:[0,0,i],normal:[0,0,-1]}},t.createPolygonFromTriangle=function(e,r,t,n){return{vertices:[e,r,t],num_vertices:3,colour:n}},t.clipPolygon=function(e){return e=t.clipPolygonAgainstPlane(e,oo.LEFT_FRUSTUM_PLANE),e=t.clipPolygonAgainstPlane(e,oo.RIGHT_FRUSTUM_PLANE),e=t.clipPolygonAgainstPlane(e,oo.TOP_FRUSTUM_PLANE),e=t.clipPolygonAgainstPlane(e,oo.BOTTOM_FRUSTUM_PLANE),e=t.clipPolygonAgainstPlane(e,oo.NEAR_FRUSTUM_PLANE),t.clipPolygonAgainstPlane(e,oo.FAR_FRUSTUM_PLANE)},t.clipPolygonAgainstPlane=function(r,n){var i=t.frustum_planes[n].point,u=t.frustum_planes[n].normal,o=Array(t.MAX_NUM_POLY_VERTICES),a=0,s=0,c=r.vertices[s],f=r.vertices[r.num_vertices-1],l=0;if(null==i||null==f)return r;for(var p=Do.dot(Do.subtract(f,i),u);c!=r.vertices[r.num_vertices];){if(null==i||null==f)return r;if((l=Do.dot(Do.subtract(c,i),u))*p<0){var d=p/(p-l),h=[t.lerp(f[e.X],c[e.X],d),t.lerp(f[e.Y],c[e.Y],d),t.lerp(f[e.Z],c[e.Z],d)];o[a]=h,a++}l>0&&(o[a]=c,a++),p=l,f=c,c=r.vertices[s+1],s++}for(var D=0;D<a;D++)r.vertices[D]=o[D];return r.num_vertices=a,r},t.trianglesFromPolygon=function(e){for(var t=[],n=0;n<e.num_vertices-2;n++){var i=n+1,u=n+2,o={points:[r.vec3_to_vec4(e.vertices[0]),r.vec3_to_vec4(e.vertices[i]),r.vec3_to_vec4(e.vertices[u])],colour:e.colour};t.push(o)}return t},t.MAX_NUM_POLY_VERTICES=10,t.MAX_NUM_POLY_TRIANGLES=10,t.NUM_PLANES=6,t.frustum_planes=Array(t.NUM_PLANES),t}(),Eo=function(){function r(){}return r.registerKeyDown=function(e){r.keysDown[e.key]=!0},r.registerKeyUp=function(e){r.keysDown[e.key]=!1},r.handleMouseEvent=function(e,t){vo.yaw+=.1*e.movementX*t,vo.pitch+=.1*e.movementY*t*r.yflip,vo.pitch>90&&(vo.pitch=90),vo.pitch<-90&&(vo.pitch=-90)},r.processInput=function(t){r.keysDown.c&&0==r.keyAlreadyDown_c&&(wo.cull_mode=!wo.cull_mode,r.keyAlreadyDown_c=!0),r.keysDown.c||(r.keyAlreadyDown_c=!1),r.keysDown[1]&&0==r.keyAlreadyDown_1&&(wo.render_options.vertex=!wo.render_options.vertex,r.keyAlreadyDown_1=!0),r.keysDown[1]||(r.keyAlreadyDown_1=!1),r.keysDown[2]&&0==r.keyAlreadyDown_2&&(wo.render_options.wireframe=!wo.render_options.wireframe,r.keyAlreadyDown_2=!0),r.keysDown[2]||(r.keyAlreadyDown_2=!1),r.keysDown[3]&&0==r.keyAlreadyDown_3&&(wo.render_options.filled=!wo.render_options.filled,r.keyAlreadyDown_3=!0),r.keysDown[3]||(r.keyAlreadyDown_3=!1),r.keysDown.i&&0==r.keyAlreadyDown_i&&(r.yflip=-1*r.yflip,r.keyAlreadyDown_i=!0),r.keysDown.i||(r.keyAlreadyDown_i=!1),r.keysDown.w&&(vo.forward_velocity=Do.multiply(vo.direction,1*t).valueOf(),vo.position=Do.add(vo.position,vo.forward_velocity)),r.keysDown.s&&(vo.forward_velocity=Do.multiply(vo.direction,-1*t).valueOf(),vo.position=Do.add(vo.position,vo.forward_velocity)),r.keysDown.e&&(vo.position=[vo.position[e.X],vo.position[e.Y]+3*t,vo.position[e.Z]]),r.keysDown.q&&(vo.position=[vo.position[e.X],vo.position[e.Y]-3*t,vo.position[e.Z]]),r.keysDown.a&&(vo.position=Do.add(vo.position,Do.multiply(vo.right,3*t)).valueOf()),r.keysDown.d&&(vo.position=Do.add(vo.position,Do.multiply(vo.right,-3*t)).valueOf())},r.keysDown={},r.keyAlreadyDown_1=!1,r.keyAlreadyDown_2=!1,r.keyAlreadyDown_3=!1,r.keyAlreadyDown_c=!1,r.keyAlreadyDown_i=!1,r.yflip=-1,r}(),xo=e.X,Fo=e.Y,bo=e.Z,Co=(e.W,[]);Co.push(new function(e){this.vertices=[[-1,-1,1],[1,-1,1],[-1,1,1],[1,1,1],[-1,1,-1],[1,1,-1],[-1,-1,-1],[1,-1,-1]],this.faces=[{vertexIndices:[0,1,2],colour:yo.RED},{vertexIndices:[2,1,3],colour:yo.RED},{vertexIndices:[2,3,4],colour:yo.GREEN},{vertexIndices:[4,3,5],colour:yo.GREEN},{vertexIndices:[4,5,6],colour:yo.BLUE},{vertexIndices:[6,5,7],colour:yo.BLUE},{vertexIndices:[6,7,0],colour:yo.YELLOW},{vertexIndices:[0,7,1],colour:yo.YELLOW},{vertexIndices:[1,7,3],colour:yo.MAGENTA},{vertexIndices:[3,7,5],colour:yo.MAGENTA},{vertexIndices:[6,0,4],colour:yo.CYAN},{vertexIndices:[4,0,2],colour:yo.CYAN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([-3,0,-5])),Co.push(new function(e){this.vertices=[[-1,-1,1],[1,-1,1],[0,1,0],[1,-1,-1],[-1,-1,-1]],this.faces=[{vertexIndices:[0,1,2],colour:yo.RED},{vertexIndices:[1,3,2],colour:yo.GREEN},{vertexIndices:[4,0,2],colour:yo.BLUE},{vertexIndices:[3,4,2],colour:yo.MAGENTA},{vertexIndices:[3,1,0],colour:yo.MAGENTA},{vertexIndices:[4,3,0],colour:yo.MAGENTA}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([0,0,0])),Co.push(new function(e){this.vertices=[[-1,-5,1],[1,-5,1],[-1,5,1],[1,5,1],[-1,5,-1],[1,5,-1],[-1,-5,-1],[1,-5,-1]],this.faces=[{vertexIndices:[0,1,2],colour:yo.RED},{vertexIndices:[2,1,3],colour:yo.RED},{vertexIndices:[2,3,4],colour:yo.GREEN},{vertexIndices:[4,3,5],colour:yo.GREEN},{vertexIndices:[4,5,6],colour:yo.BLUE},{vertexIndices:[6,5,7],colour:yo.BLUE},{vertexIndices:[6,7,0],colour:yo.YELLOW},{vertexIndices:[0,7,1],colour:yo.YELLOW},{vertexIndices:[1,7,3],colour:yo.MAGENTA},{vertexIndices:[3,7,5],colour:yo.MAGENTA},{vertexIndices:[6,0,4],colour:yo.CYAN},{vertexIndices:[4,0,2],colour:yo.CYAN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([-7,4,-3]));var _o=wo.canvas.height/wo.canvas.width,Mo=wo.canvas.width/wo.canvas.height,Bo=Math.PI/180*90,No=2*Math.atan(Math.tan(Bo/2)*Mo),So=mo.make_perspective(Bo,_o,.1,10),To=[];Ao.initFrustumPlanes(No,Bo,.1,10),vo.position=[0,0,-8];var zo=0,Oo=0,Io=0,ko=!1;document.addEventListener("keydown",Eo.registerKeyDown),document.addEventListener("keyup",Eo.registerKeyUp),wo.canvas.addEventListener("click",(function(){wo.canvas.requestPointerLock()})),document.addEventListener("mousemove",(function(e){document.pointerLockElement===wo.canvas&&Eo.handleMouseEvent(e,Oo)})),document.getElementById("btn-auto-on").addEventListener("click",(function(){ko=!0})),document.getElementById("btn-auto-off").addEventListener("click",(function(){ko=!1})),requestAnimationFrame((function e(t){Oo=((zo=t)-Io)/1e3,Io=zo,Eo.processInput(Oo),function(){ko&&Co.forEach((function(e){e.rotation[Fo]+=.01}));var e=vo.getTarget(),t=mo.make_view(vo.position,e,vo.up);Co.forEach((function(e){var n=mo.make_scaler(e.scale[xo],e.scale[Fo],e.scale[bo]),i=mo.make_translator(e.translation[xo],e.translation[Fo],e.translation[bo]),u=mo.make_rotator_x(e.rotation[xo]),o=mo.make_rotator_y(e.rotation[Fo]),a=mo.make_rotator_z(e.rotation[bo]),s=Do.identity(4);s=Do.multiply(s,n),s=Do.multiply(a,s),s=Do.multiply(o,s),s=Do.multiply(u,s),s=Do.multiply(i,s);for(var c=function(n){var i=e.faces[n],u=[r.vec3_to_vec4(e.vertices[i.vertexIndices[0]]),r.vec3_to_vec4(e.vertices[i.vertexIndices[1]]),r.vec3_to_vec4(e.vertices[i.vertexIndices[2]])];if(u.forEach((function(e,r){var n=Do.multiply(s,e).valueOf();n=Do.multiply(t,n).valueOf(),u[r]=n})),1==wo.cull_mode&&function(e){var t=r.vec4_to_vec3(e[0]),n=r.vec4_to_vec3(e[1]),i=r.vec4_to_vec3(e[2]),u=Do.subtract(n,t),o=Do.subtract(i,t);u=Do.divide(u,Do.norm(u)).valueOf(),o=Do.divide(o,Do.norm(o)).valueOf();var a=Do.cross(u,o).valueOf();a=Do.divide(a,Do.norm(a)).valueOf();var s=Do.subtract([0,0,0],t);return Do.dot(a,s)<0}(u))return"continue";var o=Ao.createPolygonFromTriangle(r.vec4_to_vec3(u[0]),r.vec4_to_vec3(u[1]),r.vec4_to_vec3(u[2]),i.colour);o=Ao.clipPolygon(o),Ao.trianglesFromPolygon(o).forEach((function(e){var r,t,n={points:(r=e.points,t=[],r.forEach((function(e){var r=mo.perspective_divide(So,e);r[xo]*=wo.canvas.width/2,r[Fo]*=wo.canvas.height/2,r[Fo]*=-1,r[xo]+=wo.canvas.width/2,r[Fo]+=wo.canvas.height/2,t.push(r)})),t),colour:i.colour};To.push(n)}))},f=0;f<e.faces.length;f++)c(f)}))}(),wo.clear(),wo.clearZBuffer(),To.forEach((function(e){wo.render(e)})),wo.refresh(),To=[],requestAnimationFrame(e)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,