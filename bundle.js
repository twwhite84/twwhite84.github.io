(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{g:()=>D});var e=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];function n(t,e){for(var n=[0,0,0],r=0;r<3;r++)n[r]+=t[r]+e[r];return n}function r(t,e){for(var n=[0,0,0],r=0;r<3;r++)n[r]+=t[r]-e[r];return n}function o(t,e){for(var n=[0,0,0],r=0;r<3;r++)n[r]+=t[r]/e;return n}function i(t,e){for(var n=[0,0,0],r=0;r<3;r++)n[r]+=t[r]*e;return n}function a(t,e){for(var n=[0,0,0,0],r=0;r<4;r++)for(var o=0;o<4;o++)n[r]+=t[r][o]*e[o];return n}function s(t,e){for(var n=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],r=0;r<4;r++)for(var o=0;o<4;o++){var i=t[r],a=[e[0][o],e[1][o],e[2][o],e[3][o]];n[r][o]=u(i,a)}return n}function c(t,e){for(var n=0,r=0;r<3;r++)n+=t[r]*e[r];return n}function u(t,e){for(var n=0,r=0;r<4;r++)n+=t[r]*e[r];return n}function l(t){for(var e=0,n=0;n<3;n++)e+=Math.pow(t[n],2);return Math.sqrt(e)}function f(t){var e=[0,0,0],n=l(t);return e[0]=t[0]/n,e[1]=t[1]/n,e[2]=t[2]/n,e}function d(t,e){var n=[0,0,0];return n[0]=t[1]*e[2]-t[2]*e[1],n[1]=t[2]*e[0]-t[0]*e[2],n[2]=t[0]*e[1]-t[1]*e[0],n}function h(t){return[t[0],t[1],t[2]]}function v(t){return[t[0],t[1],t[2],1]}var p,y=function(){function t(){}return t.make_scaler=function(t,e,n){return[[t,0,0,0],[0,e,0,0],[0,0,n,0],[0,0,0,1]]},t.make_translator=function(t,e,n){return[[1,0,0,t],[0,1,0,e],[0,0,1,n],[0,0,0,1]]},t.make_rotator_x=function(t){var e=Math.cos(t),n=Math.sin(t);return[[1,0,0,0],[0,e,-n,0],[0,n,e,0],[0,0,0,1]]},t.make_rotator_y=function(t){var e=Math.cos(t),n=Math.sin(t);return[[e,0,n,0],[0,1,0,0],[-n,0,e,0],[0,0,0,1]]},t.make_rotator_z=function(t){var e=Math.cos(t),n=Math.sin(t);return[[e,-n,0,0],[n,e,0,0],[0,0,1,0],[0,0,0,1]]},t.make_perspective=function(t,e,n,r){return[[e*(1/Math.tan(t/2)),0,0,0],[0,1/Math.tan(t/2),0,0],[0,0,r*(r-n),-r*n/(r-n)],[0,0,1,0]]},t.make_view=function(t,e,n){var i=r(e,t),a=o(i,l(i)),s=d(n,i),u=o(s,l(s)),f=d(a,u);return[[u[0],u[1],u[2],-c(u,t)],[f[0],f[1],f[2],-c(f,t)],[a[0],a[1],a[2],-c(a,t)],[0,0,0,1]]},t.perspective_divide=function(t,e){var n=a(t,e);return 0!=n[3]&&(n[0]/=n[3],n[1]/=n[3],n[2]/=n[3]),n},t}(),_=function(){function t(){this.direction=[0,0,1],this.forward_velocity=[0,0,0],this.pitch=0,this.position=[0,0,0],this.right=[1,0,0],this.up=[0,1,0],this.yaw=0}return t.prototype.getDirection=function(){return this.direction},t.prototype.setDirection=function(t){this.direction=t},t.prototype.getForwardVelocity=function(){return this.forward_velocity},t.prototype.setForwardVelocity=function(t){this.forward_velocity=t},t.prototype.getPitch=function(){return this.pitch},t.prototype.setPitch=function(t){this.pitch=t},t.prototype.getPosition=function(){return this.position},t.prototype.setPosition=function(t){this.position=t},t.prototype.getRight=function(){return this.right},t.prototype.setRight=function(t){this.right=t},t.prototype.getUp=function(){return this.up},t.prototype.setUp=function(t){this.up=t},t.prototype.getYaw=function(){return this.yaw},t.prototype.setYaw=function(t){this.yaw=t},t.prototype.findTarget=function(){var t=[0,0,1],r=y.make_rotator_y(this.yaw),o=y.make_rotator_x(this.pitch),i=e;i=s(o,i);var c=a(i=s(r,i),v(t));return this.direction=h(c),this.right=d(this.direction,this.up),n(this.position,this.direction)},t}();!function(t){t[t.LEFT=0]="LEFT",t[t.RIGHT=1]="RIGHT",t[t.TOP=2]="TOP",t[t.BOTTOM=3]="BOTTOM",t[t.NEAR=4]="NEAR",t[t.FAR=5]="FAR"}(p||(p={}));var g=function(){function t(){}return t.lerp=function(t,e,n){return t+n*(e-t)},t.initFrustumPlanes=function(e,n,r,o){var i=Math.cos(e/2),a=Math.sin(e/2),s=Math.cos(n/2),c=Math.sin(n/2),u=[0,0,0];t.frustum_planes[p.LEFT]={point:u,normal:[i,0,a]},t.frustum_planes[p.RIGHT]={point:u,normal:[-i,0,a]},t.frustum_planes[p.TOP]={point:u,normal:[0,-s,c]},t.frustum_planes[p.BOTTOM]={point:u,normal:[0,s,c]},t.frustum_planes[p.NEAR]={point:[0,0,r],normal:[0,0,1]},t.frustum_planes[p.FAR]={point:[0,0,o],normal:[0,0,-1]}},t.createPolygonFromTriangle=function(t,e,n,r){return{vertices:[t,e,n],num_vertices:3,colour:r}},t.clipPolygon=function(e){return e=t.clipPolygonAgainstPlane(e,p.LEFT),e=t.clipPolygonAgainstPlane(e,p.RIGHT),e=t.clipPolygonAgainstPlane(e,p.TOP),e=t.clipPolygonAgainstPlane(e,p.BOTTOM),e=t.clipPolygonAgainstPlane(e,p.NEAR),t.clipPolygonAgainstPlane(e,p.FAR)},t.clipPolygonAgainstPlane=function(e,n){var o=t.frustum_planes[n].point,i=t.frustum_planes[n].normal,a=[],s=e.vertices[e.vertices.length],u=e.vertices[e.vertices.length-1];if(null!=u)for(var l=c(r(u,o),i),f=0;f<e.num_vertices;f++){var d=c(r(s=e.vertices[f],o),i);if(d*l<0){var h=l/(l-d),v=[t.lerp(u[0],s[0],h),t.lerp(u[1],s[1],h),t.lerp(u[2],s[2],h)];a.push(v)}d>0&&a.push(s),l=d,u=s}return e.vertices=a,e.num_vertices=a.length,e},t.trianglesFromPolygon=function(t){for(var e=[],n=0;n<t.num_vertices-2;n++){var r=n+1,o=n+2,i={points:[v(t.vertices[0]),v(t.vertices[r]),v(t.vertices[o])],colour:t.colour};e.push(i)}return e},t.frustum_planes=Array(6),t}(),w={RED:[255,0,0,255],GREEN:[0,255,0,255],BLUE:[0,0,255,255],YELLOW:[255,255,0,255],CYAN:[0,255,255,255],MAGENTA:[255,0,255,255],WHITE:[255,255,255,255],BLACK:[0,0,0,255],BROWN:[165,42,42,255]},m=function(){function t(){}return t.findWeights=function(t,e,n,r){var o=[n[0]-t[0],n[1]-t[1]],i=[e[0]-t[0],e[1]-t[1]],a=[n[0]-r[0],n[1]-r[1]],s=[e[0]-r[0],e[1]-r[1]],c=[r[0]-t[0],r[1]-t[1]],u=o[0]*i[1]-o[1]*i[0],l=(a[0]*s[1]-a[1]*s[0])/u,f=(o[0]*c[1]-o[1]*c[0])/u;return[l,f,1-l-f]},t}(),A=function(){function t(){}return t.clear=function(){t.pixel_buffer.fill(0)},t.refresh=function(){t.context.putImageData(t.image_data,0,0)},t.drawPixel=function(e,n,r){var o=4*(n*t.canvas.width+e);t.pixel_buffer[o+0]=r[0],t.pixel_buffer[o+1]=r[1],t.pixel_buffer[o+2]=r[2],t.pixel_buffer[o+3]=r[3]},t.drawVertex=function(e,n,r,o){for(var i=e;i<e+r;i++)for(var a=n;a<n+r;a++)t.drawPixel(i,a,o)},t.drawLine=function(e,n,r,o,i){for(var a=r-e,s=o-n,c=Math.abs(a)>=Math.abs(s)?Math.abs(a):Math.abs(s),u=a/c,l=s/c,f=e,d=n,h=0;h<=Math.round(c);h++)t.drawPixel(Math.round(f),Math.round(d),i),f+=u,d+=l},t.drawTriangle=function(e){var n=e.points[0][0],r=e.points[0][1],o=e.points[1][0],i=e.points[1][1],a=e.points[2][0],s=e.points[2][1];t.drawLine(n,r,o,i,w.BLACK),t.drawLine(o,i,a,s,w.BLACK),t.drawLine(a,s,n,r,w.BLACK)},t.fillTriangle=function(e){var n,r,o,i,a,s,c,u,l,f,d,h,v,p,y=Math.round(e.points[0][0]),_=Math.round(e.points[0][1]),g=e.points[0][2],w=e.points[0][3],A=Math.round(e.points[1][0]),x=Math.round(e.points[1][1]),k=e.points[1][2],P=e.points[1][3],E=Math.round(e.points[2][0]),M=Math.round(e.points[2][1]),D=e.points[2][2],I=e.points[2][3];_>x&&(y=(n=[A,y])[0],A=n[1],_=(r=[x,_])[0],x=r[1],g=(o=[k,g])[0],k=o[1],w=(i=[P,w])[0],P=i[1]),x>M&&(A=(a=[E,A])[0],E=a[1],x=(s=[M,x])[0],M=s[1],k=(c=[D,k])[0],D=c[1],P=(u=[I,P])[0],I=u[1]),_>x&&(y=(l=[A,y])[0],A=l[1],_=(f=[x,_])[0],x=f[1],g=(d=[k,g])[0],k=d[1],w=(h=[P,w])[0],P=h[1]);var L=[y,_,g,w],T=[A,x,k,P],R=[E,M,D,I],B=0,N=0;if(x-_!=0&&(B=(A-y)/Math.abs(x-_)),M-_!=0&&(N=(E-y)/Math.abs(M-_)),x-_!=0)for(var b=_;b<=x;b++){var O=Math.round(A+(b-x)*B);(W=Math.round(y+(b-_)*N))<O&&(W=(v=[O,W])[0],O=v[1]);for(var F=O;F<W;F++){var C=[F,b],G=(K=m.findWeights([L[0],L[1]],[T[0],T[1]],[R[0],R[1]],C))[0],Y=K[1],z=K[2];(U=1-(G/L[3]+Y/T[3]+z/R[3]))<t.getZBufferAt(F,b)&&(t.drawPixel(F,b,e.colour),t.setZBufferAt(F,b,U))}}if(B=0,N=0,M-x!=0&&(B=(E-A)/Math.abs(M-x)),M-_!=0&&(N=(E-y)/Math.abs(M-_)),M-x!=0)for(b=x;b<=M;b++){var W;for(O=Math.round(A+(b-x)*B),(W=Math.round(y+(b-_)*N))<O&&(O=(p=[W,O])[0],W=p[1]),F=O;F<W;F++){var K,U;C=[F,b],G=(K=m.findWeights([L[0],L[1]],[T[0],T[1]],[R[0],R[1]],C))[0],Y=K[1],z=K[2],(U=1-(G/L[3]+Y/T[3]+z/R[3]))<t.getZBufferAt(F,b)&&(t.drawPixel(F,b,e.colour),t.setZBufferAt(F,b,U))}}},t.render=function(e){if(1==t.render_options.filled&&t.fillTriangle(e),1==t.render_options.vertex){var n=Math.round(e.points[0][0]-2),r=Math.round(e.points[0][1]-2);t.drawVertex(n,r,4,w.BLACK),n=Math.round(e.points[1][0]-2),r=Math.round(e.points[1][1]-2),t.drawVertex(n,r,4,w.BLACK),n=Math.round(e.points[2][0]-2),r=Math.round(e.points[2][1]-2),t.drawVertex(n,r,4,w.BLACK)}1==t.render_options.wireframe&&t.drawTriangle(e)},t.clearZBuffer=function(){t.z_buffer.fill(1)},t.getZBufferAt=function(e,n){return e<0||e>=t.canvas.width||n<0||n>=t.canvas.height?1:t.z_buffer[t.canvas.width*n+e]},t.setZBufferAt=function(e,n,r){e<0||e>=t.canvas.width||n<0||n>=t.canvas.height||(t.z_buffer[t.canvas.width*n+e]=r)},t}();A.canvas=document.getElementById("my-canvas"),A.canvas.style.background="black",A.canvas.width=320,A.canvas.height=200,A.context=A.canvas.getContext("2d"),A.image_data=A.context.getImageData(0,0,A.canvas.width,A.canvas.height),A.pixel_buffer=A.image_data.data,A.render_options={vertex:!1,wireframe:!1,filled:!0},A.z_buffer=Array(A.canvas.width*A.canvas.height).fill(1),A.cull_mode=!0;var x=function(){function t(){}return t.registerKeyDown=function(e){t.keysDown[e.key]=!0},t.registerKeyUp=function(e){t.keysDown[e.key]=!1},t.handleMouseEvent=function(e,n){var r=D.getCamera();r.setYaw(r.getYaw()+.1*e.movementX*n),r.setPitch(r.getPitch()+.1*e.movementY*n*t.yflip);var o=89*Math.PI/180;r.getPitch()>o&&r.setPitch(o),r.getPitch()<-o&&r.setPitch(-o)},t.processInput=function(e){var r=D.getCamera();t.keysDown.c&&0==t.keyAlreadyDown_c&&(A.cull_mode=!A.cull_mode,t.keyAlreadyDown_c=!0),t.keysDown.c||(t.keyAlreadyDown_c=!1),t.keysDown[1]&&0==t.keyAlreadyDown_1&&(A.render_options.vertex=!A.render_options.vertex,t.keyAlreadyDown_1=!0),t.keysDown[1]||(t.keyAlreadyDown_1=!1),t.keysDown[2]&&0==t.keyAlreadyDown_2&&(A.render_options.wireframe=!A.render_options.wireframe,t.keyAlreadyDown_2=!0),t.keysDown[2]||(t.keyAlreadyDown_2=!1),t.keysDown[3]&&0==t.keyAlreadyDown_3&&(A.render_options.filled=!A.render_options.filled,t.keyAlreadyDown_3=!0),t.keysDown[3]||(t.keyAlreadyDown_3=!1),t.keysDown.i&&0==t.keyAlreadyDown_i&&(t.yflip=-1*t.yflip,t.keyAlreadyDown_i=!0),t.keysDown.i||(t.keyAlreadyDown_i=!1),t.keysDown.w&&(r.setForwardVelocity(i(r.getDirection(),1*e)),r.setPosition(n(r.getPosition(),r.getForwardVelocity()))),t.keysDown.s&&(r.setForwardVelocity(i(r.getDirection(),-1*e)),r.setPosition(n(r.getPosition(),r.getForwardVelocity()))),t.keysDown.e&&r.setPosition([r.getPosition()[0],r.getPosition()[1]+3*e,r.getPosition()[2]]),t.keysDown.q&&r.setPosition([r.getPosition()[0],r.getPosition()[1]-3*e,r.getPosition()[2]]),t.keysDown.a&&r.setPosition(n(r.getPosition(),i(f(r.getRight()),3*e))),t.keysDown.d&&r.setPosition(n(r.getPosition(),i(f(r.getRight()),-3*e)))},t.keysDown={},t.keyAlreadyDown_1=!1,t.keyAlreadyDown_2=!1,t.keyAlreadyDown_3=!1,t.keyAlreadyDown_c=!1,t.keyAlreadyDown_i=!1,t.yflip=-1,t}(),k=function(t){this.vertices=[[-1,-1,1],[1,-1,1],[-1,1,1],[1,1,1],[-1,1,-1],[1,1,-1],[-1,-1,-1],[1,-1,-1]],this.faces=[{vertexIndices:[0,1,2],colour:w.RED},{vertexIndices:[2,1,3],colour:w.RED},{vertexIndices:[2,3,4],colour:w.GREEN},{vertexIndices:[4,3,5],colour:w.GREEN},{vertexIndices:[4,5,6],colour:w.BLUE},{vertexIndices:[6,5,7],colour:w.BLUE},{vertexIndices:[6,7,0],colour:w.YELLOW},{vertexIndices:[0,7,1],colour:w.YELLOW},{vertexIndices:[1,7,3],colour:w.MAGENTA},{vertexIndices:[3,7,5],colour:w.MAGENTA},{vertexIndices:[6,0,4],colour:w.CYAN},{vertexIndices:[4,0,2],colour:w.CYAN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=t},P=function(t){this.vertices=[[-1,-1,1],[1,-1,1],[0,1,0],[1,-1,-1],[-1,-1,-1]],this.faces=[{vertexIndices:[0,1,2],colour:w.RED},{vertexIndices:[1,3,2],colour:w.GREEN},{vertexIndices:[4,0,2],colour:w.BLUE},{vertexIndices:[3,4,2],colour:w.MAGENTA},{vertexIndices:[3,1,0],colour:w.MAGENTA},{vertexIndices:[4,3,0],colour:w.MAGENTA}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=t},E=function(t){this.vertices=[[-1,-5,1],[1,-5,1],[-1,5,1],[1,5,1],[-1,5,-1],[1,5,-1],[-1,-5,-1],[1,-5,-1]],this.faces=[{vertexIndices:[0,1,2],colour:w.RED},{vertexIndices:[2,1,3],colour:w.RED},{vertexIndices:[2,3,4],colour:w.GREEN},{vertexIndices:[4,3,5],colour:w.GREEN},{vertexIndices:[4,5,6],colour:w.BLUE},{vertexIndices:[6,5,7],colour:w.BLUE},{vertexIndices:[6,7,0],colour:w.YELLOW},{vertexIndices:[0,7,1],colour:w.YELLOW},{vertexIndices:[1,7,3],colour:w.MAGENTA},{vertexIndices:[3,7,5],colour:w.MAGENTA},{vertexIndices:[6,0,4],colour:w.CYAN},{vertexIndices:[4,0,2],colour:w.CYAN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=t},M=function(t){this.vertices=[[-10,0,-10],[10,0,-10],[10,0,10],[-10,0,10]],this.faces=[{vertexIndices:[2,1,0],colour:w.BROWN},{vertexIndices:[3,2,0],colour:w.BROWN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=t},D=function(){function t(){}return t.init=function(){t.meshes.push(new k([-3,0,-5])),t.meshes.push(new P([0,0,0])),t.meshes.push(new E([-7,4,-3])),t.meshes.push(new M([0,-1,0])),t.aspect_y=A.canvas.height/A.canvas.width,t.aspect_x=A.canvas.width/A.canvas.height,t.fov_y=Math.PI/180*90,t.fov_x=2*Math.atan(Math.tan(t.fov_y/2)*t.aspect_x),t.z_near=.1,t.z_far=20,t.projection_matrix=y.make_perspective(t.fov_y,t.aspect_y,t.z_near,t.z_far),t.triangles=[],g.initFrustumPlanes(t.fov_x,t.fov_y,t.z_near,t.z_far),t.camera.setPosition([0,0,-8])},t.project=function(e){var n=[];return e.forEach((function(e){var r=y.perspective_divide(t.projection_matrix,e);r[0]*=A.canvas.width/2,r[1]*=A.canvas.height/2,r[1]*=-1,r[0]+=A.canvas.width/2,r[1]+=A.canvas.height/2,n.push(r)})),n},t.shouldCull=function(t){var e=h(t[0]),n=h(t[1]),i=h(t[2]),a=r(n,e),s=r(i,e),u=d(a=o(a,l(a)),s=o(s,l(s)));return c(u=o(u,l(u)),r([0,0,0],e))<0},t.update=function(){var n=t.camera.findTarget(),r=y.make_view(t.camera.getPosition(),n,t.camera.getUp());t.meshes.forEach((function(n){var o=y.make_scaler(n.scale[0],n.scale[1],n.scale[2]),i=y.make_translator(n.translation[0],n.translation[1],n.translation[2]),c=y.make_rotator_x(n.rotation[0]),u=y.make_rotator_y(n.rotation[1]),l=y.make_rotator_z(n.rotation[2]),f=e;f=s(f,o),f=s(l,f),f=s(u,f),f=s(c,f),f=s(i,f);for(var d=function(e){var o=n.faces[e],i=[v(n.vertices[o.vertexIndices[0]]),v(n.vertices[o.vertexIndices[1]]),v(n.vertices[o.vertexIndices[2]])];if(i.forEach((function(t,e){var n=a(f,t);n=a(r,n),i[e]=n})),1==A.cull_mode&&t.shouldCull(i))return"continue";var s=g.createPolygonFromTriangle(h(i[0]),h(i[1]),h(i[2]),o.colour);s=g.clipPolygon(s),g.trianglesFromPolygon(s).forEach((function(e){var n={points:t.project(e.points),colour:o.colour};t.triangles.push(n)}))},p=0;p<n.faces.length;p++)d(p)}))},t.render=function(){A.clear(),A.clearZBuffer(),t.triangles.forEach((function(t){A.render(t)})),A.refresh(),t.triangles=[]},t.mainloop=function(e){t.ts=e,t.ts_delta=(t.ts-t.ts_old)/1e3,t.ts_old=t.ts,x.processInput(t.ts_delta),t.update(),t.render(),requestAnimationFrame(t.mainloop)},t.getDelta=function(){return t.ts_delta},t.getCamera=function(){return t.camera},t.run=function(){document.addEventListener("keydown",x.registerKeyDown),document.addEventListener("keyup",x.registerKeyUp),A.canvas.addEventListener("click",(function(){A.canvas.requestPointerLock()})),document.addEventListener("mousemove",(function(e){document.pointerLockElement===A.canvas&&x.handleMouseEvent(e,t.getDelta())})),t.init(),requestAnimationFrame(t.mainloop)},t.meshes=[],t.aspect_x=0,t.aspect_y=0,t.fov_x=0,t.fov_y=0,t.z_near=0,t.z_far=0,t.projection_matrix=e,t.triangles=[],t.ts=0,t.ts_delta=0,t.ts_old=0,t.camera=new _,t}();D.run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,