(()=>{"use strict";var e=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];function n(e,n){for(var t=[0,0,0],r=0;r<3;r++)t[r]+=e[r]+n[r];return t}function t(e,n){for(var t=[0,0,0],r=0;r<3;r++)t[r]+=e[r]-n[r];return t}function r(e,n){for(var t=[0,0,0],r=0;r<3;r++)t[r]+=e[r]/n;return t}function o(e,n){for(var t=[0,0,0],r=0;r<3;r++)t[r]+=e[r]*n;return t}function i(e,n){for(var t=[0,0,0,0],r=0;r<4;r++)for(var o=0;o<4;o++)t[r]+=e[r][o]*n[o];return t}function a(e,n){for(var t=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],r=0;r<4;r++)for(var o=0;o<4;o++){var i=e[r],a=[n[0][o],n[1][o],n[2][o],n[3][o]];t[r][o]=c(i,a)}return t}function s(e,n){for(var t=0,r=0;r<3;r++)t+=e[r]*n[r];return t}function c(e,n){for(var t=0,r=0;r<4;r++)t+=e[r]*n[r];return t}function u(e){for(var n=0,t=0;t<3;t++)n+=Math.pow(e[t],2);return Math.sqrt(n)}function l(e,n){var t=[0,0,0];return t[0]=e[1]*n[2]-e[2]*n[1],t[1]=e[2]*n[0]-e[0]*n[2],t[2]=e[0]*n[1]-e[1]*n[0],t}function f(e){return[e[0],e[1],e[2]]}function v(e){return[e[0],e[1],e[2],1]}var d,_=function(){function e(){}return e.make_scaler=function(e,n,t){return[[e,0,0,0],[0,n,0,0],[0,0,t,0],[0,0,0,1]]},e.make_translator=function(e,n,t){return[[1,0,0,e],[0,1,0,n],[0,0,1,t],[0,0,0,1]]},e.make_rotator_x=function(e){var n=Math.cos(e),t=Math.sin(e);return[[1,0,0,0],[0,n,-t,0],[0,t,n,0],[0,0,0,1]]},e.make_rotator_y=function(e){var n=Math.cos(e),t=Math.sin(e);return[[n,0,t,0],[0,1,0,0],[-t,0,n,0],[0,0,0,1]]},e.make_rotator_z=function(e){var n=Math.cos(e),t=Math.sin(e);return[[n,-t,0,0],[t,n,0,0],[0,0,1,0],[0,0,0,1]]},e.make_perspective=function(e,n,t,r){return[[n*(1/Math.tan(e/2)),0,0,0],[0,1/Math.tan(e/2),0,0],[0,0,r*(r-t),-r*t/(r-t)],[0,0,1,0]]},e.make_view=function(e,n,o){var i=t(n,e),a=r(i,u(i)),c=l(o,i),f=r(c,u(c)),v=l(a,f);return[[f[0],f[1],f[2],-s(f,e)],[v[0],v[1],v[2],-s(v,e)],[a[0],a[1],a[2],-s(a,e)],[0,0,0,1]]},e.perspective_divide=function(e,n){var t=i(e,n);return 0!=t[3]&&(t[0]/=t[3],t[1]/=t[3],t[2]/=t[3]),t},e}(),h=function(){function t(){}return t.getTarget=function(){var r=[0,0,1],o=_.make_rotator_y(t.yaw),s=_.make_rotator_x(t.pitch),c=e;c=a(s,c);var u=i(c=a(o,c),v(r));return t.direction=f(u),t.right=l(t.direction,t.up),n(t.position,t.direction)},t.rotateCameraX=function(e){t.pitch+=e},t.rotateCameraY=function(e){t.yaw+=e},t.position=[0,0,0],t.direction=[0,0,1],t.up=[0,1,0],t.right=[1,0,0],t.forward_velocity=[0,0,0],t.yaw=0,t.pitch=0,t}();!function(e){e[e.LEFT_FRUSTUM_PLANE=0]="LEFT_FRUSTUM_PLANE",e[e.RIGHT_FRUSTUM_PLANE=1]="RIGHT_FRUSTUM_PLANE",e[e.TOP_FRUSTUM_PLANE=2]="TOP_FRUSTUM_PLANE",e[e.BOTTOM_FRUSTUM_PLANE=3]="BOTTOM_FRUSTUM_PLANE",e[e.NEAR_FRUSTUM_PLANE=4]="NEAR_FRUSTUM_PLANE",e[e.FAR_FRUSTUM_PLANE=5]="FAR_FRUSTUM_PLANE"}(d||(d={}));var p=function(){function e(){}return e.lerp=function(e,n,t){return e+t*(n-e)},e.initFrustumPlanes=function(n,t,r,o){var i=Math.cos(n/2),a=Math.sin(n/2),s=Math.cos(t/2),c=Math.sin(t/2),u=[0,0,0];e.frustum_planes[d.LEFT_FRUSTUM_PLANE]={point:u,normal:[i,0,a]},e.frustum_planes[d.RIGHT_FRUSTUM_PLANE]={point:u,normal:[-i,0,a]},e.frustum_planes[d.TOP_FRUSTUM_PLANE]={point:u,normal:[0,-s,c]},e.frustum_planes[d.BOTTOM_FRUSTUM_PLANE]={point:u,normal:[0,s,c]},e.frustum_planes[d.NEAR_FRUSTUM_PLANE]={point:[0,0,r],normal:[0,0,1]},e.frustum_planes[d.FAR_FRUSTUM_PLANE]={point:[0,0,o],normal:[0,0,-1]}},e.createPolygonFromTriangle=function(e,n,t,r){return{vertices:[e,n,t],num_vertices:3,colour:r}},e.clipPolygon=function(n){return n=e.clipPolygonAgainstPlane(n,d.LEFT_FRUSTUM_PLANE),n=e.clipPolygonAgainstPlane(n,d.RIGHT_FRUSTUM_PLANE),n=e.clipPolygonAgainstPlane(n,d.TOP_FRUSTUM_PLANE),n=e.clipPolygonAgainstPlane(n,d.BOTTOM_FRUSTUM_PLANE),n=e.clipPolygonAgainstPlane(n,d.NEAR_FRUSTUM_PLANE),e.clipPolygonAgainstPlane(n,d.FAR_FRUSTUM_PLANE)},e.clipPolygonAgainstPlane=function(n,r){var o=e.frustum_planes[r].point,i=e.frustum_planes[r].normal,a=[],c=n.vertices[n.vertices.length],u=n.vertices[n.vertices.length-1];if(null!=u)for(var l=s(t(u,o),i),f=0;f<n.num_vertices;f++){var v=s(t(c=n.vertices[f],o),i);if(v*l<0){var d=l/(l-v),_=[e.lerp(u[0],c[0],d),e.lerp(u[1],c[1],d),e.lerp(u[2],c[2],d)];a.push(_)}v>0&&a.push(c),l=v,u=c}return n.vertices=a,n.num_vertices=a.length,n},e.trianglesFromPolygon=function(e){for(var n=[],t=0;t<e.num_vertices-2;t++){var r=t+1,o=t+2,i={points:[v(e.vertices[0]),v(e.vertices[r]),v(e.vertices[o])],colour:e.colour};n.push(i)}return n},e.MAX_NUM_POLY_VERTICES=10,e.MAX_NUM_POLY_TRIANGLES=10,e.NUM_PLANES=6,e.frustum_planes=Array(e.NUM_PLANES),e}(),A=function(){function e(){}return e.RED=[255,0,0,255],e.GREEN=[0,255,0,255],e.BLUE=[0,0,255,255],e.YELLOW=[255,255,0,255],e.CYAN=[0,255,255,255],e.MAGENTA=[255,0,255,255],e.WHITE=[255,255,255,255],e.BLACK=[0,0,0,255],e.BROWN=[165,42,42,255],e}(),y=function(){function e(){}return e.findWeights=function(e,n,t,r){var o=[t[0]-e[0],t[1]-e[1]],i=[n[0]-e[0],n[1]-e[1]],a=[t[0]-r[0],t[1]-r[1]],s=[n[0]-r[0],n[1]-r[1]],c=[r[0]-e[0],r[1]-e[1]],u=o[0]*i[1]-o[1]*i[0],l=(a[0]*s[1]-a[1]*s[0])/u,f=(o[0]*c[1]-o[1]*c[0])/u;return[l,f,1-l-f]},e}(),w=function(){function e(){}return e.clear=function(){e.pixel_buffer.fill(0)},e.refresh=function(){e.context.putImageData(e.image_data,0,0)},e.drawPixel=function(n,t,r){var o=4*(t*e.canvas.width+n);e.pixel_buffer[o+0]=r[0],e.pixel_buffer[o+1]=r[1],e.pixel_buffer[o+2]=r[2],e.pixel_buffer[o+3]=r[3]},e.drawVertex=function(n,t,r,o){for(var i=n;i<n+r;i++)for(var a=t;a<t+r;a++)e.drawPixel(i,a,o)},e.drawLine=function(n,t,r,o,i){for(var a=r-n,s=o-t,c=Math.abs(a)>=Math.abs(s)?Math.abs(a):Math.abs(s),u=a/c,l=s/c,f=n,v=t,d=0;d<=Math.round(c);d++)e.drawPixel(Math.round(f),Math.round(v),i),f+=u,v+=l},e.drawTriangle=function(n){var t=n.points[0][0],r=n.points[0][1],o=n.points[1][0],i=n.points[1][1],a=n.points[2][0],s=n.points[2][1];e.drawLine(t,r,o,i,A.BLACK),e.drawLine(o,i,a,s,A.BLACK),e.drawLine(a,s,t,r,A.BLACK)},e.fillTriangle=function(n){var t,r,o,i,a,s,c,u,l,f,v,d,_,h,p=Math.round(n.points[0][0]),A=Math.round(n.points[0][1]),w=n.points[0][2],E=n.points[0][3],M=Math.round(n.points[1][0]),m=Math.round(n.points[1][1]),g=n.points[1][2],L=n.points[1][3],k=Math.round(n.points[2][0]),T=Math.round(n.points[2][1]),x=n.points[2][2],P=n.points[2][3];A>m&&(p=(t=[M,p])[0],M=t[1],A=(r=[m,A])[0],m=r[1],w=(o=[g,w])[0],g=o[1],E=(i=[L,E])[0],L=i[1]),m>T&&(M=(a=[k,M])[0],k=a[1],m=(s=[T,m])[0],T=s[1],g=(c=[x,g])[0],x=c[1],L=(u=[P,L])[0],P=u[1]),A>m&&(p=(l=[M,p])[0],M=l[1],A=(f=[m,A])[0],m=f[1],w=(v=[g,w])[0],g=v[1],E=(d=[L,E])[0],L=d[1]);var U=[p,A,w,E],N=[M,m,g,L],R=[k,T,x,P],D=0,I=0;if(m-A!=0&&(D=(M-p)/Math.abs(m-A)),T-A!=0&&(I=(k-p)/Math.abs(T-A)),m-A!=0)for(var F=A;F<=m;F++){var B=Math.round(M+(F-m)*D);(Y=Math.round(p+(F-A)*I))<B&&(Y=(_=[B,Y])[0],B=_[1]);for(var S=B;S<Y;S++){var O=[S,F],b=(W=y.findWeights([U[0],U[1]],[N[0],N[1]],[R[0],R[1]],O))[0],G=W[1],C=W[2];(K=1-(b/U[3]+G/N[3]+C/R[3]))<e.getZBufferAt(S,F)&&(e.drawPixel(S,F,n.colour),e.setZBufferAt(S,F,K))}}if(D=0,I=0,T-m!=0&&(D=(k-M)/Math.abs(T-m)),T-A!=0&&(I=(k-p)/Math.abs(T-A)),T-m!=0)for(F=m;F<=T;F++){var Y;for(B=Math.round(M+(F-m)*D),(Y=Math.round(p+(F-A)*I))<B&&(B=(h=[Y,B])[0],Y=h[1]),S=B;S<Y;S++){var W,K;O=[S,F],b=(W=y.findWeights([U[0],U[1]],[N[0],N[1]],[R[0],R[1]],O))[0],G=W[1],C=W[2],(K=1-(b/U[3]+G/N[3]+C/R[3]))<e.getZBufferAt(S,F)&&(e.drawPixel(S,F,n.colour),e.setZBufferAt(S,F,K))}}},e.render=function(n){if(1==e.render_options.filled&&e.fillTriangle(n),1==e.render_options.vertex){var t=Math.round(n.points[0][0]-2),r=Math.round(n.points[0][1]-2);e.drawVertex(t,r,4,A.BLACK),t=Math.round(n.points[1][0]-2),r=Math.round(n.points[1][1]-2),e.drawVertex(t,r,4,A.BLACK),t=Math.round(n.points[2][0]-2),r=Math.round(n.points[2][1]-2),e.drawVertex(t,r,4,A.BLACK)}1==e.render_options.wireframe&&e.drawTriangle(n)},e.clearZBuffer=function(){e.z_buffer.fill(1)},e.getZBufferAt=function(n,t){return n<0||n>=e.canvas.width||t<0||t>=e.canvas.height?1:e.z_buffer[e.canvas.width*t+n]},e.setZBufferAt=function(n,t,r){n<0||n>=e.canvas.width||t<0||t>=e.canvas.height||(e.z_buffer[e.canvas.width*t+n]=r)},e}();w.canvas=document.getElementById("my-canvas"),w.canvas.style.background="black",w.canvas.width=320,w.canvas.height=200,w.context=w.canvas.getContext("2d"),w.image_data=w.context.getImageData(0,0,w.canvas.width,w.canvas.height),w.pixel_buffer=w.image_data.data,w.render_options={vertex:!1,wireframe:!1,filled:!0},w.z_buffer=Array(w.canvas.width*w.canvas.height).fill(1),w.cull_mode=!0;var E,M,m,g,L=function(){function e(){}return e.registerKeyDown=function(n){e.keysDown[n.key]=!0},e.registerKeyUp=function(n){e.keysDown[n.key]=!1},e.handleMouseEvent=function(n,t){h.yaw+=.1*n.movementX*t,h.pitch+=.1*n.movementY*t*e.yflip,h.pitch>3.1415/180*89&&(h.pitch=3.1415/180*89),h.pitch<3.1415/180*-89&&(h.pitch=3.1415/180*-89)},e.processInput=function(t){e.keysDown.c&&0==e.keyAlreadyDown_c&&(w.cull_mode=!w.cull_mode,e.keyAlreadyDown_c=!0),e.keysDown.c||(e.keyAlreadyDown_c=!1),e.keysDown[1]&&0==e.keyAlreadyDown_1&&(w.render_options.vertex=!w.render_options.vertex,e.keyAlreadyDown_1=!0),e.keysDown[1]||(e.keyAlreadyDown_1=!1),e.keysDown[2]&&0==e.keyAlreadyDown_2&&(w.render_options.wireframe=!w.render_options.wireframe,e.keyAlreadyDown_2=!0),e.keysDown[2]||(e.keyAlreadyDown_2=!1),e.keysDown[3]&&0==e.keyAlreadyDown_3&&(w.render_options.filled=!w.render_options.filled,e.keyAlreadyDown_3=!0),e.keysDown[3]||(e.keyAlreadyDown_3=!1),e.keysDown.i&&0==e.keyAlreadyDown_i&&(e.yflip=-1*e.yflip,e.keyAlreadyDown_i=!0),e.keysDown.i||(e.keyAlreadyDown_i=!1),e.keysDown.w&&(h.forward_velocity=o(h.direction,1*t),h.position=n(h.position,h.forward_velocity)),e.keysDown.s&&(h.forward_velocity=o(h.direction,-1*t),h.position=n(h.position,h.forward_velocity)),e.keysDown.e&&(h.position=[h.position[0],h.position[1]+3*t,h.position[2]]),e.keysDown.q&&(h.position=[h.position[0],h.position[1]-3*t,h.position[2]]),e.keysDown.a&&(h.position=n(h.position,o(h.right,3*t))),e.keysDown.d&&(h.position=n(h.position,o(h.right,-3*t)))},e.keysDown={},e.keyAlreadyDown_1=!1,e.keyAlreadyDown_2=!1,e.keyAlreadyDown_3=!1,e.keyAlreadyDown_c=!1,e.keyAlreadyDown_i=!1,e.yflip=-1,e}(),k=[],T=e,x=[],P=0,U=0,N=0;document.addEventListener("keydown",L.registerKeyDown),document.addEventListener("keyup",L.registerKeyUp),w.canvas.addEventListener("click",(function(){w.canvas.requestPointerLock()})),document.addEventListener("mousemove",(function(e){document.pointerLockElement===w.canvas&&L.handleMouseEvent(e,U)})),k.push(new function(e){this.vertices=[[-1,-1,1],[1,-1,1],[-1,1,1],[1,1,1],[-1,1,-1],[1,1,-1],[-1,-1,-1],[1,-1,-1]],this.faces=[{vertexIndices:[0,1,2],colour:A.RED},{vertexIndices:[2,1,3],colour:A.RED},{vertexIndices:[2,3,4],colour:A.GREEN},{vertexIndices:[4,3,5],colour:A.GREEN},{vertexIndices:[4,5,6],colour:A.BLUE},{vertexIndices:[6,5,7],colour:A.BLUE},{vertexIndices:[6,7,0],colour:A.YELLOW},{vertexIndices:[0,7,1],colour:A.YELLOW},{vertexIndices:[1,7,3],colour:A.MAGENTA},{vertexIndices:[3,7,5],colour:A.MAGENTA},{vertexIndices:[6,0,4],colour:A.CYAN},{vertexIndices:[4,0,2],colour:A.CYAN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([-3,0,-5])),k.push(new function(e){this.vertices=[[-1,-1,1],[1,-1,1],[0,1,0],[1,-1,-1],[-1,-1,-1]],this.faces=[{vertexIndices:[0,1,2],colour:A.RED},{vertexIndices:[1,3,2],colour:A.GREEN},{vertexIndices:[4,0,2],colour:A.BLUE},{vertexIndices:[3,4,2],colour:A.MAGENTA},{vertexIndices:[3,1,0],colour:A.MAGENTA},{vertexIndices:[4,3,0],colour:A.MAGENTA}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([0,0,0])),k.push(new function(e){this.vertices=[[-1,-5,1],[1,-5,1],[-1,5,1],[1,5,1],[-1,5,-1],[1,5,-1],[-1,-5,-1],[1,-5,-1]],this.faces=[{vertexIndices:[0,1,2],colour:A.RED},{vertexIndices:[2,1,3],colour:A.RED},{vertexIndices:[2,3,4],colour:A.GREEN},{vertexIndices:[4,3,5],colour:A.GREEN},{vertexIndices:[4,5,6],colour:A.BLUE},{vertexIndices:[6,5,7],colour:A.BLUE},{vertexIndices:[6,7,0],colour:A.YELLOW},{vertexIndices:[0,7,1],colour:A.YELLOW},{vertexIndices:[1,7,3],colour:A.MAGENTA},{vertexIndices:[3,7,5],colour:A.MAGENTA},{vertexIndices:[6,0,4],colour:A.CYAN},{vertexIndices:[4,0,2],colour:A.CYAN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([-7,4,-3])),k.push(new function(e){this.vertices=[[-10,0,-10],[10,0,-10],[10,0,10],[-10,0,10]],this.faces=[{vertexIndices:[2,1,0],colour:A.BROWN},{vertexIndices:[3,2,0],colour:A.BROWN}],this.rotation=[0,0,0],this.scale=[1,1,1],this.translation=[0,0,0],this.translation=e}([0,-1,0])),M=w.canvas.height/w.canvas.width,E=w.canvas.width/w.canvas.height,g=Math.PI/180*90,m=2*Math.atan(Math.tan(g/2)*E),T=_.make_perspective(g,M,.1,20),x=[],p.initFrustumPlanes(m,g,.1,20),h.position=[0,0,-8],requestAnimationFrame((function n(o){var c,d;U=((P=o)-N)/1e3,N=P,L.processInput(U),c=h.getTarget(),d=_.make_view(h.position,c,h.up),k.forEach((function(n){var o=_.make_scaler(n.scale[0],n.scale[1],n.scale[2]),c=_.make_translator(n.translation[0],n.translation[1],n.translation[2]),h=_.make_rotator_x(n.rotation[0]),A=_.make_rotator_y(n.rotation[1]),y=_.make_rotator_z(n.rotation[2]),E=e;E=a(E,o),E=a(y,E),E=a(A,E),E=a(h,E),E=a(c,E);for(var M=function(e){var o,a,c,h,A,y,M,m=n.faces[e],g=[v(n.vertices[m.vertexIndices[0]]),v(n.vertices[m.vertexIndices[1]]),v(n.vertices[m.vertexIndices[2]])];if(g.forEach((function(e,n){var t=i(E,e);t=i(d,t),g[n]=t})),1==w.cull_mode&&(a=f((o=g)[0]),c=f(o[1]),h=f(o[2]),A=t(c,a),y=t(h,a),M=l(A=r(A,u(A)),y=r(y,u(y))),s(M=r(M,u(M)),t([0,0,0],a))<0))return"continue";var L=p.createPolygonFromTriangle(f(g[0]),f(g[1]),f(g[2]),m.colour);L=p.clipPolygon(L),p.trianglesFromPolygon(L).forEach((function(e){var n=function(e){var n=[];return e.forEach((function(e){var t=_.perspective_divide(T,e);t[0]*=w.canvas.width/2,t[1]*=w.canvas.height/2,t[1]*=-1,t[0]+=w.canvas.width/2,t[1]+=w.canvas.height/2,n.push(t)})),n}(e.points),t={points:n,colour:m.colour};x.push(t)}))},m=0;m<n.faces.length;m++)M(m)})),w.clear(),w.clearZBuffer(),x.forEach((function(e){w.render(e)})),w.refresh(),x=[],requestAnimationFrame(n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,